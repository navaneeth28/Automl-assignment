2025-02-13 20:17:13,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:17:13,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:17:13,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:17:13,441:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:20:23,298:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:20:23,298:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:20:23,298:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-13 20:20:23,298:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 23:50:12,535:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 23:50:12,535:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 23:50:12,535:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 23:50:12,535:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-19 23:50:25,969:INFO:PyCaret ClassificationExperiment
2025-02-19 23:50:25,969:INFO:Logging name: clf-default-name
2025-02-19 23:50:25,969:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-19 23:50:25,969:INFO:version 3.3.2
2025-02-19 23:50:25,969:INFO:Initializing setup()
2025-02-19 23:50:25,970:INFO:self.USI: 94a4
2025-02-19 23:50:25,970:INFO:self._variable_keys: {'gpu_n_jobs_param', 'fold_shuffle_param', 'y_train', 'fix_imbalance', 'fold_groups_param', 'fold_generator', 'data', 'memory', 'y', 'logging_param', '_available_plots', 'idx', '_ml_usecase', 'y_test', 'X_train', 'is_multiclass', 'html_param', 'n_jobs_param', 'pipeline', 'exp_id', 'seed', 'X', 'gpu_param', 'USI', 'target_param', 'X_test', 'log_plots_param', 'exp_name_log'}
2025-02-19 23:50:25,970:INFO:Checking environment
2025-02-19 23:50:25,970:INFO:python_version: 3.10.14
2025-02-19 23:50:25,970:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-19 23:50:25,970:INFO:machine: AMD64
2025-02-19 23:50:25,971:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-19 23:50:25,983:INFO:Memory: svmem(total=16423702528, available=5173714944, percent=68.5, used=11249987584, free=5173714944)
2025-02-19 23:50:25,984:INFO:Physical Core: 8
2025-02-19 23:50:25,984:INFO:Logical Core: 16
2025-02-19 23:50:25,984:INFO:Checking libraries
2025-02-19 23:50:25,984:INFO:System:
2025-02-19 23:50:25,984:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-19 23:50:25,984:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-19 23:50:25,984:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-19 23:50:25,984:INFO:PyCaret required dependencies:
2025-02-19 23:50:26,561:INFO:                 pip: 25.0
2025-02-19 23:50:26,561:INFO:          setuptools: 75.8.0
2025-02-19 23:50:26,561:INFO:             pycaret: 3.3.2
2025-02-19 23:50:26,561:INFO:             IPython: 8.32.0
2025-02-19 23:50:26,561:INFO:          ipywidgets: 8.1.5
2025-02-19 23:50:26,561:INFO:                tqdm: 4.67.1
2025-02-19 23:50:26,561:INFO:               numpy: 1.26.4
2025-02-19 23:50:26,561:INFO:              pandas: 2.1.4
2025-02-19 23:50:26,561:INFO:              jinja2: 3.1.5
2025-02-19 23:50:26,561:INFO:               scipy: 1.11.4
2025-02-19 23:50:26,561:INFO:              joblib: 1.3.2
2025-02-19 23:50:26,561:INFO:             sklearn: 1.4.2
2025-02-19 23:50:26,561:INFO:                pyod: 2.0.3
2025-02-19 23:50:26,561:INFO:            imblearn: 0.13.0
2025-02-19 23:50:26,561:INFO:   category_encoders: 2.7.0
2025-02-19 23:50:26,561:INFO:            lightgbm: 4.6.0
2025-02-19 23:50:26,561:INFO:               numba: 0.61.0
2025-02-19 23:50:26,561:INFO:            requests: 2.32.3
2025-02-19 23:50:26,561:INFO:          matplotlib: 3.7.5
2025-02-19 23:50:26,561:INFO:          scikitplot: 0.3.7
2025-02-19 23:50:26,561:INFO:         yellowbrick: 1.5
2025-02-19 23:50:26,561:INFO:              plotly: 5.24.1
2025-02-19 23:50:26,561:INFO:    plotly-resampler: Not installed
2025-02-19 23:50:26,561:INFO:             kaleido: 0.2.1
2025-02-19 23:50:26,561:INFO:           schemdraw: 0.15
2025-02-19 23:50:26,561:INFO:         statsmodels: 0.14.4
2025-02-19 23:50:26,561:INFO:              sktime: 0.26.0
2025-02-19 23:50:26,561:INFO:               tbats: 1.1.3
2025-02-19 23:50:26,561:INFO:            pmdarima: 2.0.4
2025-02-19 23:50:26,561:INFO:              psutil: 7.0.0
2025-02-19 23:50:26,561:INFO:          markupsafe: 3.0.2
2025-02-19 23:50:26,561:INFO:             pickle5: Not installed
2025-02-19 23:50:26,561:INFO:         cloudpickle: 3.1.1
2025-02-19 23:50:26,561:INFO:         deprecation: 2.1.0
2025-02-19 23:50:26,561:INFO:              xxhash: 3.5.0
2025-02-19 23:50:26,561:INFO:           wurlitzer: Not installed
2025-02-19 23:50:26,561:INFO:PyCaret optional dependencies:
2025-02-19 23:50:26,578:INFO:                shap: Not installed
2025-02-19 23:50:26,578:INFO:           interpret: Not installed
2025-02-19 23:50:26,578:INFO:                umap: Not installed
2025-02-19 23:50:26,578:INFO:     ydata_profiling: Not installed
2025-02-19 23:50:26,578:INFO:  explainerdashboard: Not installed
2025-02-19 23:50:26,578:INFO:             autoviz: Not installed
2025-02-19 23:50:26,578:INFO:           fairlearn: Not installed
2025-02-19 23:50:26,578:INFO:          deepchecks: Not installed
2025-02-19 23:50:26,578:INFO:             xgboost: Not installed
2025-02-19 23:50:26,578:INFO:            catboost: Not installed
2025-02-19 23:50:26,578:INFO:              kmodes: Not installed
2025-02-19 23:50:26,578:INFO:             mlxtend: Not installed
2025-02-19 23:50:26,578:INFO:       statsforecast: Not installed
2025-02-19 23:50:26,578:INFO:        tune_sklearn: Not installed
2025-02-19 23:50:26,578:INFO:                 ray: Not installed
2025-02-19 23:50:26,578:INFO:            hyperopt: Not installed
2025-02-19 23:50:26,578:INFO:              optuna: Not installed
2025-02-19 23:50:26,578:INFO:               skopt: Not installed
2025-02-19 23:50:26,578:INFO:              mlflow: Not installed
2025-02-19 23:50:26,578:INFO:              gradio: Not installed
2025-02-19 23:50:26,578:INFO:             fastapi: Not installed
2025-02-19 23:50:26,578:INFO:             uvicorn: Not installed
2025-02-19 23:50:26,578:INFO:              m2cgen: Not installed
2025-02-19 23:50:26,578:INFO:           evidently: Not installed
2025-02-19 23:50:26,578:INFO:               fugue: Not installed
2025-02-19 23:50:26,578:INFO:           streamlit: Not installed
2025-02-19 23:50:26,578:INFO:             prophet: Not installed
2025-02-19 23:50:26,578:INFO:None
2025-02-19 23:50:26,578:INFO:Set up data.
2025-02-19 23:50:26,598:INFO:Set up folding strategy.
2025-02-19 23:50:26,598:INFO:Set up train/test split.
2025-02-19 23:50:26,724:INFO:Set up index.
2025-02-19 23:50:26,724:INFO:Assigning column types.
2025-02-19 23:50:26,733:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-19 23:50:26,785:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 23:50:26,787:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 23:50:26,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:26,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:26,863:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-19 23:50:26,873:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 23:50:26,897:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:26,897:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:26,897:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-19 23:50:27,071:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 23:50:27,115:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,115:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,163:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-19 23:50:27,199:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,199:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,199:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-19 23:50:27,287:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,288:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,373:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,373:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:27,379:INFO:Preparing preprocessing pipeline...
2025-02-19 23:50:27,381:INFO:Set up label encoding.
2025-02-19 23:50:27,381:INFO:Set up simple imputation.
2025-02-19 23:50:27,384:INFO:Set up encoding of categorical features.
2025-02-19 23:50:27,385:INFO:Set up column name cleaning.
2025-02-19 23:50:27,567:INFO:Finished creating preprocessing pipeline.
2025-02-19 23:50:27,575:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-19 23:50:27,576:INFO:Creating final display dataframe.
2025-02-19 23:50:27,972:INFO:Setup _display_container:                     Description             Value
0                    Session id              2710
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              94a4
2025-02-19 23:50:28,062:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:28,063:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:28,134:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:28,134:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-19 23:50:28,136:INFO:setup() successfully completed in 2.17s...............
2025-02-19 23:50:34,288:INFO:Initializing compare_models()
2025-02-19 23:50:34,289:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-19 23:50:34,290:INFO:Checking exceptions
2025-02-19 23:50:34,297:INFO:Preparing display monitor
2025-02-19 23:50:34,329:INFO:Initializing Logistic Regression
2025-02-19 23:50:34,329:INFO:Total runtime is 0.0 minutes
2025-02-19 23:50:34,333:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:34,333:INFO:Initializing create_model()
2025-02-19 23:50:34,333:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:34,334:INFO:Checking exceptions
2025-02-19 23:50:34,334:INFO:Importing libraries
2025-02-19 23:50:34,334:INFO:Copying training dataset
2025-02-19 23:50:34,340:INFO:Defining folds
2025-02-19 23:50:34,340:INFO:Declaring metric variables
2025-02-19 23:50:34,346:INFO:Importing untrained model
2025-02-19 23:50:34,351:INFO:Logistic Regression Imported successfully
2025-02-19 23:50:34,359:INFO:Starting cross validation
2025-02-19 23:50:34,363:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:38,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,109:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,109:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,154:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,166:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,175:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,185:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,185:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,185:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,185:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,185:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,285:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,285:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,285:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-19 23:50:38,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,338:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,338:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,338:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,369:INFO:Calculating mean and std
2025-02-19 23:50:38,369:INFO:Creating metrics dataframe
2025-02-19 23:50:38,369:INFO:Uploading results into container
2025-02-19 23:50:38,369:INFO:Uploading model into container now
2025-02-19 23:50:38,369:INFO:_master_model_container: 1
2025-02-19 23:50:38,369:INFO:_display_container: 2
2025-02-19 23:50:38,369:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=2710, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-19 23:50:38,369:INFO:create_model() successfully completed......................................
2025-02-19 23:50:38,487:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:38,487:INFO:Creating metrics dataframe
2025-02-19 23:50:38,487:INFO:Initializing K Neighbors Classifier
2025-02-19 23:50:38,487:INFO:Total runtime is 0.06930889288584391 minutes
2025-02-19 23:50:38,487:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:38,487:INFO:Initializing create_model()
2025-02-19 23:50:38,487:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:38,487:INFO:Checking exceptions
2025-02-19 23:50:38,487:INFO:Importing libraries
2025-02-19 23:50:38,487:INFO:Copying training dataset
2025-02-19 23:50:38,503:INFO:Defining folds
2025-02-19 23:50:38,503:INFO:Declaring metric variables
2025-02-19 23:50:38,503:INFO:Importing untrained model
2025-02-19 23:50:38,514:INFO:K Neighbors Classifier Imported successfully
2025-02-19 23:50:38,523:INFO:Starting cross validation
2025-02-19 23:50:38,526:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:38,852:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,870:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,886:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,886:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,891:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:38,891:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,080:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,081:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,085:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,095:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,110:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,112:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,127:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,128:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,159:INFO:Calculating mean and std
2025-02-19 23:50:41,161:INFO:Creating metrics dataframe
2025-02-19 23:50:41,164:INFO:Uploading results into container
2025-02-19 23:50:41,165:INFO:Uploading model into container now
2025-02-19 23:50:41,166:INFO:_master_model_container: 2
2025-02-19 23:50:41,166:INFO:_display_container: 2
2025-02-19 23:50:41,166:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-19 23:50:41,167:INFO:create_model() successfully completed......................................
2025-02-19 23:50:41,287:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:41,287:INFO:Creating metrics dataframe
2025-02-19 23:50:41,297:INFO:Initializing Naive Bayes
2025-02-19 23:50:41,297:INFO:Total runtime is 0.11613710721333821 minutes
2025-02-19 23:50:41,300:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:41,301:INFO:Initializing create_model()
2025-02-19 23:50:41,301:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:41,301:INFO:Checking exceptions
2025-02-19 23:50:41,301:INFO:Importing libraries
2025-02-19 23:50:41,301:INFO:Copying training dataset
2025-02-19 23:50:41,308:INFO:Defining folds
2025-02-19 23:50:41,309:INFO:Declaring metric variables
2025-02-19 23:50:41,313:INFO:Importing untrained model
2025-02-19 23:50:41,317:INFO:Naive Bayes Imported successfully
2025-02-19 23:50:41,325:INFO:Starting cross validation
2025-02-19 23:50:41,327:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:41,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,492:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,494:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,494:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,496:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,498:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,498:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,500:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,504:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,505:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,510:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,510:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,512:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,522:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,525:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,550:INFO:Calculating mean and std
2025-02-19 23:50:41,552:INFO:Creating metrics dataframe
2025-02-19 23:50:41,554:INFO:Uploading results into container
2025-02-19 23:50:41,556:INFO:Uploading model into container now
2025-02-19 23:50:41,556:INFO:_master_model_container: 3
2025-02-19 23:50:41,556:INFO:_display_container: 2
2025-02-19 23:50:41,556:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-19 23:50:41,557:INFO:create_model() successfully completed......................................
2025-02-19 23:50:41,693:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:41,693:INFO:Creating metrics dataframe
2025-02-19 23:50:41,714:INFO:Initializing Decision Tree Classifier
2025-02-19 23:50:41,715:INFO:Total runtime is 0.1231034755706787 minutes
2025-02-19 23:50:41,717:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:41,718:INFO:Initializing create_model()
2025-02-19 23:50:41,718:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:41,718:INFO:Checking exceptions
2025-02-19 23:50:41,718:INFO:Importing libraries
2025-02-19 23:50:41,718:INFO:Copying training dataset
2025-02-19 23:50:41,725:INFO:Defining folds
2025-02-19 23:50:41,725:INFO:Declaring metric variables
2025-02-19 23:50:41,730:INFO:Importing untrained model
2025-02-19 23:50:41,734:INFO:Decision Tree Classifier Imported successfully
2025-02-19 23:50:41,747:INFO:Starting cross validation
2025-02-19 23:50:41,749:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:41,908:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,923:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,956:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,958:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,973:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:41,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:41,990:INFO:Calculating mean and std
2025-02-19 23:50:41,992:INFO:Creating metrics dataframe
2025-02-19 23:50:41,992:INFO:Uploading results into container
2025-02-19 23:50:41,992:INFO:Uploading model into container now
2025-02-19 23:50:41,992:INFO:_master_model_container: 4
2025-02-19 23:50:41,992:INFO:_display_container: 2
2025-02-19 23:50:41,992:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=2710, splitter='best')
2025-02-19 23:50:41,992:INFO:create_model() successfully completed......................................
2025-02-19 23:50:42,112:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:42,112:INFO:Creating metrics dataframe
2025-02-19 23:50:42,114:INFO:Initializing SVM - Linear Kernel
2025-02-19 23:50:42,114:INFO:Total runtime is 0.12975730895996093 minutes
2025-02-19 23:50:42,126:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:42,126:INFO:Initializing create_model()
2025-02-19 23:50:42,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:42,126:INFO:Checking exceptions
2025-02-19 23:50:42,126:INFO:Importing libraries
2025-02-19 23:50:42,126:INFO:Copying training dataset
2025-02-19 23:50:42,126:INFO:Defining folds
2025-02-19 23:50:42,126:INFO:Declaring metric variables
2025-02-19 23:50:42,141:INFO:Importing untrained model
2025-02-19 23:50:42,147:INFO:SVM - Linear Kernel Imported successfully
2025-02-19 23:50:42,155:INFO:Starting cross validation
2025-02-19 23:50:42,159:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:42,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,376:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,424:INFO:Calculating mean and std
2025-02-19 23:50:42,425:INFO:Creating metrics dataframe
2025-02-19 23:50:42,427:INFO:Uploading results into container
2025-02-19 23:50:42,427:INFO:Uploading model into container now
2025-02-19 23:50:42,427:INFO:_master_model_container: 5
2025-02-19 23:50:42,427:INFO:_display_container: 2
2025-02-19 23:50:42,430:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=2710, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-19 23:50:42,430:INFO:create_model() successfully completed......................................
2025-02-19 23:50:42,526:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:42,526:INFO:Creating metrics dataframe
2025-02-19 23:50:42,526:INFO:Initializing Ridge Classifier
2025-02-19 23:50:42,526:INFO:Total runtime is 0.13661903540293374 minutes
2025-02-19 23:50:42,543:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:42,544:INFO:Initializing create_model()
2025-02-19 23:50:42,544:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:42,544:INFO:Checking exceptions
2025-02-19 23:50:42,544:INFO:Importing libraries
2025-02-19 23:50:42,544:INFO:Copying training dataset
2025-02-19 23:50:42,544:INFO:Defining folds
2025-02-19 23:50:42,544:INFO:Declaring metric variables
2025-02-19 23:50:42,544:INFO:Importing untrained model
2025-02-19 23:50:42,562:INFO:Ridge Classifier Imported successfully
2025-02-19 23:50:42,570:INFO:Starting cross validation
2025-02-19 23:50:42,572:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,741:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,775:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:42,825:INFO:Calculating mean and std
2025-02-19 23:50:42,826:INFO:Creating metrics dataframe
2025-02-19 23:50:42,829:INFO:Uploading results into container
2025-02-19 23:50:42,829:INFO:Uploading model into container now
2025-02-19 23:50:42,830:INFO:_master_model_container: 6
2025-02-19 23:50:42,830:INFO:_display_container: 2
2025-02-19 23:50:42,830:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=2710, solver='auto',
                tol=0.0001)
2025-02-19 23:50:42,832:INFO:create_model() successfully completed......................................
2025-02-19 23:50:42,951:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:42,951:INFO:Creating metrics dataframe
2025-02-19 23:50:42,965:INFO:Initializing Random Forest Classifier
2025-02-19 23:50:42,966:INFO:Total runtime is 0.14395394722620644 minutes
2025-02-19 23:50:42,973:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:42,973:INFO:Initializing create_model()
2025-02-19 23:50:42,974:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:42,974:INFO:Checking exceptions
2025-02-19 23:50:42,974:INFO:Importing libraries
2025-02-19 23:50:42,974:INFO:Copying training dataset
2025-02-19 23:50:42,986:INFO:Defining folds
2025-02-19 23:50:42,987:INFO:Declaring metric variables
2025-02-19 23:50:42,990:INFO:Importing untrained model
2025-02-19 23:50:42,995:INFO:Random Forest Classifier Imported successfully
2025-02-19 23:50:43,003:INFO:Starting cross validation
2025-02-19 23:50:43,005:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:43,510:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,510:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,519:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,522:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,525:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,528:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,542:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,552:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,552:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,555:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,555:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,559:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,568:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,580:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,585:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,585:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:43,694:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:43,711:INFO:Calculating mean and std
2025-02-19 23:50:43,711:INFO:Creating metrics dataframe
2025-02-19 23:50:43,715:INFO:Uploading results into container
2025-02-19 23:50:43,715:INFO:Uploading model into container now
2025-02-19 23:50:43,715:INFO:_master_model_container: 7
2025-02-19 23:50:43,715:INFO:_display_container: 2
2025-02-19 23:50:43,715:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=2710, verbose=0,
                       warm_start=False)
2025-02-19 23:50:43,715:INFO:create_model() successfully completed......................................
2025-02-19 23:50:43,829:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:43,829:INFO:Creating metrics dataframe
2025-02-19 23:50:43,838:INFO:Initializing Quadratic Discriminant Analysis
2025-02-19 23:50:43,838:INFO:Total runtime is 0.15848160584767657 minutes
2025-02-19 23:50:43,844:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:43,844:INFO:Initializing create_model()
2025-02-19 23:50:43,846:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:43,846:INFO:Checking exceptions
2025-02-19 23:50:43,846:INFO:Importing libraries
2025-02-19 23:50:43,846:INFO:Copying training dataset
2025-02-19 23:50:43,850:INFO:Defining folds
2025-02-19 23:50:43,850:INFO:Declaring metric variables
2025-02-19 23:50:43,859:INFO:Importing untrained model
2025-02-19 23:50:43,865:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-19 23:50:43,874:INFO:Starting cross validation
2025-02-19 23:50:43,879:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:43,978:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:43,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:43,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,011:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,011:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,043:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,059:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,059:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-19 23:50:44,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,065:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,133:INFO:Calculating mean and std
2025-02-19 23:50:44,133:INFO:Creating metrics dataframe
2025-02-19 23:50:44,133:INFO:Uploading results into container
2025-02-19 23:50:44,133:INFO:Uploading model into container now
2025-02-19 23:50:44,133:INFO:_master_model_container: 8
2025-02-19 23:50:44,133:INFO:_display_container: 2
2025-02-19 23:50:44,133:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-19 23:50:44,133:INFO:create_model() successfully completed......................................
2025-02-19 23:50:44,252:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:44,253:INFO:Creating metrics dataframe
2025-02-19 23:50:44,262:INFO:Initializing Ada Boost Classifier
2025-02-19 23:50:44,262:INFO:Total runtime is 0.16555701891581215 minutes
2025-02-19 23:50:44,267:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:44,268:INFO:Initializing create_model()
2025-02-19 23:50:44,268:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:44,269:INFO:Checking exceptions
2025-02-19 23:50:44,269:INFO:Importing libraries
2025-02-19 23:50:44,269:INFO:Copying training dataset
2025-02-19 23:50:44,274:INFO:Defining folds
2025-02-19 23:50:44,274:INFO:Declaring metric variables
2025-02-19 23:50:44,281:INFO:Importing untrained model
2025-02-19 23:50:44,285:INFO:Ada Boost Classifier Imported successfully
2025-02-19 23:50:44,293:INFO:Starting cross validation
2025-02-19 23:50:44,297:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:44,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-19 23:50:44,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,479:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,480:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,481:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,483:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,496:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,496:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,498:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:44,514:INFO:Calculating mean and std
2025-02-19 23:50:44,514:INFO:Creating metrics dataframe
2025-02-19 23:50:44,514:INFO:Uploading results into container
2025-02-19 23:50:44,514:INFO:Uploading model into container now
2025-02-19 23:50:44,514:INFO:_master_model_container: 9
2025-02-19 23:50:44,514:INFO:_display_container: 2
2025-02-19 23:50:44,514:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=2710)
2025-02-19 23:50:44,514:INFO:create_model() successfully completed......................................
2025-02-19 23:50:44,614:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:44,614:INFO:Creating metrics dataframe
2025-02-19 23:50:44,630:INFO:Initializing Gradient Boosting Classifier
2025-02-19 23:50:44,630:INFO:Total runtime is 0.1716886480649312 minutes
2025-02-19 23:50:44,634:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:44,634:INFO:Initializing create_model()
2025-02-19 23:50:44,634:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:44,635:INFO:Checking exceptions
2025-02-19 23:50:44,635:INFO:Importing libraries
2025-02-19 23:50:44,635:INFO:Copying training dataset
2025-02-19 23:50:44,635:INFO:Defining folds
2025-02-19 23:50:44,635:INFO:Declaring metric variables
2025-02-19 23:50:44,635:INFO:Importing untrained model
2025-02-19 23:50:44,649:INFO:Gradient Boosting Classifier Imported successfully
2025-02-19 23:50:44,656:INFO:Starting cross validation
2025-02-19 23:50:44,664:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:45,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,314:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,348:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,348:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,364:INFO:Calculating mean and std
2025-02-19 23:50:45,364:INFO:Creating metrics dataframe
2025-02-19 23:50:45,364:INFO:Uploading results into container
2025-02-19 23:50:45,364:INFO:Uploading model into container now
2025-02-19 23:50:45,364:INFO:_master_model_container: 10
2025-02-19 23:50:45,364:INFO:_display_container: 2
2025-02-19 23:50:45,364:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=2710, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-19 23:50:45,364:INFO:create_model() successfully completed......................................
2025-02-19 23:50:45,482:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:45,482:INFO:Creating metrics dataframe
2025-02-19 23:50:45,484:INFO:Initializing Linear Discriminant Analysis
2025-02-19 23:50:45,484:INFO:Total runtime is 0.18592707316080725 minutes
2025-02-19 23:50:45,484:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:45,484:INFO:Initializing create_model()
2025-02-19 23:50:45,484:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:45,484:INFO:Checking exceptions
2025-02-19 23:50:45,484:INFO:Importing libraries
2025-02-19 23:50:45,484:INFO:Copying training dataset
2025-02-19 23:50:45,500:INFO:Defining folds
2025-02-19 23:50:45,500:INFO:Declaring metric variables
2025-02-19 23:50:45,500:INFO:Importing untrained model
2025-02-19 23:50:45,512:INFO:Linear Discriminant Analysis Imported successfully
2025-02-19 23:50:45,521:INFO:Starting cross validation
2025-02-19 23:50:45,524:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:45,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,689:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,689:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,699:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,699:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,699:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,716:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,718:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,765:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,765:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,765:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:45,765:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:45,781:INFO:Calculating mean and std
2025-02-19 23:50:45,782:INFO:Creating metrics dataframe
2025-02-19 23:50:45,782:INFO:Uploading results into container
2025-02-19 23:50:45,782:INFO:Uploading model into container now
2025-02-19 23:50:45,782:INFO:_master_model_container: 11
2025-02-19 23:50:45,782:INFO:_display_container: 2
2025-02-19 23:50:45,782:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-19 23:50:45,782:INFO:create_model() successfully completed......................................
2025-02-19 23:50:45,880:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:45,880:INFO:Creating metrics dataframe
2025-02-19 23:50:45,895:INFO:Initializing Extra Trees Classifier
2025-02-19 23:50:45,895:INFO:Total runtime is 0.19277923107147213 minutes
2025-02-19 23:50:45,895:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:45,895:INFO:Initializing create_model()
2025-02-19 23:50:45,895:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:45,895:INFO:Checking exceptions
2025-02-19 23:50:45,895:INFO:Importing libraries
2025-02-19 23:50:45,895:INFO:Copying training dataset
2025-02-19 23:50:45,895:INFO:Defining folds
2025-02-19 23:50:45,895:INFO:Declaring metric variables
2025-02-19 23:50:45,918:INFO:Importing untrained model
2025-02-19 23:50:45,924:INFO:Extra Trees Classifier Imported successfully
2025-02-19 23:50:45,936:INFO:Starting cross validation
2025-02-19 23:50:45,938:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:46,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,515:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,515:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,515:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:46,530:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:46,553:INFO:Calculating mean and std
2025-02-19 23:50:46,553:INFO:Creating metrics dataframe
2025-02-19 23:50:46,558:INFO:Uploading results into container
2025-02-19 23:50:46,558:INFO:Uploading model into container now
2025-02-19 23:50:46,558:INFO:_master_model_container: 12
2025-02-19 23:50:46,558:INFO:_display_container: 2
2025-02-19 23:50:46,558:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=2710, verbose=0,
                     warm_start=False)
2025-02-19 23:50:46,558:INFO:create_model() successfully completed......................................
2025-02-19 23:50:46,654:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:46,654:INFO:Creating metrics dataframe
2025-02-19 23:50:46,669:INFO:Initializing Light Gradient Boosting Machine
2025-02-19 23:50:46,669:INFO:Total runtime is 0.20567862987518307 minutes
2025-02-19 23:50:46,669:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:46,669:INFO:Initializing create_model()
2025-02-19 23:50:46,669:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:46,669:INFO:Checking exceptions
2025-02-19 23:50:46,669:INFO:Importing libraries
2025-02-19 23:50:46,669:INFO:Copying training dataset
2025-02-19 23:50:46,669:INFO:Defining folds
2025-02-19 23:50:46,669:INFO:Declaring metric variables
2025-02-19 23:50:46,685:INFO:Importing untrained model
2025-02-19 23:50:46,694:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-19 23:50:46,703:INFO:Starting cross validation
2025-02-19 23:50:46,707:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:47,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,368:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,368:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,368:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,490:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,535:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,550:INFO:Calculating mean and std
2025-02-19 23:50:47,552:INFO:Creating metrics dataframe
2025-02-19 23:50:47,554:INFO:Uploading results into container
2025-02-19 23:50:47,555:INFO:Uploading model into container now
2025-02-19 23:50:47,556:INFO:_master_model_container: 13
2025-02-19 23:50:47,556:INFO:_display_container: 2
2025-02-19 23:50:47,556:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=2710, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-19 23:50:47,556:INFO:create_model() successfully completed......................................
2025-02-19 23:50:47,668:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:47,668:INFO:Creating metrics dataframe
2025-02-19 23:50:47,668:INFO:Initializing Dummy Classifier
2025-02-19 23:50:47,668:INFO:Total runtime is 0.22232811848322548 minutes
2025-02-19 23:50:47,686:INFO:SubProcess create_model() called ==================================
2025-02-19 23:50:47,686:INFO:Initializing create_model()
2025-02-19 23:50:47,686:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x00000237AA96A2F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:47,686:INFO:Checking exceptions
2025-02-19 23:50:47,687:INFO:Importing libraries
2025-02-19 23:50:47,687:INFO:Copying training dataset
2025-02-19 23:50:47,690:INFO:Defining folds
2025-02-19 23:50:47,690:INFO:Declaring metric variables
2025-02-19 23:50:47,698:INFO:Importing untrained model
2025-02-19 23:50:47,701:INFO:Dummy Classifier Imported successfully
2025-02-19 23:50:47,713:INFO:Starting cross validation
2025-02-19 23:50:47,713:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-19 23:50:47,854:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,854:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,854:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,914:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,920:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:50:47,922:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:50:47,938:INFO:Calculating mean and std
2025-02-19 23:50:47,938:INFO:Creating metrics dataframe
2025-02-19 23:50:47,938:INFO:Uploading results into container
2025-02-19 23:50:47,938:INFO:Uploading model into container now
2025-02-19 23:50:47,938:INFO:_master_model_container: 14
2025-02-19 23:50:47,938:INFO:_display_container: 2
2025-02-19 23:50:47,938:INFO:DummyClassifier(constant=None, random_state=2710, strategy='prior')
2025-02-19 23:50:47,938:INFO:create_model() successfully completed......................................
2025-02-19 23:50:48,054:INFO:SubProcess create_model() end ==================================
2025-02-19 23:50:48,054:INFO:Creating metrics dataframe
2025-02-19 23:50:48,069:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-19 23:50:48,074:INFO:Initializing create_model()
2025-02-19 23:50:48,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-19 23:50:48,074:INFO:Checking exceptions
2025-02-19 23:50:48,074:INFO:Importing libraries
2025-02-19 23:50:48,074:INFO:Copying training dataset
2025-02-19 23:50:48,074:INFO:Defining folds
2025-02-19 23:50:48,074:INFO:Declaring metric variables
2025-02-19 23:50:48,074:INFO:Importing untrained model
2025-02-19 23:50:48,074:INFO:Declaring custom model
2025-02-19 23:50:48,074:INFO:Naive Bayes Imported successfully
2025-02-19 23:50:48,090:INFO:Cross validation set to False
2025-02-19 23:50:48,090:INFO:Fitting Model
2025-02-19 23:50:48,159:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-19 23:50:48,159:INFO:create_model() successfully completed......................................
2025-02-19 23:50:48,303:INFO:_master_model_container: 14
2025-02-19 23:50:48,303:INFO:_display_container: 2
2025-02-19 23:50:48,303:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-19 23:50:48,303:INFO:compare_models() successfully completed......................................
2025-02-19 23:52:01,419:INFO:Initializing predict_model()
2025-02-19 23:52:01,420:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x00000237EE109C30>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x00000237CB80B370>)
2025-02-19 23:52:01,420:INFO:Checking exceptions
2025-02-19 23:52:01,420:INFO:Preloading libraries
2025-02-19 23:52:01,423:INFO:Set up data.
2025-02-19 23:52:01,428:INFO:Set up index.
2025-02-19 23:52:01,527:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-19 23:52:01,530:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:52:01,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:52:01,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:52:01,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:52:01,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-19 23:52:01,535:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-19 23:52:01,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-19 23:52:01,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-19 23:52:01,537:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-19 23:52:08,625:INFO:Initializing save_model()
2025-02-19 23:52:08,625:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-19 23:52:08,625:INFO:Adding model into prep_pipe
2025-02-19 23:52:08,640:INFO:LDA.pkl saved in current working directory
2025-02-19 23:52:08,648:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-19 23:52:08,648:INFO:save_model() successfully completed......................................
2025-02-20 00:08:14,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:08:14,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:08:14,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:08:14,201:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:08:14,888:INFO:PyCaret ClassificationExperiment
2025-02-20 00:08:14,894:INFO:Logging name: clf-default-name
2025-02-20 00:08:14,894:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:08:14,895:INFO:version 3.3.2
2025-02-20 00:08:14,895:INFO:Initializing setup()
2025-02-20 00:08:14,895:INFO:self.USI: 4b66
2025-02-20 00:08:14,895:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 00:08:14,895:INFO:Checking environment
2025-02-20 00:08:14,895:INFO:python_version: 3.10.14
2025-02-20 00:08:14,897:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:08:14,897:INFO:machine: AMD64
2025-02-20 00:08:14,897:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:08:14,897:INFO:Memory: svmem(total=16423702528, available=5589905408, percent=66.0, used=10833797120, free=5589905408)
2025-02-20 00:08:14,912:INFO:Physical Core: 8
2025-02-20 00:08:14,912:INFO:Logical Core: 16
2025-02-20 00:08:14,912:INFO:Checking libraries
2025-02-20 00:08:14,912:INFO:System:
2025-02-20 00:08:14,912:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:08:14,912:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:08:14,912:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:08:14,912:INFO:PyCaret required dependencies:
2025-02-20 00:08:14,936:INFO:                 pip: 25.0
2025-02-20 00:08:14,936:INFO:          setuptools: 75.8.0
2025-02-20 00:08:14,936:INFO:             pycaret: 3.3.2
2025-02-20 00:08:14,936:INFO:             IPython: 8.32.0
2025-02-20 00:08:14,936:INFO:          ipywidgets: 8.1.5
2025-02-20 00:08:14,936:INFO:                tqdm: 4.67.1
2025-02-20 00:08:14,936:INFO:               numpy: 1.26.4
2025-02-20 00:08:14,936:INFO:              pandas: 2.1.4
2025-02-20 00:08:14,936:INFO:              jinja2: 3.1.5
2025-02-20 00:08:14,936:INFO:               scipy: 1.11.4
2025-02-20 00:08:14,936:INFO:              joblib: 1.3.2
2025-02-20 00:08:14,936:INFO:             sklearn: 1.4.2
2025-02-20 00:08:14,936:INFO:                pyod: 2.0.3
2025-02-20 00:08:14,936:INFO:            imblearn: 0.13.0
2025-02-20 00:08:14,936:INFO:   category_encoders: 2.7.0
2025-02-20 00:08:14,936:INFO:            lightgbm: 4.6.0
2025-02-20 00:08:14,936:INFO:               numba: 0.61.0
2025-02-20 00:08:14,936:INFO:            requests: 2.32.3
2025-02-20 00:08:14,936:INFO:          matplotlib: 3.7.5
2025-02-20 00:08:14,936:INFO:          scikitplot: 0.3.7
2025-02-20 00:08:14,936:INFO:         yellowbrick: 1.5
2025-02-20 00:08:14,944:INFO:              plotly: 5.24.1
2025-02-20 00:08:14,944:INFO:    plotly-resampler: Not installed
2025-02-20 00:08:14,944:INFO:             kaleido: 0.2.1
2025-02-20 00:08:14,944:INFO:           schemdraw: 0.15
2025-02-20 00:08:14,944:INFO:         statsmodels: 0.14.4
2025-02-20 00:08:14,944:INFO:              sktime: 0.26.0
2025-02-20 00:08:14,944:INFO:               tbats: 1.1.3
2025-02-20 00:08:14,944:INFO:            pmdarima: 2.0.4
2025-02-20 00:08:14,944:INFO:              psutil: 7.0.0
2025-02-20 00:08:14,944:INFO:          markupsafe: 3.0.2
2025-02-20 00:08:14,944:INFO:             pickle5: Not installed
2025-02-20 00:08:14,944:INFO:         cloudpickle: 3.1.1
2025-02-20 00:08:14,944:INFO:         deprecation: 2.1.0
2025-02-20 00:08:14,944:INFO:              xxhash: 3.5.0
2025-02-20 00:08:14,944:INFO:           wurlitzer: Not installed
2025-02-20 00:08:14,944:INFO:PyCaret optional dependencies:
2025-02-20 00:08:14,944:INFO:                shap: Not installed
2025-02-20 00:08:14,944:INFO:           interpret: Not installed
2025-02-20 00:08:14,944:INFO:                umap: Not installed
2025-02-20 00:08:14,944:INFO:     ydata_profiling: Not installed
2025-02-20 00:08:14,944:INFO:  explainerdashboard: Not installed
2025-02-20 00:08:14,944:INFO:             autoviz: Not installed
2025-02-20 00:08:14,944:INFO:           fairlearn: Not installed
2025-02-20 00:08:14,944:INFO:          deepchecks: Not installed
2025-02-20 00:08:14,944:INFO:             xgboost: Not installed
2025-02-20 00:08:14,944:INFO:            catboost: Not installed
2025-02-20 00:08:14,944:INFO:              kmodes: Not installed
2025-02-20 00:08:14,944:INFO:             mlxtend: Not installed
2025-02-20 00:08:14,944:INFO:       statsforecast: Not installed
2025-02-20 00:08:14,944:INFO:        tune_sklearn: Not installed
2025-02-20 00:08:14,944:INFO:                 ray: Not installed
2025-02-20 00:08:14,944:INFO:            hyperopt: Not installed
2025-02-20 00:08:14,944:INFO:              optuna: Not installed
2025-02-20 00:08:14,944:INFO:               skopt: Not installed
2025-02-20 00:08:14,944:INFO:              mlflow: Not installed
2025-02-20 00:08:14,944:INFO:              gradio: Not installed
2025-02-20 00:08:14,944:INFO:             fastapi: Not installed
2025-02-20 00:08:14,944:INFO:             uvicorn: Not installed
2025-02-20 00:08:14,944:INFO:              m2cgen: Not installed
2025-02-20 00:08:14,944:INFO:           evidently: Not installed
2025-02-20 00:08:14,944:INFO:               fugue: Not installed
2025-02-20 00:08:14,944:INFO:           streamlit: Not installed
2025-02-20 00:08:14,944:INFO:             prophet: Not installed
2025-02-20 00:08:14,944:INFO:None
2025-02-20 00:08:14,944:INFO:Set up data.
2025-02-20 00:08:14,972:INFO:Set up folding strategy.
2025-02-20 00:08:14,972:INFO:Set up train/test split.
2025-02-20 00:08:14,985:INFO:Set up index.
2025-02-20 00:08:14,985:INFO:Assigning column types.
2025-02-20 00:08:14,985:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:08:15,021:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,036:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,073:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,122:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,122:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,137:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,137:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,137:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:08:15,183:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,222:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,222:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,267:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:08:15,442:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,442:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,442:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:08:15,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,550:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,550:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:15,566:INFO:Preparing preprocessing pipeline...
2025-02-20 00:08:15,566:INFO:Set up label encoding.
2025-02-20 00:08:15,566:INFO:Set up simple imputation.
2025-02-20 00:08:15,566:INFO:Set up encoding of categorical features.
2025-02-20 00:08:15,566:INFO:Set up column name cleaning.
2025-02-20 00:08:15,686:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:08:15,709:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:08:15,709:INFO:Creating final display dataframe.
2025-02-20 00:08:16,156:INFO:Setup _display_container:                     Description             Value
0                    Session id              1475
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              4b66
2025-02-20 00:08:16,240:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:16,241:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:16,319:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:16,319:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:08:16,325:INFO:setup() successfully completed in 1.44s...............
2025-02-20 00:08:16,333:INFO:Initializing compare_models()
2025-02-20 00:08:16,333:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:08:16,333:INFO:Checking exceptions
2025-02-20 00:08:16,342:INFO:Preparing display monitor
2025-02-20 00:08:16,376:INFO:Initializing Logistic Regression
2025-02-20 00:08:16,376:INFO:Total runtime is 0.0 minutes
2025-02-20 00:08:16,378:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:16,378:INFO:Initializing create_model()
2025-02-20 00:08:16,378:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:16,378:INFO:Checking exceptions
2025-02-20 00:08:16,378:INFO:Importing libraries
2025-02-20 00:08:16,378:INFO:Copying training dataset
2025-02-20 00:08:16,378:INFO:Defining folds
2025-02-20 00:08:16,378:INFO:Declaring metric variables
2025-02-20 00:08:16,391:INFO:Importing untrained model
2025-02-20 00:08:16,393:INFO:Logistic Regression Imported successfully
2025-02-20 00:08:16,393:INFO:Starting cross validation
2025-02-20 00:08:16,405:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:20,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,866:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,882:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,898:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,937:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,938:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,965:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:08:20,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,986:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:20,994:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,001:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,001:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,031:INFO:Calculating mean and std
2025-02-20 00:08:21,032:INFO:Creating metrics dataframe
2025-02-20 00:08:21,035:INFO:Uploading results into container
2025-02-20 00:08:21,035:INFO:Uploading model into container now
2025-02-20 00:08:21,035:INFO:_master_model_container: 1
2025-02-20 00:08:21,035:INFO:_display_container: 2
2025-02-20 00:08:21,035:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=1475, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:08:21,037:INFO:create_model() successfully completed......................................
2025-02-20 00:08:21,136:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:21,136:INFO:Creating metrics dataframe
2025-02-20 00:08:21,154:INFO:Initializing K Neighbors Classifier
2025-02-20 00:08:21,154:INFO:Total runtime is 0.07963309685389201 minutes
2025-02-20 00:08:21,156:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:21,156:INFO:Initializing create_model()
2025-02-20 00:08:21,156:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:21,156:INFO:Checking exceptions
2025-02-20 00:08:21,156:INFO:Importing libraries
2025-02-20 00:08:21,156:INFO:Copying training dataset
2025-02-20 00:08:21,165:INFO:Defining folds
2025-02-20 00:08:21,165:INFO:Declaring metric variables
2025-02-20 00:08:21,172:INFO:Importing untrained model
2025-02-20 00:08:21,172:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:08:21,185:INFO:Starting cross validation
2025-02-20 00:08:21,186:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:21,458:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,474:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,474:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,477:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,493:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,500:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,505:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:21,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,788:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,823:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,823:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,823:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:23,853:INFO:Calculating mean and std
2025-02-20 00:08:23,854:INFO:Creating metrics dataframe
2025-02-20 00:08:23,855:INFO:Uploading results into container
2025-02-20 00:08:23,855:INFO:Uploading model into container now
2025-02-20 00:08:23,859:INFO:_master_model_container: 2
2025-02-20 00:08:23,859:INFO:_display_container: 2
2025-02-20 00:08:23,859:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:08:23,859:INFO:create_model() successfully completed......................................
2025-02-20 00:08:23,960:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:23,960:INFO:Creating metrics dataframe
2025-02-20 00:08:23,976:INFO:Initializing Naive Bayes
2025-02-20 00:08:23,976:INFO:Total runtime is 0.1266788959503174 minutes
2025-02-20 00:08:23,976:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:23,976:INFO:Initializing create_model()
2025-02-20 00:08:23,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:23,976:INFO:Checking exceptions
2025-02-20 00:08:23,976:INFO:Importing libraries
2025-02-20 00:08:23,976:INFO:Copying training dataset
2025-02-20 00:08:23,988:INFO:Defining folds
2025-02-20 00:08:23,989:INFO:Declaring metric variables
2025-02-20 00:08:23,993:INFO:Importing untrained model
2025-02-20 00:08:23,996:INFO:Naive Bayes Imported successfully
2025-02-20 00:08:24,006:INFO:Starting cross validation
2025-02-20 00:08:24,009:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:24,169:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,187:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,187:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,193:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,195:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,195:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,197:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,202:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,203:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,239:INFO:Calculating mean and std
2025-02-20 00:08:24,239:INFO:Creating metrics dataframe
2025-02-20 00:08:24,240:INFO:Uploading results into container
2025-02-20 00:08:24,240:INFO:Uploading model into container now
2025-02-20 00:08:24,240:INFO:_master_model_container: 3
2025-02-20 00:08:24,240:INFO:_display_container: 2
2025-02-20 00:08:24,240:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:08:24,240:INFO:create_model() successfully completed......................................
2025-02-20 00:08:24,340:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:24,340:INFO:Creating metrics dataframe
2025-02-20 00:08:24,358:INFO:Initializing Decision Tree Classifier
2025-02-20 00:08:24,358:INFO:Total runtime is 0.13304570118586223 minutes
2025-02-20 00:08:24,362:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:24,362:INFO:Initializing create_model()
2025-02-20 00:08:24,362:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:24,362:INFO:Checking exceptions
2025-02-20 00:08:24,362:INFO:Importing libraries
2025-02-20 00:08:24,362:INFO:Copying training dataset
2025-02-20 00:08:24,363:INFO:Defining folds
2025-02-20 00:08:24,363:INFO:Declaring metric variables
2025-02-20 00:08:24,376:INFO:Importing untrained model
2025-02-20 00:08:24,382:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:08:24,389:INFO:Starting cross validation
2025-02-20 00:08:24,392:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:24,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,622:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,622:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:24,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:24,653:INFO:Calculating mean and std
2025-02-20 00:08:24,655:INFO:Creating metrics dataframe
2025-02-20 00:08:24,658:INFO:Uploading results into container
2025-02-20 00:08:24,659:INFO:Uploading model into container now
2025-02-20 00:08:24,659:INFO:_master_model_container: 4
2025-02-20 00:08:24,659:INFO:_display_container: 2
2025-02-20 00:08:24,660:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=1475, splitter='best')
2025-02-20 00:08:24,660:INFO:create_model() successfully completed......................................
2025-02-20 00:08:24,773:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:24,773:INFO:Creating metrics dataframe
2025-02-20 00:08:24,782:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:08:24,782:INFO:Total runtime is 0.14010872840881347 minutes
2025-02-20 00:08:24,785:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:24,785:INFO:Initializing create_model()
2025-02-20 00:08:24,787:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:24,787:INFO:Checking exceptions
2025-02-20 00:08:24,787:INFO:Importing libraries
2025-02-20 00:08:24,787:INFO:Copying training dataset
2025-02-20 00:08:24,797:INFO:Defining folds
2025-02-20 00:08:24,797:INFO:Declaring metric variables
2025-02-20 00:08:24,799:INFO:Importing untrained model
2025-02-20 00:08:24,805:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:08:24,813:INFO:Starting cross validation
2025-02-20 00:08:24,814:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:25,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,046:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,046:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,046:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,060:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,075:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,088:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,088:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,097:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,131:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,131:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,131:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,142:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,145:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,158:INFO:Calculating mean and std
2025-02-20 00:08:25,160:INFO:Creating metrics dataframe
2025-02-20 00:08:25,162:INFO:Uploading results into container
2025-02-20 00:08:25,163:INFO:Uploading model into container now
2025-02-20 00:08:25,163:INFO:_master_model_container: 5
2025-02-20 00:08:25,163:INFO:_display_container: 2
2025-02-20 00:08:25,163:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=1475, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:08:25,164:INFO:create_model() successfully completed......................................
2025-02-20 00:08:25,286:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:25,286:INFO:Creating metrics dataframe
2025-02-20 00:08:25,297:INFO:Initializing Ridge Classifier
2025-02-20 00:08:25,297:INFO:Total runtime is 0.14869335095087688 minutes
2025-02-20 00:08:25,298:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:25,302:INFO:Initializing create_model()
2025-02-20 00:08:25,302:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:25,302:INFO:Checking exceptions
2025-02-20 00:08:25,303:INFO:Importing libraries
2025-02-20 00:08:25,303:INFO:Copying training dataset
2025-02-20 00:08:25,311:INFO:Defining folds
2025-02-20 00:08:25,311:INFO:Declaring metric variables
2025-02-20 00:08:25,315:INFO:Importing untrained model
2025-02-20 00:08:25,320:INFO:Ridge Classifier Imported successfully
2025-02-20 00:08:25,329:INFO:Starting cross validation
2025-02-20 00:08:25,332:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:25,492:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,507:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,507:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,507:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,507:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,507:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,524:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,573:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:25,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:25,589:INFO:Calculating mean and std
2025-02-20 00:08:25,591:INFO:Creating metrics dataframe
2025-02-20 00:08:25,591:INFO:Uploading results into container
2025-02-20 00:08:25,591:INFO:Uploading model into container now
2025-02-20 00:08:25,591:INFO:_master_model_container: 6
2025-02-20 00:08:25,591:INFO:_display_container: 2
2025-02-20 00:08:25,591:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=1475, solver='auto',
                tol=0.0001)
2025-02-20 00:08:25,591:INFO:create_model() successfully completed......................................
2025-02-20 00:08:25,691:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:25,691:INFO:Creating metrics dataframe
2025-02-20 00:08:25,708:INFO:Initializing Random Forest Classifier
2025-02-20 00:08:25,708:INFO:Total runtime is 0.15554026762644452 minutes
2025-02-20 00:08:25,717:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:25,717:INFO:Initializing create_model()
2025-02-20 00:08:25,717:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:25,717:INFO:Checking exceptions
2025-02-20 00:08:25,717:INFO:Importing libraries
2025-02-20 00:08:25,717:INFO:Copying training dataset
2025-02-20 00:08:25,725:INFO:Defining folds
2025-02-20 00:08:25,725:INFO:Declaring metric variables
2025-02-20 00:08:25,728:INFO:Importing untrained model
2025-02-20 00:08:25,734:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:08:25,741:INFO:Starting cross validation
2025-02-20 00:08:25,743:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:26,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,324:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,359:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,367:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,458:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,477:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,508:INFO:Calculating mean and std
2025-02-20 00:08:26,510:INFO:Creating metrics dataframe
2025-02-20 00:08:26,514:INFO:Uploading results into container
2025-02-20 00:08:26,515:INFO:Uploading model into container now
2025-02-20 00:08:26,515:INFO:_master_model_container: 7
2025-02-20 00:08:26,515:INFO:_display_container: 2
2025-02-20 00:08:26,515:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=1475, verbose=0,
                       warm_start=False)
2025-02-20 00:08:26,515:INFO:create_model() successfully completed......................................
2025-02-20 00:08:26,649:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:26,651:INFO:Creating metrics dataframe
2025-02-20 00:08:26,659:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:08:26,660:INFO:Total runtime is 0.17139995892842613 minutes
2025-02-20 00:08:26,663:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:26,663:INFO:Initializing create_model()
2025-02-20 00:08:26,663:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:26,663:INFO:Checking exceptions
2025-02-20 00:08:26,663:INFO:Importing libraries
2025-02-20 00:08:26,663:INFO:Copying training dataset
2025-02-20 00:08:26,663:INFO:Defining folds
2025-02-20 00:08:26,663:INFO:Declaring metric variables
2025-02-20 00:08:26,675:INFO:Importing untrained model
2025-02-20 00:08:26,678:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:08:26,688:INFO:Starting cross validation
2025-02-20 00:08:26,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:26,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,925:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:26,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:26,977:INFO:Calculating mean and std
2025-02-20 00:08:26,977:INFO:Creating metrics dataframe
2025-02-20 00:08:26,982:INFO:Uploading results into container
2025-02-20 00:08:26,982:INFO:Uploading model into container now
2025-02-20 00:08:26,983:INFO:_master_model_container: 8
2025-02-20 00:08:26,983:INFO:_display_container: 2
2025-02-20 00:08:26,984:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:08:26,984:INFO:create_model() successfully completed......................................
2025-02-20 00:08:27,103:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:27,104:INFO:Creating metrics dataframe
2025-02-20 00:08:27,116:INFO:Initializing Ada Boost Classifier
2025-02-20 00:08:27,117:INFO:Total runtime is 0.1790163318316142 minutes
2025-02-20 00:08:27,122:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:27,122:INFO:Initializing create_model()
2025-02-20 00:08:27,122:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:27,122:INFO:Checking exceptions
2025-02-20 00:08:27,122:INFO:Importing libraries
2025-02-20 00:08:27,123:INFO:Copying training dataset
2025-02-20 00:08:27,131:INFO:Defining folds
2025-02-20 00:08:27,132:INFO:Declaring metric variables
2025-02-20 00:08:27,135:INFO:Importing untrained model
2025-02-20 00:08:27,139:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:08:27,149:INFO:Starting cross validation
2025-02-20 00:08:27,150:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:27,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,362:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,428:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:27,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:27,478:INFO:Calculating mean and std
2025-02-20 00:08:27,478:INFO:Creating metrics dataframe
2025-02-20 00:08:27,482:INFO:Uploading results into container
2025-02-20 00:08:27,483:INFO:Uploading model into container now
2025-02-20 00:08:27,483:INFO:_master_model_container: 9
2025-02-20 00:08:27,483:INFO:_display_container: 2
2025-02-20 00:08:27,483:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=1475)
2025-02-20 00:08:27,483:INFO:create_model() successfully completed......................................
2025-02-20 00:08:27,595:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:27,597:INFO:Creating metrics dataframe
2025-02-20 00:08:27,605:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:08:27,605:INFO:Total runtime is 0.18715957800547284 minutes
2025-02-20 00:08:27,612:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:27,612:INFO:Initializing create_model()
2025-02-20 00:08:27,612:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:27,614:INFO:Checking exceptions
2025-02-20 00:08:27,614:INFO:Importing libraries
2025-02-20 00:08:27,614:INFO:Copying training dataset
2025-02-20 00:08:27,619:INFO:Defining folds
2025-02-20 00:08:27,625:INFO:Declaring metric variables
2025-02-20 00:08:27,630:INFO:Importing untrained model
2025-02-20 00:08:27,630:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:08:27,630:INFO:Starting cross validation
2025-02-20 00:08:27,646:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:28,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,318:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,321:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,329:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,345:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,352:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,354:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,356:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,356:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,365:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,366:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,366:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,367:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,368:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,371:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,372:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,372:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,372:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,397:INFO:Calculating mean and std
2025-02-20 00:08:28,399:INFO:Creating metrics dataframe
2025-02-20 00:08:28,401:INFO:Uploading results into container
2025-02-20 00:08:28,402:INFO:Uploading model into container now
2025-02-20 00:08:28,402:INFO:_master_model_container: 10
2025-02-20 00:08:28,402:INFO:_display_container: 2
2025-02-20 00:08:28,402:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=1475, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:08:28,402:INFO:create_model() successfully completed......................................
2025-02-20 00:08:28,499:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:28,506:INFO:Creating metrics dataframe
2025-02-20 00:08:28,518:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:08:28,518:INFO:Total runtime is 0.20236430565516156 minutes
2025-02-20 00:08:28,521:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:28,521:INFO:Initializing create_model()
2025-02-20 00:08:28,521:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:28,521:INFO:Checking exceptions
2025-02-20 00:08:28,521:INFO:Importing libraries
2025-02-20 00:08:28,521:INFO:Copying training dataset
2025-02-20 00:08:28,529:INFO:Defining folds
2025-02-20 00:08:28,529:INFO:Declaring metric variables
2025-02-20 00:08:28,534:INFO:Importing untrained model
2025-02-20 00:08:28,535:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:08:28,542:INFO:Starting cross validation
2025-02-20 00:08:28,548:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:28,696:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,696:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,696:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,730:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,780:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,781:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,786:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,791:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:28,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:28,812:INFO:Calculating mean and std
2025-02-20 00:08:28,813:INFO:Creating metrics dataframe
2025-02-20 00:08:28,815:INFO:Uploading results into container
2025-02-20 00:08:28,815:INFO:Uploading model into container now
2025-02-20 00:08:28,815:INFO:_master_model_container: 11
2025-02-20 00:08:28,815:INFO:_display_container: 2
2025-02-20 00:08:28,815:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:08:28,815:INFO:create_model() successfully completed......................................
2025-02-20 00:08:28,913:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:28,913:INFO:Creating metrics dataframe
2025-02-20 00:08:28,915:INFO:Initializing Extra Trees Classifier
2025-02-20 00:08:28,915:INFO:Total runtime is 0.2089868744214376 minutes
2025-02-20 00:08:28,924:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:28,924:INFO:Initializing create_model()
2025-02-20 00:08:28,924:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:28,927:INFO:Checking exceptions
2025-02-20 00:08:28,927:INFO:Importing libraries
2025-02-20 00:08:28,927:INFO:Copying training dataset
2025-02-20 00:08:28,931:INFO:Defining folds
2025-02-20 00:08:28,931:INFO:Declaring metric variables
2025-02-20 00:08:28,935:INFO:Importing untrained model
2025-02-20 00:08:28,938:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:08:28,945:INFO:Starting cross validation
2025-02-20 00:08:28,947:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:29,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,432:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,448:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,549:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,549:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,559:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,591:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:29,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:29,613:INFO:Calculating mean and std
2025-02-20 00:08:29,615:INFO:Creating metrics dataframe
2025-02-20 00:08:29,615:INFO:Uploading results into container
2025-02-20 00:08:29,615:INFO:Uploading model into container now
2025-02-20 00:08:29,615:INFO:_master_model_container: 12
2025-02-20 00:08:29,615:INFO:_display_container: 2
2025-02-20 00:08:29,615:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=1475, verbose=0,
                     warm_start=False)
2025-02-20 00:08:29,615:INFO:create_model() successfully completed......................................
2025-02-20 00:08:29,732:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:29,733:INFO:Creating metrics dataframe
2025-02-20 00:08:29,733:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:08:29,733:INFO:Total runtime is 0.22262938022613527 minutes
2025-02-20 00:08:29,745:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:29,745:INFO:Initializing create_model()
2025-02-20 00:08:29,745:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:29,746:INFO:Checking exceptions
2025-02-20 00:08:29,746:INFO:Importing libraries
2025-02-20 00:08:29,746:INFO:Copying training dataset
2025-02-20 00:08:29,750:INFO:Defining folds
2025-02-20 00:08:29,754:INFO:Declaring metric variables
2025-02-20 00:08:29,758:INFO:Importing untrained model
2025-02-20 00:08:29,758:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:08:29,770:INFO:Starting cross validation
2025-02-20 00:08:29,773:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:30,322:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,322:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,332:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,337:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,337:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,340:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,340:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,343:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,343:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,343:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,348:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,353:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,424:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,476:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,478:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,481:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,498:INFO:Calculating mean and std
2025-02-20 00:08:30,499:INFO:Creating metrics dataframe
2025-02-20 00:08:30,502:INFO:Uploading results into container
2025-02-20 00:08:30,503:INFO:Uploading model into container now
2025-02-20 00:08:30,503:INFO:_master_model_container: 13
2025-02-20 00:08:30,503:INFO:_display_container: 2
2025-02-20 00:08:30,504:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=1475, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:08:30,504:INFO:create_model() successfully completed......................................
2025-02-20 00:08:30,616:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:30,617:INFO:Creating metrics dataframe
2025-02-20 00:08:30,621:INFO:Initializing Dummy Classifier
2025-02-20 00:08:30,621:INFO:Total runtime is 0.23742036024729413 minutes
2025-02-20 00:08:30,630:INFO:SubProcess create_model() called ==================================
2025-02-20 00:08:30,630:INFO:Initializing create_model()
2025-02-20 00:08:30,630:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB643820>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:30,630:INFO:Checking exceptions
2025-02-20 00:08:30,630:INFO:Importing libraries
2025-02-20 00:08:30,630:INFO:Copying training dataset
2025-02-20 00:08:30,635:INFO:Defining folds
2025-02-20 00:08:30,635:INFO:Declaring metric variables
2025-02-20 00:08:30,643:INFO:Importing untrained model
2025-02-20 00:08:30,644:INFO:Dummy Classifier Imported successfully
2025-02-20 00:08:30,650:INFO:Starting cross validation
2025-02-20 00:08:30,650:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:08:30,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,802:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,804:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,813:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,838:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,838:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,838:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:30,851:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:30,866:INFO:Calculating mean and std
2025-02-20 00:08:30,867:INFO:Creating metrics dataframe
2025-02-20 00:08:30,867:INFO:Uploading results into container
2025-02-20 00:08:30,867:INFO:Uploading model into container now
2025-02-20 00:08:30,867:INFO:_master_model_container: 14
2025-02-20 00:08:30,867:INFO:_display_container: 2
2025-02-20 00:08:30,867:INFO:DummyClassifier(constant=None, random_state=1475, strategy='prior')
2025-02-20 00:08:30,867:INFO:create_model() successfully completed......................................
2025-02-20 00:08:30,969:INFO:SubProcess create_model() end ==================================
2025-02-20 00:08:30,969:INFO:Creating metrics dataframe
2025-02-20 00:08:30,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:08:30,986:INFO:Initializing create_model()
2025-02-20 00:08:30,986:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:08:30,986:INFO:Checking exceptions
2025-02-20 00:08:30,986:INFO:Importing libraries
2025-02-20 00:08:30,986:INFO:Copying training dataset
2025-02-20 00:08:30,986:INFO:Defining folds
2025-02-20 00:08:30,986:INFO:Declaring metric variables
2025-02-20 00:08:30,986:INFO:Importing untrained model
2025-02-20 00:08:30,986:INFO:Declaring custom model
2025-02-20 00:08:30,986:INFO:Naive Bayes Imported successfully
2025-02-20 00:08:30,986:INFO:Cross validation set to False
2025-02-20 00:08:30,986:INFO:Fitting Model
2025-02-20 00:08:31,035:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:08:31,035:INFO:create_model() successfully completed......................................
2025-02-20 00:08:31,168:INFO:_master_model_container: 14
2025-02-20 00:08:31,168:INFO:_display_container: 2
2025-02-20 00:08:31,168:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:08:31,168:INFO:compare_models() successfully completed......................................
2025-02-20 00:08:31,222:INFO:Initializing predict_model()
2025-02-20 00:08:31,222:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AAF26C1F0>)
2025-02-20 00:08:31,222:INFO:Checking exceptions
2025-02-20 00:08:31,222:INFO:Preloading libraries
2025-02-20 00:08:31,223:INFO:Set up data.
2025-02-20 00:08:31,223:INFO:Set up index.
2025-02-20 00:08:31,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 00:08:31,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:31,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:31,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:31,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:08:31,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:08:31,454:INFO:Initializing save_model()
2025-02-20 00:08:31,454:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:08:31,454:INFO:Adding model into prep_pipe
2025-02-20 00:08:31,473:INFO:LDA.pkl saved in current working directory
2025-02-20 00:08:31,491:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 00:08:31,491:INFO:save_model() successfully completed......................................
2025-02-20 00:11:27,740:INFO:Initializing load_model()
2025-02-20 00:11:27,740:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 00:11:36,264:INFO:Initializing predict_model()
2025-02-20 00:11:36,264:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AAEFD22F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB0C73490>)
2025-02-20 00:11:36,264:INFO:Checking exceptions
2025-02-20 00:11:36,264:INFO:Preloading libraries
2025-02-20 00:11:36,271:INFO:Set up data.
2025-02-20 00:11:36,278:INFO:Set up index.
2025-02-20 00:12:16,634:INFO:PyCaret ClassificationExperiment
2025-02-20 00:12:16,634:INFO:Logging name: clf-default-name
2025-02-20 00:12:16,634:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:12:16,634:INFO:version 3.3.2
2025-02-20 00:12:16,634:INFO:Initializing setup()
2025-02-20 00:12:16,634:INFO:self.USI: 8ae3
2025-02-20 00:12:16,634:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 00:12:16,634:INFO:Checking environment
2025-02-20 00:12:16,634:INFO:python_version: 3.10.14
2025-02-20 00:12:16,634:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:12:16,634:INFO:machine: AMD64
2025-02-20 00:12:16,634:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:12:16,644:INFO:Memory: svmem(total=16423702528, available=3404857344, percent=79.3, used=13018845184, free=3404857344)
2025-02-20 00:12:16,644:INFO:Physical Core: 8
2025-02-20 00:12:16,644:INFO:Logical Core: 16
2025-02-20 00:12:16,644:INFO:Checking libraries
2025-02-20 00:12:16,644:INFO:System:
2025-02-20 00:12:16,644:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:12:16,644:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:12:16,644:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:12:16,644:INFO:PyCaret required dependencies:
2025-02-20 00:12:16,644:INFO:                 pip: 25.0
2025-02-20 00:12:16,644:INFO:          setuptools: 75.8.0
2025-02-20 00:12:16,644:INFO:             pycaret: 3.3.2
2025-02-20 00:12:16,644:INFO:             IPython: 8.32.0
2025-02-20 00:12:16,644:INFO:          ipywidgets: 8.1.5
2025-02-20 00:12:16,644:INFO:                tqdm: 4.67.1
2025-02-20 00:12:16,644:INFO:               numpy: 1.26.4
2025-02-20 00:12:16,644:INFO:              pandas: 2.1.4
2025-02-20 00:12:16,644:INFO:              jinja2: 3.1.5
2025-02-20 00:12:16,644:INFO:               scipy: 1.11.4
2025-02-20 00:12:16,644:INFO:              joblib: 1.3.2
2025-02-20 00:12:16,644:INFO:             sklearn: 1.4.2
2025-02-20 00:12:16,644:INFO:                pyod: 2.0.3
2025-02-20 00:12:16,644:INFO:            imblearn: 0.13.0
2025-02-20 00:12:16,644:INFO:   category_encoders: 2.7.0
2025-02-20 00:12:16,644:INFO:            lightgbm: 4.6.0
2025-02-20 00:12:16,644:INFO:               numba: 0.61.0
2025-02-20 00:12:16,644:INFO:            requests: 2.32.3
2025-02-20 00:12:16,644:INFO:          matplotlib: 3.7.5
2025-02-20 00:12:16,644:INFO:          scikitplot: 0.3.7
2025-02-20 00:12:16,644:INFO:         yellowbrick: 1.5
2025-02-20 00:12:16,644:INFO:              plotly: 5.24.1
2025-02-20 00:12:16,644:INFO:    plotly-resampler: Not installed
2025-02-20 00:12:16,644:INFO:             kaleido: 0.2.1
2025-02-20 00:12:16,644:INFO:           schemdraw: 0.15
2025-02-20 00:12:16,644:INFO:         statsmodels: 0.14.4
2025-02-20 00:12:16,644:INFO:              sktime: 0.26.0
2025-02-20 00:12:16,644:INFO:               tbats: 1.1.3
2025-02-20 00:12:16,644:INFO:            pmdarima: 2.0.4
2025-02-20 00:12:16,644:INFO:              psutil: 7.0.0
2025-02-20 00:12:16,644:INFO:          markupsafe: 3.0.2
2025-02-20 00:12:16,644:INFO:             pickle5: Not installed
2025-02-20 00:12:16,644:INFO:         cloudpickle: 3.1.1
2025-02-20 00:12:16,644:INFO:         deprecation: 2.1.0
2025-02-20 00:12:16,644:INFO:              xxhash: 3.5.0
2025-02-20 00:12:16,644:INFO:           wurlitzer: Not installed
2025-02-20 00:12:16,644:INFO:PyCaret optional dependencies:
2025-02-20 00:12:16,644:INFO:                shap: Not installed
2025-02-20 00:12:16,644:INFO:           interpret: Not installed
2025-02-20 00:12:16,644:INFO:                umap: Not installed
2025-02-20 00:12:16,644:INFO:     ydata_profiling: Not installed
2025-02-20 00:12:16,644:INFO:  explainerdashboard: Not installed
2025-02-20 00:12:16,644:INFO:             autoviz: Not installed
2025-02-20 00:12:16,644:INFO:           fairlearn: Not installed
2025-02-20 00:12:16,644:INFO:          deepchecks: Not installed
2025-02-20 00:12:16,644:INFO:             xgboost: Not installed
2025-02-20 00:12:16,644:INFO:            catboost: Not installed
2025-02-20 00:12:16,644:INFO:              kmodes: Not installed
2025-02-20 00:12:16,644:INFO:             mlxtend: Not installed
2025-02-20 00:12:16,644:INFO:       statsforecast: Not installed
2025-02-20 00:12:16,644:INFO:        tune_sklearn: Not installed
2025-02-20 00:12:16,644:INFO:                 ray: Not installed
2025-02-20 00:12:16,644:INFO:            hyperopt: Not installed
2025-02-20 00:12:16,644:INFO:              optuna: Not installed
2025-02-20 00:12:16,644:INFO:               skopt: Not installed
2025-02-20 00:12:16,644:INFO:              mlflow: Not installed
2025-02-20 00:12:16,644:INFO:              gradio: Not installed
2025-02-20 00:12:16,644:INFO:             fastapi: Not installed
2025-02-20 00:12:16,644:INFO:             uvicorn: Not installed
2025-02-20 00:12:16,644:INFO:              m2cgen: Not installed
2025-02-20 00:12:16,644:INFO:           evidently: Not installed
2025-02-20 00:12:16,644:INFO:               fugue: Not installed
2025-02-20 00:12:16,644:INFO:           streamlit: Not installed
2025-02-20 00:12:16,644:INFO:             prophet: Not installed
2025-02-20 00:12:16,644:INFO:None
2025-02-20 00:12:16,644:INFO:Set up data.
2025-02-20 00:12:16,669:INFO:Set up folding strategy.
2025-02-20 00:12:16,669:INFO:Set up train/test split.
2025-02-20 00:12:16,687:INFO:Set up index.
2025-02-20 00:12:16,687:INFO:Assigning column types.
2025-02-20 00:12:16,687:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:12:16,764:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:12:16,764:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:12:16,796:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:16,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:16,845:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:12:16,845:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:12:16,875:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:16,879:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:16,879:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:12:16,953:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:12:16,990:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:16,991:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,039:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:12:17,067:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,067:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:12:17,120:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,120:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,202:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,202:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,204:INFO:Preparing preprocessing pipeline...
2025-02-20 00:12:17,206:INFO:Set up label encoding.
2025-02-20 00:12:17,206:INFO:Set up simple imputation.
2025-02-20 00:12:17,206:INFO:Set up encoding of categorical features.
2025-02-20 00:12:17,206:INFO:Set up column name cleaning.
2025-02-20 00:12:17,362:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:12:17,371:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:12:17,371:INFO:Creating final display dataframe.
2025-02-20 00:12:17,737:INFO:Setup _display_container:                     Description             Value
0                    Session id              3854
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              8ae3
2025-02-20 00:12:17,820:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,820:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,878:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,878:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:12:17,886:INFO:setup() successfully completed in 1.26s...............
2025-02-20 00:12:17,901:INFO:Initializing compare_models()
2025-02-20 00:12:17,901:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:12:17,901:INFO:Checking exceptions
2025-02-20 00:12:17,910:INFO:Preparing display monitor
2025-02-20 00:12:17,938:INFO:Initializing Logistic Regression
2025-02-20 00:12:17,938:INFO:Total runtime is 3.37680180867513e-05 minutes
2025-02-20 00:12:17,938:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:17,938:INFO:Initializing create_model()
2025-02-20 00:12:17,938:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:17,938:INFO:Checking exceptions
2025-02-20 00:12:17,938:INFO:Importing libraries
2025-02-20 00:12:17,938:INFO:Copying training dataset
2025-02-20 00:12:17,943:INFO:Defining folds
2025-02-20 00:12:17,943:INFO:Declaring metric variables
2025-02-20 00:12:17,943:INFO:Importing untrained model
2025-02-20 00:12:17,951:INFO:Logistic Regression Imported successfully
2025-02-20 00:12:17,957:INFO:Starting cross validation
2025-02-20 00:12:17,957:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:18,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,444:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,458:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,480:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,480:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,480:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,480:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:12:18,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,526:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,526:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:18,549:INFO:Calculating mean and std
2025-02-20 00:12:18,549:INFO:Creating metrics dataframe
2025-02-20 00:12:18,549:INFO:Uploading results into container
2025-02-20 00:12:18,549:INFO:Uploading model into container now
2025-02-20 00:12:18,549:INFO:_master_model_container: 1
2025-02-20 00:12:18,549:INFO:_display_container: 2
2025-02-20 00:12:18,549:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3854, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:12:18,549:INFO:create_model() successfully completed......................................
2025-02-20 00:12:18,740:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:18,740:INFO:Creating metrics dataframe
2025-02-20 00:12:18,740:INFO:Initializing K Neighbors Classifier
2025-02-20 00:12:18,749:INFO:Total runtime is 0.013560926914215088 minutes
2025-02-20 00:12:18,753:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:18,753:INFO:Initializing create_model()
2025-02-20 00:12:18,753:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:18,753:INFO:Checking exceptions
2025-02-20 00:12:18,754:INFO:Importing libraries
2025-02-20 00:12:18,754:INFO:Copying training dataset
2025-02-20 00:12:18,754:INFO:Defining folds
2025-02-20 00:12:18,754:INFO:Declaring metric variables
2025-02-20 00:12:18,754:INFO:Importing untrained model
2025-02-20 00:12:18,754:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:12:18,769:INFO:Starting cross validation
2025-02-20 00:12:18,771:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:19,058:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,058:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,067:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,079:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,079:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,088:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,110:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,127:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,127:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,127:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,159:INFO:Calculating mean and std
2025-02-20 00:12:19,159:INFO:Creating metrics dataframe
2025-02-20 00:12:19,159:INFO:Uploading results into container
2025-02-20 00:12:19,159:INFO:Uploading model into container now
2025-02-20 00:12:19,159:INFO:_master_model_container: 2
2025-02-20 00:12:19,159:INFO:_display_container: 2
2025-02-20 00:12:19,165:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:12:19,165:INFO:create_model() successfully completed......................................
2025-02-20 00:12:19,332:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:19,332:INFO:Creating metrics dataframe
2025-02-20 00:12:19,345:INFO:Initializing Naive Bayes
2025-02-20 00:12:19,345:INFO:Total runtime is 0.023483788967132567 minutes
2025-02-20 00:12:19,347:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:19,347:INFO:Initializing create_model()
2025-02-20 00:12:19,347:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:19,347:INFO:Checking exceptions
2025-02-20 00:12:19,347:INFO:Importing libraries
2025-02-20 00:12:19,347:INFO:Copying training dataset
2025-02-20 00:12:19,355:INFO:Defining folds
2025-02-20 00:12:19,355:INFO:Declaring metric variables
2025-02-20 00:12:19,356:INFO:Importing untrained model
2025-02-20 00:12:19,361:INFO:Naive Bayes Imported successfully
2025-02-20 00:12:19,367:INFO:Starting cross validation
2025-02-20 00:12:19,371:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:19,500:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,500:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,531:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,547:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,547:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,547:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,588:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:19,610:INFO:Calculating mean and std
2025-02-20 00:12:19,611:INFO:Creating metrics dataframe
2025-02-20 00:12:19,614:INFO:Uploading results into container
2025-02-20 00:12:19,614:INFO:Uploading model into container now
2025-02-20 00:12:19,614:INFO:_master_model_container: 3
2025-02-20 00:12:19,614:INFO:_display_container: 2
2025-02-20 00:12:19,614:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:12:19,614:INFO:create_model() successfully completed......................................
2025-02-20 00:12:19,890:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:19,890:INFO:Creating metrics dataframe
2025-02-20 00:12:19,907:INFO:Initializing Decision Tree Classifier
2025-02-20 00:12:19,907:INFO:Total runtime is 0.03286089897155761 minutes
2025-02-20 00:12:19,910:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:19,910:INFO:Initializing create_model()
2025-02-20 00:12:19,910:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:19,911:INFO:Checking exceptions
2025-02-20 00:12:19,911:INFO:Importing libraries
2025-02-20 00:12:19,911:INFO:Copying training dataset
2025-02-20 00:12:19,911:INFO:Defining folds
2025-02-20 00:12:19,911:INFO:Declaring metric variables
2025-02-20 00:12:19,922:INFO:Importing untrained model
2025-02-20 00:12:19,922:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:12:19,931:INFO:Starting cross validation
2025-02-20 00:12:19,935:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:20,076:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:20,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,170:INFO:Calculating mean and std
2025-02-20 00:12:20,170:INFO:Creating metrics dataframe
2025-02-20 00:12:20,173:INFO:Uploading results into container
2025-02-20 00:12:20,173:INFO:Uploading model into container now
2025-02-20 00:12:20,173:INFO:_master_model_container: 4
2025-02-20 00:12:20,173:INFO:_display_container: 2
2025-02-20 00:12:20,173:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=3854, splitter='best')
2025-02-20 00:12:20,173:INFO:create_model() successfully completed......................................
2025-02-20 00:12:20,342:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:20,342:INFO:Creating metrics dataframe
2025-02-20 00:12:20,346:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:12:20,346:INFO:Total runtime is 0.04016495545705159 minutes
2025-02-20 00:12:20,353:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:20,353:INFO:Initializing create_model()
2025-02-20 00:12:20,353:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:20,353:INFO:Checking exceptions
2025-02-20 00:12:20,353:INFO:Importing libraries
2025-02-20 00:12:20,356:INFO:Copying training dataset
2025-02-20 00:12:20,356:INFO:Defining folds
2025-02-20 00:12:20,356:INFO:Declaring metric variables
2025-02-20 00:12:20,365:INFO:Importing untrained model
2025-02-20 00:12:20,367:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:12:20,373:INFO:Starting cross validation
2025-02-20 00:12:20,377:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:20,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,549:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,596:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,613:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,613:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,613:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,625:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:20,691:INFO:Calculating mean and std
2025-02-20 00:12:20,691:INFO:Creating metrics dataframe
2025-02-20 00:12:20,691:INFO:Uploading results into container
2025-02-20 00:12:20,691:INFO:Uploading model into container now
2025-02-20 00:12:20,691:INFO:_master_model_container: 5
2025-02-20 00:12:20,691:INFO:_display_container: 2
2025-02-20 00:12:20,691:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3854, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:12:20,691:INFO:create_model() successfully completed......................................
2025-02-20 00:12:20,839:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:20,839:INFO:Creating metrics dataframe
2025-02-20 00:12:20,858:INFO:Initializing Ridge Classifier
2025-02-20 00:12:20,858:INFO:Total runtime is 0.04870105187098185 minutes
2025-02-20 00:12:20,860:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:20,860:INFO:Initializing create_model()
2025-02-20 00:12:20,860:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:20,860:INFO:Checking exceptions
2025-02-20 00:12:20,860:INFO:Importing libraries
2025-02-20 00:12:20,860:INFO:Copying training dataset
2025-02-20 00:12:20,863:INFO:Defining folds
2025-02-20 00:12:20,863:INFO:Declaring metric variables
2025-02-20 00:12:20,868:INFO:Importing untrained model
2025-02-20 00:12:20,874:INFO:Ridge Classifier Imported successfully
2025-02-20 00:12:20,879:INFO:Starting cross validation
2025-02-20 00:12:20,884:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:21,008:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,024:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,025:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,041:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,088:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,088:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,183:INFO:Calculating mean and std
2025-02-20 00:12:21,183:INFO:Creating metrics dataframe
2025-02-20 00:12:21,186:INFO:Uploading results into container
2025-02-20 00:12:21,186:INFO:Uploading model into container now
2025-02-20 00:12:21,186:INFO:_master_model_container: 6
2025-02-20 00:12:21,186:INFO:_display_container: 2
2025-02-20 00:12:21,186:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3854, solver='auto',
                tol=0.0001)
2025-02-20 00:12:21,186:INFO:create_model() successfully completed......................................
2025-02-20 00:12:21,358:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:21,358:INFO:Creating metrics dataframe
2025-02-20 00:12:21,358:INFO:Initializing Random Forest Classifier
2025-02-20 00:12:21,358:INFO:Total runtime is 0.057034842173258465 minutes
2025-02-20 00:12:21,358:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:21,373:INFO:Initializing create_model()
2025-02-20 00:12:21,373:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:21,373:INFO:Checking exceptions
2025-02-20 00:12:21,373:INFO:Importing libraries
2025-02-20 00:12:21,373:INFO:Copying training dataset
2025-02-20 00:12:21,375:INFO:Defining folds
2025-02-20 00:12:21,375:INFO:Declaring metric variables
2025-02-20 00:12:21,375:INFO:Importing untrained model
2025-02-20 00:12:21,388:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:12:21,395:INFO:Starting cross validation
2025-02-20 00:12:21,399:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:21,954:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,954:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,973:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,981:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,981:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,981:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,986:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,986:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,986:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:21,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:21,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,097:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,193:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,207:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,223:INFO:Calculating mean and std
2025-02-20 00:12:22,223:INFO:Creating metrics dataframe
2025-02-20 00:12:22,223:INFO:Uploading results into container
2025-02-20 00:12:22,223:INFO:Uploading model into container now
2025-02-20 00:12:22,223:INFO:_master_model_container: 7
2025-02-20 00:12:22,223:INFO:_display_container: 2
2025-02-20 00:12:22,223:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=3854, verbose=0,
                       warm_start=False)
2025-02-20 00:12:22,223:INFO:create_model() successfully completed......................................
2025-02-20 00:12:22,485:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:22,485:INFO:Creating metrics dataframe
2025-02-20 00:12:22,494:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:12:22,494:INFO:Total runtime is 0.07598126729329427 minutes
2025-02-20 00:12:22,500:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:22,500:INFO:Initializing create_model()
2025-02-20 00:12:22,500:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:22,500:INFO:Checking exceptions
2025-02-20 00:12:22,501:INFO:Importing libraries
2025-02-20 00:12:22,501:INFO:Copying training dataset
2025-02-20 00:12:22,508:INFO:Defining folds
2025-02-20 00:12:22,510:INFO:Declaring metric variables
2025-02-20 00:12:22,514:INFO:Importing untrained model
2025-02-20 00:12:22,520:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:12:22,529:INFO:Starting cross validation
2025-02-20 00:12:22,532:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:22,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,680:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,712:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,745:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,745:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,746:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:22,777:INFO:Calculating mean and std
2025-02-20 00:12:22,779:INFO:Creating metrics dataframe
2025-02-20 00:12:22,779:INFO:Uploading results into container
2025-02-20 00:12:22,782:INFO:Uploading model into container now
2025-02-20 00:12:22,782:INFO:_master_model_container: 8
2025-02-20 00:12:22,782:INFO:_display_container: 2
2025-02-20 00:12:22,782:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:12:22,782:INFO:create_model() successfully completed......................................
2025-02-20 00:12:22,947:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:22,947:INFO:Creating metrics dataframe
2025-02-20 00:12:22,964:INFO:Initializing Ada Boost Classifier
2025-02-20 00:12:22,966:INFO:Total runtime is 0.08383159637451172 minutes
2025-02-20 00:12:22,969:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:22,969:INFO:Initializing create_model()
2025-02-20 00:12:22,969:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:22,969:INFO:Checking exceptions
2025-02-20 00:12:22,969:INFO:Importing libraries
2025-02-20 00:12:22,969:INFO:Copying training dataset
2025-02-20 00:12:22,974:INFO:Defining folds
2025-02-20 00:12:22,974:INFO:Declaring metric variables
2025-02-20 00:12:22,978:INFO:Importing untrained model
2025-02-20 00:12:22,979:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:12:22,986:INFO:Starting cross validation
2025-02-20 00:12:22,989:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,098:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,149:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:23,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:23,212:INFO:Calculating mean and std
2025-02-20 00:12:23,213:INFO:Creating metrics dataframe
2025-02-20 00:12:23,213:INFO:Uploading results into container
2025-02-20 00:12:23,213:INFO:Uploading model into container now
2025-02-20 00:12:23,213:INFO:_master_model_container: 9
2025-02-20 00:12:23,213:INFO:_display_container: 2
2025-02-20 00:12:23,213:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3854)
2025-02-20 00:12:23,213:INFO:create_model() successfully completed......................................
2025-02-20 00:12:23,379:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:23,379:INFO:Creating metrics dataframe
2025-02-20 00:12:23,397:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:12:23,397:INFO:Total runtime is 0.09101595083872477 minutes
2025-02-20 00:12:23,403:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:23,403:INFO:Initializing create_model()
2025-02-20 00:12:23,403:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:23,403:INFO:Checking exceptions
2025-02-20 00:12:23,403:INFO:Importing libraries
2025-02-20 00:12:23,403:INFO:Copying training dataset
2025-02-20 00:12:23,405:INFO:Defining folds
2025-02-20 00:12:23,405:INFO:Declaring metric variables
2025-02-20 00:12:23,414:INFO:Importing untrained model
2025-02-20 00:12:23,414:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:12:23,424:INFO:Starting cross validation
2025-02-20 00:12:23,429:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:24,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,114:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,163:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,163:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,184:INFO:Calculating mean and std
2025-02-20 00:12:24,184:INFO:Creating metrics dataframe
2025-02-20 00:12:24,186:INFO:Uploading results into container
2025-02-20 00:12:24,186:INFO:Uploading model into container now
2025-02-20 00:12:24,188:INFO:_master_model_container: 10
2025-02-20 00:12:24,188:INFO:_display_container: 2
2025-02-20 00:12:24,189:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3854, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:12:24,189:INFO:create_model() successfully completed......................................
2025-02-20 00:12:24,365:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:24,365:INFO:Creating metrics dataframe
2025-02-20 00:12:24,374:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:12:24,374:INFO:Total runtime is 0.10730503797531127 minutes
2025-02-20 00:12:24,374:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:24,374:INFO:Initializing create_model()
2025-02-20 00:12:24,374:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:24,374:INFO:Checking exceptions
2025-02-20 00:12:24,379:INFO:Importing libraries
2025-02-20 00:12:24,379:INFO:Copying training dataset
2025-02-20 00:12:24,379:INFO:Defining folds
2025-02-20 00:12:24,379:INFO:Declaring metric variables
2025-02-20 00:12:24,379:INFO:Importing untrained model
2025-02-20 00:12:24,390:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:12:24,396:INFO:Starting cross validation
2025-02-20 00:12:24,402:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:24,547:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,579:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,582:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,598:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,598:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,598:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,598:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,598:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:24,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:24,642:INFO:Calculating mean and std
2025-02-20 00:12:24,643:INFO:Creating metrics dataframe
2025-02-20 00:12:24,643:INFO:Uploading results into container
2025-02-20 00:12:24,643:INFO:Uploading model into container now
2025-02-20 00:12:24,649:INFO:_master_model_container: 11
2025-02-20 00:12:24,649:INFO:_display_container: 2
2025-02-20 00:12:24,649:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:12:24,649:INFO:create_model() successfully completed......................................
2025-02-20 00:12:24,823:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:24,823:INFO:Creating metrics dataframe
2025-02-20 00:12:24,832:INFO:Initializing Extra Trees Classifier
2025-02-20 00:12:24,832:INFO:Total runtime is 0.11494722763697306 minutes
2025-02-20 00:12:24,838:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:24,838:INFO:Initializing create_model()
2025-02-20 00:12:24,838:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:24,838:INFO:Checking exceptions
2025-02-20 00:12:24,838:INFO:Importing libraries
2025-02-20 00:12:24,838:INFO:Copying training dataset
2025-02-20 00:12:24,842:INFO:Defining folds
2025-02-20 00:12:24,842:INFO:Declaring metric variables
2025-02-20 00:12:24,850:INFO:Importing untrained model
2025-02-20 00:12:24,852:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:12:24,858:INFO:Starting cross validation
2025-02-20 00:12:24,862:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:25,259:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,267:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,269:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,286:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,286:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,295:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,298:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:25,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:25,457:INFO:Calculating mean and std
2025-02-20 00:12:25,457:INFO:Creating metrics dataframe
2025-02-20 00:12:25,457:INFO:Uploading results into container
2025-02-20 00:12:25,457:INFO:Uploading model into container now
2025-02-20 00:12:25,457:INFO:_master_model_container: 12
2025-02-20 00:12:25,457:INFO:_display_container: 2
2025-02-20 00:12:25,457:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=3854, verbose=0,
                     warm_start=False)
2025-02-20 00:12:25,457:INFO:create_model() successfully completed......................................
2025-02-20 00:12:25,618:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:25,618:INFO:Creating metrics dataframe
2025-02-20 00:12:25,636:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:12:25,636:INFO:Total runtime is 0.12834061781565348 minutes
2025-02-20 00:12:25,645:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:25,645:INFO:Initializing create_model()
2025-02-20 00:12:25,645:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:25,645:INFO:Checking exceptions
2025-02-20 00:12:25,645:INFO:Importing libraries
2025-02-20 00:12:25,645:INFO:Copying training dataset
2025-02-20 00:12:25,650:INFO:Defining folds
2025-02-20 00:12:25,650:INFO:Declaring metric variables
2025-02-20 00:12:25,655:INFO:Importing untrained model
2025-02-20 00:12:25,658:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:12:25,666:INFO:Starting cross validation
2025-02-20 00:12:25,668:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:26,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,425:INFO:Calculating mean and std
2025-02-20 00:12:26,425:INFO:Creating metrics dataframe
2025-02-20 00:12:26,425:INFO:Uploading results into container
2025-02-20 00:12:26,425:INFO:Uploading model into container now
2025-02-20 00:12:26,425:INFO:_master_model_container: 13
2025-02-20 00:12:26,425:INFO:_display_container: 2
2025-02-20 00:12:26,425:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3854, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:12:26,425:INFO:create_model() successfully completed......................................
2025-02-20 00:12:26,594:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:26,594:INFO:Creating metrics dataframe
2025-02-20 00:12:26,610:INFO:Initializing Dummy Classifier
2025-02-20 00:12:26,612:INFO:Total runtime is 0.14459903240203859 minutes
2025-02-20 00:12:26,612:INFO:SubProcess create_model() called ==================================
2025-02-20 00:12:26,612:INFO:Initializing create_model()
2025-02-20 00:12:26,612:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AEB51A560>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:26,612:INFO:Checking exceptions
2025-02-20 00:12:26,612:INFO:Importing libraries
2025-02-20 00:12:26,612:INFO:Copying training dataset
2025-02-20 00:12:26,615:INFO:Defining folds
2025-02-20 00:12:26,615:INFO:Declaring metric variables
2025-02-20 00:12:26,627:INFO:Importing untrained model
2025-02-20 00:12:26,627:INFO:Dummy Classifier Imported successfully
2025-02-20 00:12:26,636:INFO:Starting cross validation
2025-02-20 00:12:26,640:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:12:26,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,768:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,768:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,799:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,799:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,831:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,836:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,836:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,862:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,862:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,862:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,862:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,888:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,888:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,888:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,888:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:26,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:26,933:INFO:Calculating mean and std
2025-02-20 00:12:26,934:INFO:Creating metrics dataframe
2025-02-20 00:12:26,934:INFO:Uploading results into container
2025-02-20 00:12:26,934:INFO:Uploading model into container now
2025-02-20 00:12:26,934:INFO:_master_model_container: 14
2025-02-20 00:12:26,934:INFO:_display_container: 2
2025-02-20 00:12:26,934:INFO:DummyClassifier(constant=None, random_state=3854, strategy='prior')
2025-02-20 00:12:26,934:INFO:create_model() successfully completed......................................
2025-02-20 00:12:27,087:INFO:SubProcess create_model() end ==================================
2025-02-20 00:12:27,087:INFO:Creating metrics dataframe
2025-02-20 00:12:27,103:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:12:27,111:INFO:Initializing create_model()
2025-02-20 00:12:27,111:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:12:27,111:INFO:Checking exceptions
2025-02-20 00:12:27,111:INFO:Importing libraries
2025-02-20 00:12:27,111:INFO:Copying training dataset
2025-02-20 00:12:27,118:INFO:Defining folds
2025-02-20 00:12:27,118:INFO:Declaring metric variables
2025-02-20 00:12:27,118:INFO:Importing untrained model
2025-02-20 00:12:27,118:INFO:Declaring custom model
2025-02-20 00:12:27,118:INFO:Naive Bayes Imported successfully
2025-02-20 00:12:27,118:INFO:Cross validation set to False
2025-02-20 00:12:27,118:INFO:Fitting Model
2025-02-20 00:12:27,206:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:12:27,206:INFO:create_model() successfully completed......................................
2025-02-20 00:12:27,442:INFO:_master_model_container: 14
2025-02-20 00:12:27,442:INFO:_display_container: 2
2025-02-20 00:12:27,442:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:12:27,442:INFO:compare_models() successfully completed......................................
2025-02-20 00:12:27,495:INFO:Initializing predict_model()
2025-02-20 00:12:27,495:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AAF197F40>)
2025-02-20 00:12:27,495:INFO:Checking exceptions
2025-02-20 00:12:27,495:INFO:Preloading libraries
2025-02-20 00:12:27,499:INFO:Set up data.
2025-02-20 00:12:27,507:INFO:Set up index.
2025-02-20 00:12:27,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 00:12:27,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:27,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:27,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:27,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:12:27,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:12:27,818:INFO:Initializing save_model()
2025-02-20 00:12:27,818:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:12:27,818:INFO:Adding model into prep_pipe
2025-02-20 00:12:27,828:INFO:LDA.pkl saved in current working directory
2025-02-20 00:12:27,837:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 00:12:27,837:INFO:save_model() successfully completed......................................
2025-02-20 00:12:28,171:INFO:Initializing load_model()
2025-02-20 00:12:28,172:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 00:12:28,203:INFO:Initializing predict_model()
2025-02-20 00:12:28,203:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB111BD90>)
2025-02-20 00:12:28,203:INFO:Checking exceptions
2025-02-20 00:12:28,203:INFO:Preloading libraries
2025-02-20 00:12:28,208:INFO:Set up data.
2025-02-20 00:12:28,213:INFO:Set up index.
2025-02-20 00:13:00,934:INFO:Initializing predict_model()
2025-02-20 00:13:00,935:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB25B6200>)
2025-02-20 00:13:00,936:INFO:Checking exceptions
2025-02-20 00:13:00,936:INFO:Preloading libraries
2025-02-20 00:13:00,939:INFO:Set up data.
2025-02-20 00:13:00,945:INFO:Set up index.
2025-02-20 00:13:06,672:INFO:Initializing predict_model()
2025-02-20 00:13:06,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB1772710>)
2025-02-20 00:13:06,672:INFO:Checking exceptions
2025-02-20 00:13:06,672:INFO:Preloading libraries
2025-02-20 00:13:06,677:INFO:Set up data.
2025-02-20 00:13:06,684:INFO:Set up index.
2025-02-20 00:26:38,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:26:38,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:26:38,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:26:38,654:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 00:26:57,016:INFO:PyCaret ClassificationExperiment
2025-02-20 00:26:57,016:INFO:Logging name: clf-default-name
2025-02-20 00:26:57,016:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:26:57,016:INFO:version 3.3.2
2025-02-20 00:26:57,016:INFO:Initializing setup()
2025-02-20 00:26:57,016:INFO:self.USI: 5f0d
2025-02-20 00:26:57,017:INFO:self._variable_keys: {'USI', '_available_plots', 'y_train', 'data', 'log_plots_param', 'gpu_n_jobs_param', 'fix_imbalance', 'fold_generator', '_ml_usecase', 'target_param', 'y_test', 'idx', 'html_param', 'X_train', 'exp_name_log', 'logging_param', 'seed', 'fold_shuffle_param', 'fold_groups_param', 'memory', 'y', 'is_multiclass', 'n_jobs_param', 'pipeline', 'gpu_param', 'exp_id', 'X', 'X_test'}
2025-02-20 00:26:57,017:INFO:Checking environment
2025-02-20 00:26:57,017:INFO:python_version: 3.10.14
2025-02-20 00:26:57,017:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:26:57,017:INFO:machine: AMD64
2025-02-20 00:26:57,017:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:26:57,026:INFO:Memory: svmem(total=16423702528, available=4174249984, percent=74.6, used=12249452544, free=4174249984)
2025-02-20 00:26:57,027:INFO:Physical Core: 8
2025-02-20 00:26:57,027:INFO:Logical Core: 16
2025-02-20 00:26:57,027:INFO:Checking libraries
2025-02-20 00:26:57,027:INFO:System:
2025-02-20 00:26:57,027:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:26:57,027:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:26:57,027:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:26:57,027:INFO:PyCaret required dependencies:
2025-02-20 00:26:57,055:INFO:                 pip: 25.0
2025-02-20 00:26:57,055:INFO:          setuptools: 75.8.0
2025-02-20 00:26:57,055:INFO:             pycaret: 3.3.2
2025-02-20 00:26:57,055:INFO:             IPython: 8.32.0
2025-02-20 00:26:57,055:INFO:          ipywidgets: 8.1.5
2025-02-20 00:26:57,055:INFO:                tqdm: 4.67.1
2025-02-20 00:26:57,055:INFO:               numpy: 1.26.4
2025-02-20 00:26:57,055:INFO:              pandas: 2.1.4
2025-02-20 00:26:57,055:INFO:              jinja2: 3.1.5
2025-02-20 00:26:57,055:INFO:               scipy: 1.11.4
2025-02-20 00:26:57,055:INFO:              joblib: 1.3.2
2025-02-20 00:26:57,055:INFO:             sklearn: 1.4.2
2025-02-20 00:26:57,055:INFO:                pyod: 2.0.3
2025-02-20 00:26:57,055:INFO:            imblearn: 0.13.0
2025-02-20 00:26:57,055:INFO:   category_encoders: 2.7.0
2025-02-20 00:26:57,055:INFO:            lightgbm: 4.6.0
2025-02-20 00:26:57,055:INFO:               numba: 0.61.0
2025-02-20 00:26:57,055:INFO:            requests: 2.32.3
2025-02-20 00:26:57,055:INFO:          matplotlib: 3.7.5
2025-02-20 00:26:57,055:INFO:          scikitplot: 0.3.7
2025-02-20 00:26:57,055:INFO:         yellowbrick: 1.5
2025-02-20 00:26:57,055:INFO:              plotly: 5.24.1
2025-02-20 00:26:57,055:INFO:    plotly-resampler: Not installed
2025-02-20 00:26:57,055:INFO:             kaleido: 0.2.1
2025-02-20 00:26:57,055:INFO:           schemdraw: 0.15
2025-02-20 00:26:57,055:INFO:         statsmodels: 0.14.4
2025-02-20 00:26:57,055:INFO:              sktime: 0.26.0
2025-02-20 00:26:57,055:INFO:               tbats: 1.1.3
2025-02-20 00:26:57,055:INFO:            pmdarima: 2.0.4
2025-02-20 00:26:57,055:INFO:              psutil: 7.0.0
2025-02-20 00:26:57,055:INFO:          markupsafe: 3.0.2
2025-02-20 00:26:57,055:INFO:             pickle5: Not installed
2025-02-20 00:26:57,055:INFO:         cloudpickle: 3.1.1
2025-02-20 00:26:57,055:INFO:         deprecation: 2.1.0
2025-02-20 00:26:57,055:INFO:              xxhash: 3.5.0
2025-02-20 00:26:57,055:INFO:           wurlitzer: Not installed
2025-02-20 00:26:57,055:INFO:PyCaret optional dependencies:
2025-02-20 00:26:57,070:INFO:                shap: Not installed
2025-02-20 00:26:57,070:INFO:           interpret: Not installed
2025-02-20 00:26:57,070:INFO:                umap: Not installed
2025-02-20 00:26:57,070:INFO:     ydata_profiling: Not installed
2025-02-20 00:26:57,070:INFO:  explainerdashboard: Not installed
2025-02-20 00:26:57,070:INFO:             autoviz: Not installed
2025-02-20 00:26:57,070:INFO:           fairlearn: Not installed
2025-02-20 00:26:57,070:INFO:          deepchecks: Not installed
2025-02-20 00:26:57,070:INFO:             xgboost: Not installed
2025-02-20 00:26:57,070:INFO:            catboost: Not installed
2025-02-20 00:26:57,070:INFO:              kmodes: Not installed
2025-02-20 00:26:57,070:INFO:             mlxtend: Not installed
2025-02-20 00:26:57,070:INFO:       statsforecast: Not installed
2025-02-20 00:26:57,070:INFO:        tune_sklearn: Not installed
2025-02-20 00:26:57,070:INFO:                 ray: Not installed
2025-02-20 00:26:57,070:INFO:            hyperopt: Not installed
2025-02-20 00:26:57,070:INFO:              optuna: Not installed
2025-02-20 00:26:57,070:INFO:               skopt: Not installed
2025-02-20 00:26:57,070:INFO:              mlflow: Not installed
2025-02-20 00:26:57,070:INFO:              gradio: Not installed
2025-02-20 00:26:57,070:INFO:             fastapi: Not installed
2025-02-20 00:26:57,070:INFO:             uvicorn: Not installed
2025-02-20 00:26:57,070:INFO:              m2cgen: Not installed
2025-02-20 00:26:57,070:INFO:           evidently: Not installed
2025-02-20 00:26:57,070:INFO:               fugue: Not installed
2025-02-20 00:26:57,070:INFO:           streamlit: Not installed
2025-02-20 00:26:57,070:INFO:             prophet: Not installed
2025-02-20 00:26:57,070:INFO:None
2025-02-20 00:26:57,070:INFO:Set up data.
2025-02-20 00:26:57,096:INFO:Set up folding strategy.
2025-02-20 00:26:57,097:INFO:Set up train/test split.
2025-02-20 00:26:57,119:INFO:Set up index.
2025-02-20 00:26:57,119:INFO:Assigning column types.
2025-02-20 00:26:57,124:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:26:57,169:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,169:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,208:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,208:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,258:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,259:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,287:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,287:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,287:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:26:57,335:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,359:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,359:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,402:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:26:57,419:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,419:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,419:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:26:57,503:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,503:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,592:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,592:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:57,592:INFO:Preparing preprocessing pipeline...
2025-02-20 00:26:57,592:INFO:Set up label encoding.
2025-02-20 00:26:57,592:INFO:Set up simple imputation.
2025-02-20 00:26:57,592:INFO:Set up encoding of categorical features.
2025-02-20 00:26:57,599:INFO:Set up feature normalization.
2025-02-20 00:26:57,599:INFO:Set up column name cleaning.
2025-02-20 00:26:57,771:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:26:57,787:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:26:57,787:INFO:Creating final display dataframe.
2025-02-20 00:26:58,257:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17                    Normalize              True
18             Normalize method            zscore
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              5f0d
2025-02-20 00:26:58,342:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:58,343:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:58,408:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:58,408:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:26:58,408:INFO:setup() successfully completed in 1.4s...............
2025-02-20 00:26:58,408:INFO:Initializing compare_models()
2025-02-20 00:26:58,408:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:26:58,408:INFO:Checking exceptions
2025-02-20 00:26:58,408:INFO:Preparing display monitor
2025-02-20 00:26:58,439:INFO:Initializing Logistic Regression
2025-02-20 00:26:58,439:INFO:Total runtime is 0.0 minutes
2025-02-20 00:26:58,453:INFO:SubProcess create_model() called ==================================
2025-02-20 00:26:58,453:INFO:Initializing create_model()
2025-02-20 00:26:58,454:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:26:58,454:INFO:Checking exceptions
2025-02-20 00:26:58,454:INFO:Importing libraries
2025-02-20 00:26:58,454:INFO:Copying training dataset
2025-02-20 00:26:58,461:INFO:Defining folds
2025-02-20 00:26:58,462:INFO:Declaring metric variables
2025-02-20 00:26:58,467:INFO:Importing untrained model
2025-02-20 00:26:58,473:INFO:Logistic Regression Imported successfully
2025-02-20 00:26:58,481:INFO:Starting cross validation
2025-02-20 00:26:58,484:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:01,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,778:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,779:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,781:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,781:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,840:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,844:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,844:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,844:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,844:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,844:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,898:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,898:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,914:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:01,914:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:01,930:INFO:Calculating mean and std
2025-02-20 00:27:01,930:INFO:Creating metrics dataframe
2025-02-20 00:27:01,930:INFO:Uploading results into container
2025-02-20 00:27:01,930:INFO:Uploading model into container now
2025-02-20 00:27:01,930:INFO:_master_model_container: 1
2025-02-20 00:27:01,937:INFO:_display_container: 2
2025-02-20 00:27:01,937:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:27:01,938:INFO:create_model() successfully completed......................................
2025-02-20 00:27:02,047:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:02,047:INFO:Creating metrics dataframe
2025-02-20 00:27:02,057:INFO:Initializing K Neighbors Classifier
2025-02-20 00:27:02,057:INFO:Total runtime is 0.06031079292297363 minutes
2025-02-20 00:27:02,062:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:02,062:INFO:Initializing create_model()
2025-02-20 00:27:02,062:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:02,062:INFO:Checking exceptions
2025-02-20 00:27:02,062:INFO:Importing libraries
2025-02-20 00:27:02,062:INFO:Copying training dataset
2025-02-20 00:27:02,066:INFO:Defining folds
2025-02-20 00:27:02,066:INFO:Declaring metric variables
2025-02-20 00:27:02,077:INFO:Importing untrained model
2025-02-20 00:27:02,084:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:27:02,094:INFO:Starting cross validation
2025-02-20 00:27:02,098:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:02,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:02,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,622:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,642:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,648:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,654:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,661:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,667:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,675:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,679:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,680:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,694:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,703:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:04,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:04,719:INFO:Calculating mean and std
2025-02-20 00:27:04,721:INFO:Creating metrics dataframe
2025-02-20 00:27:04,723:INFO:Uploading results into container
2025-02-20 00:27:04,724:INFO:Uploading model into container now
2025-02-20 00:27:04,724:INFO:_master_model_container: 2
2025-02-20 00:27:04,724:INFO:_display_container: 2
2025-02-20 00:27:04,725:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:27:04,726:INFO:create_model() successfully completed......................................
2025-02-20 00:27:04,837:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:04,837:INFO:Creating metrics dataframe
2025-02-20 00:27:04,837:INFO:Initializing Naive Bayes
2025-02-20 00:27:04,837:INFO:Total runtime is 0.10664393504460652 minutes
2025-02-20 00:27:04,849:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:04,850:INFO:Initializing create_model()
2025-02-20 00:27:04,850:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:04,851:INFO:Checking exceptions
2025-02-20 00:27:04,851:INFO:Importing libraries
2025-02-20 00:27:04,851:INFO:Copying training dataset
2025-02-20 00:27:04,857:INFO:Defining folds
2025-02-20 00:27:04,860:INFO:Declaring metric variables
2025-02-20 00:27:04,865:INFO:Importing untrained model
2025-02-20 00:27:04,871:INFO:Naive Bayes Imported successfully
2025-02-20 00:27:04,878:INFO:Starting cross validation
2025-02-20 00:27:04,881:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:05,052:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,059:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,069:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,070:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,072:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,089:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,095:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,097:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,097:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,148:INFO:Calculating mean and std
2025-02-20 00:27:05,151:INFO:Creating metrics dataframe
2025-02-20 00:27:05,152:INFO:Uploading results into container
2025-02-20 00:27:05,154:INFO:Uploading model into container now
2025-02-20 00:27:05,154:INFO:_master_model_container: 3
2025-02-20 00:27:05,154:INFO:_display_container: 2
2025-02-20 00:27:05,154:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:27:05,154:INFO:create_model() successfully completed......................................
2025-02-20 00:27:05,302:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:05,302:INFO:Creating metrics dataframe
2025-02-20 00:27:05,318:INFO:Initializing Decision Tree Classifier
2025-02-20 00:27:05,318:INFO:Total runtime is 0.11464918851852417 minutes
2025-02-20 00:27:05,323:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:05,323:INFO:Initializing create_model()
2025-02-20 00:27:05,323:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:05,323:INFO:Checking exceptions
2025-02-20 00:27:05,323:INFO:Importing libraries
2025-02-20 00:27:05,323:INFO:Copying training dataset
2025-02-20 00:27:05,334:INFO:Defining folds
2025-02-20 00:27:05,334:INFO:Declaring metric variables
2025-02-20 00:27:05,342:INFO:Importing untrained model
2025-02-20 00:27:05,347:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:27:05,357:INFO:Starting cross validation
2025-02-20 00:27:05,359:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:05,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,551:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,567:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,586:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,620:INFO:Calculating mean and std
2025-02-20 00:27:05,620:INFO:Creating metrics dataframe
2025-02-20 00:27:05,620:INFO:Uploading results into container
2025-02-20 00:27:05,620:INFO:Uploading model into container now
2025-02-20 00:27:05,620:INFO:_master_model_container: 4
2025-02-20 00:27:05,620:INFO:_display_container: 2
2025-02-20 00:27:05,626:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 00:27:05,627:INFO:create_model() successfully completed......................................
2025-02-20 00:27:05,758:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:05,758:INFO:Creating metrics dataframe
2025-02-20 00:27:05,764:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:27:05,764:INFO:Total runtime is 0.12209036350250244 minutes
2025-02-20 00:27:05,768:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:05,768:INFO:Initializing create_model()
2025-02-20 00:27:05,768:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:05,768:INFO:Checking exceptions
2025-02-20 00:27:05,768:INFO:Importing libraries
2025-02-20 00:27:05,768:INFO:Copying training dataset
2025-02-20 00:27:05,770:INFO:Defining folds
2025-02-20 00:27:05,770:INFO:Declaring metric variables
2025-02-20 00:27:05,785:INFO:Importing untrained model
2025-02-20 00:27:05,793:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:27:05,805:INFO:Starting cross validation
2025-02-20 00:27:05,808:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:05,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,988:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:05,990:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,006:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,022:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,022:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,022:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,022:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,022:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,036:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,037:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,040:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,040:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,041:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,041:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,041:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,061:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,065:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,068:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,086:INFO:Calculating mean and std
2025-02-20 00:27:06,086:INFO:Creating metrics dataframe
2025-02-20 00:27:06,089:INFO:Uploading results into container
2025-02-20 00:27:06,090:INFO:Uploading model into container now
2025-02-20 00:27:06,090:INFO:_master_model_container: 5
2025-02-20 00:27:06,090:INFO:_display_container: 2
2025-02-20 00:27:06,091:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:27:06,091:INFO:create_model() successfully completed......................................
2025-02-20 00:27:06,200:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:06,200:INFO:Creating metrics dataframe
2025-02-20 00:27:06,210:INFO:Initializing Ridge Classifier
2025-02-20 00:27:06,210:INFO:Total runtime is 0.12952594757080077 minutes
2025-02-20 00:27:06,210:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:06,214:INFO:Initializing create_model()
2025-02-20 00:27:06,214:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:06,215:INFO:Checking exceptions
2025-02-20 00:27:06,215:INFO:Importing libraries
2025-02-20 00:27:06,215:INFO:Copying training dataset
2025-02-20 00:27:06,222:INFO:Defining folds
2025-02-20 00:27:06,222:INFO:Declaring metric variables
2025-02-20 00:27:06,223:INFO:Importing untrained model
2025-02-20 00:27:06,232:INFO:Ridge Classifier Imported successfully
2025-02-20 00:27:06,243:INFO:Starting cross validation
2025-02-20 00:27:06,246:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:06,419:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,423:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,432:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,436:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:06,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:06,522:INFO:Calculating mean and std
2025-02-20 00:27:06,522:INFO:Creating metrics dataframe
2025-02-20 00:27:06,525:INFO:Uploading results into container
2025-02-20 00:27:06,527:INFO:Uploading model into container now
2025-02-20 00:27:06,527:INFO:_master_model_container: 6
2025-02-20 00:27:06,527:INFO:_display_container: 2
2025-02-20 00:27:06,527:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:27:06,527:INFO:create_model() successfully completed......................................
2025-02-20 00:27:06,636:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:06,636:INFO:Creating metrics dataframe
2025-02-20 00:27:06,636:INFO:Initializing Random Forest Classifier
2025-02-20 00:27:06,636:INFO:Total runtime is 0.136626931031545 minutes
2025-02-20 00:27:06,649:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:06,653:INFO:Initializing create_model()
2025-02-20 00:27:06,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:06,653:INFO:Checking exceptions
2025-02-20 00:27:06,653:INFO:Importing libraries
2025-02-20 00:27:06,653:INFO:Copying training dataset
2025-02-20 00:27:06,657:INFO:Defining folds
2025-02-20 00:27:06,657:INFO:Declaring metric variables
2025-02-20 00:27:06,663:INFO:Importing untrained model
2025-02-20 00:27:06,670:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:27:06,679:INFO:Starting cross validation
2025-02-20 00:27:06,682:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:07,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,303:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,305:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,508:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,524:INFO:Calculating mean and std
2025-02-20 00:27:07,524:INFO:Creating metrics dataframe
2025-02-20 00:27:07,524:INFO:Uploading results into container
2025-02-20 00:27:07,524:INFO:Uploading model into container now
2025-02-20 00:27:07,530:INFO:_master_model_container: 7
2025-02-20 00:27:07,530:INFO:_display_container: 2
2025-02-20 00:27:07,530:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 00:27:07,530:INFO:create_model() successfully completed......................................
2025-02-20 00:27:07,657:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:07,657:INFO:Creating metrics dataframe
2025-02-20 00:27:07,661:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:27:07,661:INFO:Total runtime is 0.15370948314666746 minutes
2025-02-20 00:27:07,670:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:07,671:INFO:Initializing create_model()
2025-02-20 00:27:07,671:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:07,671:INFO:Checking exceptions
2025-02-20 00:27:07,672:INFO:Importing libraries
2025-02-20 00:27:07,672:INFO:Copying training dataset
2025-02-20 00:27:07,679:INFO:Defining folds
2025-02-20 00:27:07,679:INFO:Declaring metric variables
2025-02-20 00:27:07,683:INFO:Importing untrained model
2025-02-20 00:27:07,693:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:27:07,703:INFO:Starting cross validation
2025-02-20 00:27:07,706:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:07,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,907:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,908:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,912:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,923:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,923:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,923:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,926:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:07,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:07,951:INFO:Calculating mean and std
2025-02-20 00:27:07,953:INFO:Creating metrics dataframe
2025-02-20 00:27:07,956:INFO:Uploading results into container
2025-02-20 00:27:07,957:INFO:Uploading model into container now
2025-02-20 00:27:07,957:INFO:_master_model_container: 8
2025-02-20 00:27:07,957:INFO:_display_container: 2
2025-02-20 00:27:07,958:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:27:07,958:INFO:create_model() successfully completed......................................
2025-02-20 00:27:08,074:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:08,075:INFO:Creating metrics dataframe
2025-02-20 00:27:08,076:INFO:Initializing Ada Boost Classifier
2025-02-20 00:27:08,076:INFO:Total runtime is 0.16062280337015786 minutes
2025-02-20 00:27:08,091:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:08,091:INFO:Initializing create_model()
2025-02-20 00:27:08,091:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:08,091:INFO:Checking exceptions
2025-02-20 00:27:08,091:INFO:Importing libraries
2025-02-20 00:27:08,091:INFO:Copying training dataset
2025-02-20 00:27:08,091:INFO:Defining folds
2025-02-20 00:27:08,091:INFO:Declaring metric variables
2025-02-20 00:27:08,106:INFO:Importing untrained model
2025-02-20 00:27:08,112:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:27:08,122:INFO:Starting cross validation
2025-02-20 00:27:08,126:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:08,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,256:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,256:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,256:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,256:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,294:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,325:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,341:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:08,390:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:08,405:INFO:Calculating mean and std
2025-02-20 00:27:08,406:INFO:Creating metrics dataframe
2025-02-20 00:27:08,409:INFO:Uploading results into container
2025-02-20 00:27:08,410:INFO:Uploading model into container now
2025-02-20 00:27:08,411:INFO:_master_model_container: 9
2025-02-20 00:27:08,411:INFO:_display_container: 2
2025-02-20 00:27:08,412:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 00:27:08,412:INFO:create_model() successfully completed......................................
2025-02-20 00:27:08,524:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:08,524:INFO:Creating metrics dataframe
2025-02-20 00:27:08,525:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:27:08,525:INFO:Total runtime is 0.1681099454561869 minutes
2025-02-20 00:27:08,525:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:08,525:INFO:Initializing create_model()
2025-02-20 00:27:08,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:08,525:INFO:Checking exceptions
2025-02-20 00:27:08,525:INFO:Importing libraries
2025-02-20 00:27:08,525:INFO:Copying training dataset
2025-02-20 00:27:08,540:INFO:Defining folds
2025-02-20 00:27:08,540:INFO:Declaring metric variables
2025-02-20 00:27:08,550:INFO:Importing untrained model
2025-02-20 00:27:08,550:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:27:08,564:INFO:Starting cross validation
2025-02-20 00:27:08,567:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:09,175:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,244:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,260:INFO:Calculating mean and std
2025-02-20 00:27:09,260:INFO:Creating metrics dataframe
2025-02-20 00:27:09,263:INFO:Uploading results into container
2025-02-20 00:27:09,264:INFO:Uploading model into container now
2025-02-20 00:27:09,264:INFO:_master_model_container: 10
2025-02-20 00:27:09,264:INFO:_display_container: 2
2025-02-20 00:27:09,265:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:27:09,265:INFO:create_model() successfully completed......................................
2025-02-20 00:27:09,376:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:09,376:INFO:Creating metrics dataframe
2025-02-20 00:27:09,376:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:27:09,391:INFO:Total runtime is 0.18254172801971433 minutes
2025-02-20 00:27:09,394:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:09,394:INFO:Initializing create_model()
2025-02-20 00:27:09,394:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:09,396:INFO:Checking exceptions
2025-02-20 00:27:09,396:INFO:Importing libraries
2025-02-20 00:27:09,396:INFO:Copying training dataset
2025-02-20 00:27:09,398:INFO:Defining folds
2025-02-20 00:27:09,398:INFO:Declaring metric variables
2025-02-20 00:27:09,406:INFO:Importing untrained model
2025-02-20 00:27:09,414:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:27:09,418:INFO:Starting cross validation
2025-02-20 00:27:09,422:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:09,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:09,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:09,640:INFO:Calculating mean and std
2025-02-20 00:27:09,642:INFO:Creating metrics dataframe
2025-02-20 00:27:09,643:INFO:Uploading results into container
2025-02-20 00:27:09,644:INFO:Uploading model into container now
2025-02-20 00:27:09,644:INFO:_master_model_container: 11
2025-02-20 00:27:09,644:INFO:_display_container: 2
2025-02-20 00:27:09,644:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:27:09,646:INFO:create_model() successfully completed......................................
2025-02-20 00:27:09,741:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:09,741:INFO:Creating metrics dataframe
2025-02-20 00:27:09,765:INFO:Initializing Extra Trees Classifier
2025-02-20 00:27:09,765:INFO:Total runtime is 0.18877757787704466 minutes
2025-02-20 00:27:09,768:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:09,773:INFO:Initializing create_model()
2025-02-20 00:27:09,773:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:09,773:INFO:Checking exceptions
2025-02-20 00:27:09,773:INFO:Importing libraries
2025-02-20 00:27:09,773:INFO:Copying training dataset
2025-02-20 00:27:09,783:INFO:Defining folds
2025-02-20 00:27:09,783:INFO:Declaring metric variables
2025-02-20 00:27:09,789:INFO:Importing untrained model
2025-02-20 00:27:09,797:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:27:09,806:INFO:Starting cross validation
2025-02-20 00:27:09,810:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:10,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,242:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,256:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,293:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,295:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,353:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,357:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,357:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,367:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:10,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:10,417:INFO:Calculating mean and std
2025-02-20 00:27:10,418:INFO:Creating metrics dataframe
2025-02-20 00:27:10,419:INFO:Uploading results into container
2025-02-20 00:27:10,419:INFO:Uploading model into container now
2025-02-20 00:27:10,419:INFO:_master_model_container: 12
2025-02-20 00:27:10,419:INFO:_display_container: 2
2025-02-20 00:27:10,423:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 00:27:10,423:INFO:create_model() successfully completed......................................
2025-02-20 00:27:10,530:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:10,530:INFO:Creating metrics dataframe
2025-02-20 00:27:10,554:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:27:10,554:INFO:Total runtime is 0.20191518465677896 minutes
2025-02-20 00:27:10,558:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:10,559:INFO:Initializing create_model()
2025-02-20 00:27:10,559:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:10,559:INFO:Checking exceptions
2025-02-20 00:27:10,559:INFO:Importing libraries
2025-02-20 00:27:10,559:INFO:Copying training dataset
2025-02-20 00:27:10,567:INFO:Defining folds
2025-02-20 00:27:10,567:INFO:Declaring metric variables
2025-02-20 00:27:10,571:INFO:Importing untrained model
2025-02-20 00:27:10,575:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:27:10,585:INFO:Starting cross validation
2025-02-20 00:27:10,587:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:11,169:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,186:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,189:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,189:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,193:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,195:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,201:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,203:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,208:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,209:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,278:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,295:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,307:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,310:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,329:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,329:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,329:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,329:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,394:INFO:Calculating mean and std
2025-02-20 00:27:11,396:INFO:Creating metrics dataframe
2025-02-20 00:27:11,399:INFO:Uploading results into container
2025-02-20 00:27:11,400:INFO:Uploading model into container now
2025-02-20 00:27:11,400:INFO:_master_model_container: 13
2025-02-20 00:27:11,400:INFO:_display_container: 2
2025-02-20 00:27:11,401:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:27:11,401:INFO:create_model() successfully completed......................................
2025-02-20 00:27:11,530:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:11,530:INFO:Creating metrics dataframe
2025-02-20 00:27:11,536:INFO:Initializing Dummy Classifier
2025-02-20 00:27:11,536:INFO:Total runtime is 0.21828809976577757 minutes
2025-02-20 00:27:11,549:INFO:SubProcess create_model() called ==================================
2025-02-20 00:27:11,550:INFO:Initializing create_model()
2025-02-20 00:27:11,550:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF107D90>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:11,550:INFO:Checking exceptions
2025-02-20 00:27:11,550:INFO:Importing libraries
2025-02-20 00:27:11,550:INFO:Copying training dataset
2025-02-20 00:27:11,557:INFO:Defining folds
2025-02-20 00:27:11,557:INFO:Declaring metric variables
2025-02-20 00:27:11,561:INFO:Importing untrained model
2025-02-20 00:27:11,567:INFO:Dummy Classifier Imported successfully
2025-02-20 00:27:11,576:INFO:Starting cross validation
2025-02-20 00:27:11,580:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:27:11,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:27:11,832:INFO:Calculating mean and std
2025-02-20 00:27:11,832:INFO:Creating metrics dataframe
2025-02-20 00:27:11,835:INFO:Uploading results into container
2025-02-20 00:27:11,835:INFO:Uploading model into container now
2025-02-20 00:27:11,835:INFO:_master_model_container: 14
2025-02-20 00:27:11,835:INFO:_display_container: 2
2025-02-20 00:27:11,835:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 00:27:11,835:INFO:create_model() successfully completed......................................
2025-02-20 00:27:11,947:INFO:SubProcess create_model() end ==================================
2025-02-20 00:27:11,948:INFO:Creating metrics dataframe
2025-02-20 00:27:11,966:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:27:11,976:INFO:Initializing create_model()
2025-02-20 00:27:11,976:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFFFD1B5E0>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:27:11,976:INFO:Checking exceptions
2025-02-20 00:27:11,978:INFO:Importing libraries
2025-02-20 00:27:11,978:INFO:Copying training dataset
2025-02-20 00:27:11,987:INFO:Defining folds
2025-02-20 00:27:11,987:INFO:Declaring metric variables
2025-02-20 00:27:11,987:INFO:Importing untrained model
2025-02-20 00:27:11,987:INFO:Declaring custom model
2025-02-20 00:27:11,989:INFO:Ridge Classifier Imported successfully
2025-02-20 00:27:11,991:INFO:Cross validation set to False
2025-02-20 00:27:11,991:INFO:Fitting Model
2025-02-20 00:27:12,050:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:27:12,050:INFO:create_model() successfully completed......................................
2025-02-20 00:27:12,224:INFO:_master_model_container: 14
2025-02-20 00:27:12,224:INFO:_display_container: 2
2025-02-20 00:27:12,225:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:27:12,225:INFO:compare_models() successfully completed......................................
2025-02-20 00:27:12,242:INFO:Initializing save_model()
2025-02-20 00:27:12,242:INFO:save_model(model=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:27:12,242:INFO:Adding model into prep_pipe
2025-02-20 00:27:12,260:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 00:27:12,273:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=123,
                                 solver='auto', tol=0.0001))],
         verbose=False)
2025-02-20 00:27:12,273:INFO:save_model() successfully completed......................................
2025-02-20 00:28:06,347:INFO:PyCaret ClassificationExperiment
2025-02-20 00:28:06,350:INFO:Logging name: clf-default-name
2025-02-20 00:28:06,350:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:28:06,350:INFO:version 3.3.2
2025-02-20 00:28:06,350:INFO:Initializing setup()
2025-02-20 00:28:06,350:INFO:self.USI: 80c0
2025-02-20 00:28:06,352:INFO:self._variable_keys: {'USI', '_available_plots', 'y_train', 'data', 'log_plots_param', 'gpu_n_jobs_param', 'fix_imbalance', 'fold_generator', '_ml_usecase', 'target_param', 'y_test', 'idx', 'html_param', 'X_train', 'exp_name_log', 'logging_param', 'seed', 'fold_shuffle_param', 'fold_groups_param', 'memory', 'y', 'is_multiclass', 'n_jobs_param', 'pipeline', 'gpu_param', 'exp_id', 'X', 'X_test'}
2025-02-20 00:28:06,352:INFO:Checking environment
2025-02-20 00:28:06,352:INFO:python_version: 3.10.14
2025-02-20 00:28:06,352:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:28:06,352:INFO:machine: AMD64
2025-02-20 00:28:06,352:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:28:06,361:INFO:Memory: svmem(total=16423702528, available=2212372480, percent=86.5, used=14211330048, free=2212372480)
2025-02-20 00:28:06,361:INFO:Physical Core: 8
2025-02-20 00:28:06,361:INFO:Logical Core: 16
2025-02-20 00:28:06,361:INFO:Checking libraries
2025-02-20 00:28:06,361:INFO:System:
2025-02-20 00:28:06,362:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:28:06,362:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:28:06,362:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:28:06,362:INFO:PyCaret required dependencies:
2025-02-20 00:28:06,362:INFO:                 pip: 25.0
2025-02-20 00:28:06,362:INFO:          setuptools: 75.8.0
2025-02-20 00:28:06,362:INFO:             pycaret: 3.3.2
2025-02-20 00:28:06,362:INFO:             IPython: 8.32.0
2025-02-20 00:28:06,362:INFO:          ipywidgets: 8.1.5
2025-02-20 00:28:06,362:INFO:                tqdm: 4.67.1
2025-02-20 00:28:06,362:INFO:               numpy: 1.26.4
2025-02-20 00:28:06,362:INFO:              pandas: 2.1.4
2025-02-20 00:28:06,362:INFO:              jinja2: 3.1.5
2025-02-20 00:28:06,362:INFO:               scipy: 1.11.4
2025-02-20 00:28:06,362:INFO:              joblib: 1.3.2
2025-02-20 00:28:06,362:INFO:             sklearn: 1.4.2
2025-02-20 00:28:06,362:INFO:                pyod: 2.0.3
2025-02-20 00:28:06,362:INFO:            imblearn: 0.13.0
2025-02-20 00:28:06,362:INFO:   category_encoders: 2.7.0
2025-02-20 00:28:06,362:INFO:            lightgbm: 4.6.0
2025-02-20 00:28:06,362:INFO:               numba: 0.61.0
2025-02-20 00:28:06,362:INFO:            requests: 2.32.3
2025-02-20 00:28:06,362:INFO:          matplotlib: 3.7.5
2025-02-20 00:28:06,362:INFO:          scikitplot: 0.3.7
2025-02-20 00:28:06,362:INFO:         yellowbrick: 1.5
2025-02-20 00:28:06,362:INFO:              plotly: 5.24.1
2025-02-20 00:28:06,362:INFO:    plotly-resampler: Not installed
2025-02-20 00:28:06,362:INFO:             kaleido: 0.2.1
2025-02-20 00:28:06,362:INFO:           schemdraw: 0.15
2025-02-20 00:28:06,362:INFO:         statsmodels: 0.14.4
2025-02-20 00:28:06,362:INFO:              sktime: 0.26.0
2025-02-20 00:28:06,362:INFO:               tbats: 1.1.3
2025-02-20 00:28:06,362:INFO:            pmdarima: 2.0.4
2025-02-20 00:28:06,362:INFO:              psutil: 7.0.0
2025-02-20 00:28:06,362:INFO:          markupsafe: 3.0.2
2025-02-20 00:28:06,362:INFO:             pickle5: Not installed
2025-02-20 00:28:06,362:INFO:         cloudpickle: 3.1.1
2025-02-20 00:28:06,362:INFO:         deprecation: 2.1.0
2025-02-20 00:28:06,362:INFO:              xxhash: 3.5.0
2025-02-20 00:28:06,362:INFO:           wurlitzer: Not installed
2025-02-20 00:28:06,362:INFO:PyCaret optional dependencies:
2025-02-20 00:28:06,362:INFO:                shap: Not installed
2025-02-20 00:28:06,364:INFO:           interpret: Not installed
2025-02-20 00:28:06,364:INFO:                umap: Not installed
2025-02-20 00:28:06,364:INFO:     ydata_profiling: Not installed
2025-02-20 00:28:06,364:INFO:  explainerdashboard: Not installed
2025-02-20 00:28:06,364:INFO:             autoviz: Not installed
2025-02-20 00:28:06,364:INFO:           fairlearn: Not installed
2025-02-20 00:28:06,364:INFO:          deepchecks: Not installed
2025-02-20 00:28:06,364:INFO:             xgboost: Not installed
2025-02-20 00:28:06,364:INFO:            catboost: Not installed
2025-02-20 00:28:06,364:INFO:              kmodes: Not installed
2025-02-20 00:28:06,364:INFO:             mlxtend: Not installed
2025-02-20 00:28:06,364:INFO:       statsforecast: Not installed
2025-02-20 00:28:06,364:INFO:        tune_sklearn: Not installed
2025-02-20 00:28:06,364:INFO:                 ray: Not installed
2025-02-20 00:28:06,364:INFO:            hyperopt: Not installed
2025-02-20 00:28:06,364:INFO:              optuna: Not installed
2025-02-20 00:28:06,364:INFO:               skopt: Not installed
2025-02-20 00:28:06,364:INFO:              mlflow: Not installed
2025-02-20 00:28:06,364:INFO:              gradio: Not installed
2025-02-20 00:28:06,364:INFO:             fastapi: Not installed
2025-02-20 00:28:06,364:INFO:             uvicorn: Not installed
2025-02-20 00:28:06,364:INFO:              m2cgen: Not installed
2025-02-20 00:28:06,364:INFO:           evidently: Not installed
2025-02-20 00:28:06,364:INFO:               fugue: Not installed
2025-02-20 00:28:06,364:INFO:           streamlit: Not installed
2025-02-20 00:28:06,364:INFO:             prophet: Not installed
2025-02-20 00:28:06,364:INFO:None
2025-02-20 00:28:06,364:INFO:Set up data.
2025-02-20 00:28:06,374:INFO:Set up folding strategy.
2025-02-20 00:28:06,374:INFO:Set up train/test split.
2025-02-20 00:28:06,390:INFO:Set up index.
2025-02-20 00:28:06,390:INFO:Assigning column types.
2025-02-20 00:28:06,394:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:28:06,424:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,424:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,453:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,453:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,488:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,488:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,504:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,504:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,504:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:28:06,554:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,603:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,604:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,653:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:28:06,673:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,684:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:28:06,741:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,741:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,822:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,822:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:06,822:INFO:Preparing preprocessing pipeline...
2025-02-20 00:28:06,822:INFO:Set up label encoding.
2025-02-20 00:28:06,822:INFO:Set up simple imputation.
2025-02-20 00:28:06,822:INFO:Set up encoding of categorical features.
2025-02-20 00:28:06,822:INFO:Set up feature normalization.
2025-02-20 00:28:06,822:INFO:Set up column name cleaning.
2025-02-20 00:28:06,987:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:28:06,995:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:28:06,995:INFO:Creating final display dataframe.
2025-02-20 00:28:07,271:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17                    Normalize              True
18             Normalize method            zscore
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              80c0
2025-02-20 00:28:07,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:07,353:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:07,428:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:07,428:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:28:07,428:INFO:setup() successfully completed in 1.08s...............
2025-02-20 00:28:07,428:INFO:Initializing compare_models()
2025-02-20 00:28:07,428:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:28:07,428:INFO:Checking exceptions
2025-02-20 00:28:07,438:INFO:Preparing display monitor
2025-02-20 00:28:07,466:INFO:Initializing Logistic Regression
2025-02-20 00:28:07,466:INFO:Total runtime is 0.0 minutes
2025-02-20 00:28:07,471:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:07,471:INFO:Initializing create_model()
2025-02-20 00:28:07,471:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:07,473:INFO:Checking exceptions
2025-02-20 00:28:07,473:INFO:Importing libraries
2025-02-20 00:28:07,473:INFO:Copying training dataset
2025-02-20 00:28:07,479:INFO:Defining folds
2025-02-20 00:28:07,479:INFO:Declaring metric variables
2025-02-20 00:28:07,483:INFO:Importing untrained model
2025-02-20 00:28:07,487:INFO:Logistic Regression Imported successfully
2025-02-20 00:28:07,497:INFO:Starting cross validation
2025-02-20 00:28:07,501:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:07,703:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,708:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,711:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,711:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,711:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,711:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,711:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,721:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,721:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,735:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,753:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:07,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:07,787:INFO:Calculating mean and std
2025-02-20 00:28:07,787:INFO:Creating metrics dataframe
2025-02-20 00:28:07,789:INFO:Uploading results into container
2025-02-20 00:28:07,789:INFO:Uploading model into container now
2025-02-20 00:28:07,789:INFO:_master_model_container: 1
2025-02-20 00:28:07,789:INFO:_display_container: 2
2025-02-20 00:28:07,789:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:28:07,789:INFO:create_model() successfully completed......................................
2025-02-20 00:28:07,923:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:07,923:INFO:Creating metrics dataframe
2025-02-20 00:28:07,940:INFO:Initializing K Neighbors Classifier
2025-02-20 00:28:07,941:INFO:Total runtime is 0.007914296785990397 minutes
2025-02-20 00:28:07,946:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:07,946:INFO:Initializing create_model()
2025-02-20 00:28:07,946:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:07,946:INFO:Checking exceptions
2025-02-20 00:28:07,946:INFO:Importing libraries
2025-02-20 00:28:07,946:INFO:Copying training dataset
2025-02-20 00:28:07,954:INFO:Defining folds
2025-02-20 00:28:07,954:INFO:Declaring metric variables
2025-02-20 00:28:07,957:INFO:Importing untrained model
2025-02-20 00:28:07,965:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:28:07,974:INFO:Starting cross validation
2025-02-20 00:28:07,978:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:08,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,280:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,280:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,280:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,280:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,306:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,322:INFO:Calculating mean and std
2025-02-20 00:28:08,323:INFO:Creating metrics dataframe
2025-02-20 00:28:08,323:INFO:Uploading results into container
2025-02-20 00:28:08,323:INFO:Uploading model into container now
2025-02-20 00:28:08,323:INFO:_master_model_container: 2
2025-02-20 00:28:08,323:INFO:_display_container: 2
2025-02-20 00:28:08,323:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:28:08,323:INFO:create_model() successfully completed......................................
2025-02-20 00:28:08,439:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:08,439:INFO:Creating metrics dataframe
2025-02-20 00:28:08,439:INFO:Initializing Naive Bayes
2025-02-20 00:28:08,439:INFO:Total runtime is 0.016211462020874024 minutes
2025-02-20 00:28:08,457:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:08,457:INFO:Initializing create_model()
2025-02-20 00:28:08,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:08,457:INFO:Checking exceptions
2025-02-20 00:28:08,458:INFO:Importing libraries
2025-02-20 00:28:08,458:INFO:Copying training dataset
2025-02-20 00:28:08,461:INFO:Defining folds
2025-02-20 00:28:08,461:INFO:Declaring metric variables
2025-02-20 00:28:08,473:INFO:Importing untrained model
2025-02-20 00:28:08,477:INFO:Naive Bayes Imported successfully
2025-02-20 00:28:08,484:INFO:Starting cross validation
2025-02-20 00:28:08,493:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:08,660:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,660:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,660:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,660:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:08,739:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:08,774:INFO:Calculating mean and std
2025-02-20 00:28:08,775:INFO:Creating metrics dataframe
2025-02-20 00:28:08,775:INFO:Uploading results into container
2025-02-20 00:28:08,775:INFO:Uploading model into container now
2025-02-20 00:28:08,775:INFO:_master_model_container: 3
2025-02-20 00:28:08,775:INFO:_display_container: 2
2025-02-20 00:28:08,775:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:28:08,775:INFO:create_model() successfully completed......................................
2025-02-20 00:28:08,890:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:08,890:INFO:Creating metrics dataframe
2025-02-20 00:28:08,907:INFO:Initializing Decision Tree Classifier
2025-02-20 00:28:08,907:INFO:Total runtime is 0.024011460940043132 minutes
2025-02-20 00:28:08,916:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:08,916:INFO:Initializing create_model()
2025-02-20 00:28:08,916:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:08,916:INFO:Checking exceptions
2025-02-20 00:28:08,916:INFO:Importing libraries
2025-02-20 00:28:08,916:INFO:Copying training dataset
2025-02-20 00:28:08,927:INFO:Defining folds
2025-02-20 00:28:08,927:INFO:Declaring metric variables
2025-02-20 00:28:08,932:INFO:Importing untrained model
2025-02-20 00:28:08,937:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:28:08,947:INFO:Starting cross validation
2025-02-20 00:28:08,950:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,155:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,155:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,155:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,186:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,207:INFO:Calculating mean and std
2025-02-20 00:28:09,208:INFO:Creating metrics dataframe
2025-02-20 00:28:09,209:INFO:Uploading results into container
2025-02-20 00:28:09,209:INFO:Uploading model into container now
2025-02-20 00:28:09,209:INFO:_master_model_container: 4
2025-02-20 00:28:09,209:INFO:_display_container: 2
2025-02-20 00:28:09,209:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 00:28:09,209:INFO:create_model() successfully completed......................................
2025-02-20 00:28:09,332:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:09,332:INFO:Creating metrics dataframe
2025-02-20 00:28:09,342:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:28:09,342:INFO:Total runtime is 0.03126233418782552 minutes
2025-02-20 00:28:09,347:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:09,347:INFO:Initializing create_model()
2025-02-20 00:28:09,347:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:09,347:INFO:Checking exceptions
2025-02-20 00:28:09,347:INFO:Importing libraries
2025-02-20 00:28:09,347:INFO:Copying training dataset
2025-02-20 00:28:09,349:INFO:Defining folds
2025-02-20 00:28:09,349:INFO:Declaring metric variables
2025-02-20 00:28:09,357:INFO:Importing untrained model
2025-02-20 00:28:09,357:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:28:09,373:INFO:Starting cross validation
2025-02-20 00:28:09,376:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:09,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,591:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,626:INFO:Calculating mean and std
2025-02-20 00:28:09,627:INFO:Creating metrics dataframe
2025-02-20 00:28:09,627:INFO:Uploading results into container
2025-02-20 00:28:09,631:INFO:Uploading model into container now
2025-02-20 00:28:09,631:INFO:_master_model_container: 5
2025-02-20 00:28:09,632:INFO:_display_container: 2
2025-02-20 00:28:09,632:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:28:09,632:INFO:create_model() successfully completed......................................
2025-02-20 00:28:09,743:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:09,743:INFO:Creating metrics dataframe
2025-02-20 00:28:09,759:INFO:Initializing Ridge Classifier
2025-02-20 00:28:09,759:INFO:Total runtime is 0.03821508089701335 minutes
2025-02-20 00:28:09,771:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:09,771:INFO:Initializing create_model()
2025-02-20 00:28:09,771:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:09,771:INFO:Checking exceptions
2025-02-20 00:28:09,771:INFO:Importing libraries
2025-02-20 00:28:09,771:INFO:Copying training dataset
2025-02-20 00:28:09,780:INFO:Defining folds
2025-02-20 00:28:09,780:INFO:Declaring metric variables
2025-02-20 00:28:09,784:INFO:Importing untrained model
2025-02-20 00:28:09,789:INFO:Ridge Classifier Imported successfully
2025-02-20 00:28:09,809:INFO:Starting cross validation
2025-02-20 00:28:09,812:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:09,960:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:09,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,009:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,011:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,011:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,028:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,028:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,028:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,028:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,060:INFO:Calculating mean and std
2025-02-20 00:28:10,060:INFO:Creating metrics dataframe
2025-02-20 00:28:10,060:INFO:Uploading results into container
2025-02-20 00:28:10,060:INFO:Uploading model into container now
2025-02-20 00:28:10,060:INFO:_master_model_container: 6
2025-02-20 00:28:10,060:INFO:_display_container: 2
2025-02-20 00:28:10,060:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:28:10,060:INFO:create_model() successfully completed......................................
2025-02-20 00:28:10,209:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:10,210:INFO:Creating metrics dataframe
2025-02-20 00:28:10,214:INFO:Initializing Random Forest Classifier
2025-02-20 00:28:10,214:INFO:Total runtime is 0.04578920602798463 minutes
2025-02-20 00:28:10,220:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:10,220:INFO:Initializing create_model()
2025-02-20 00:28:10,220:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:10,220:INFO:Checking exceptions
2025-02-20 00:28:10,220:INFO:Importing libraries
2025-02-20 00:28:10,220:INFO:Copying training dataset
2025-02-20 00:28:10,229:INFO:Defining folds
2025-02-20 00:28:10,229:INFO:Declaring metric variables
2025-02-20 00:28:10,229:INFO:Importing untrained model
2025-02-20 00:28:10,238:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:28:10,250:INFO:Starting cross validation
2025-02-20 00:28:10,254:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:10,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,780:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,812:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,812:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,826:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,895:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,965:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:10,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:10,996:INFO:Calculating mean and std
2025-02-20 00:28:10,996:INFO:Creating metrics dataframe
2025-02-20 00:28:11,002:INFO:Uploading results into container
2025-02-20 00:28:11,004:INFO:Uploading model into container now
2025-02-20 00:28:11,004:INFO:_master_model_container: 7
2025-02-20 00:28:11,004:INFO:_display_container: 2
2025-02-20 00:28:11,005:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 00:28:11,005:INFO:create_model() successfully completed......................................
2025-02-20 00:28:11,143:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:11,143:INFO:Creating metrics dataframe
2025-02-20 00:28:11,162:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:28:11,162:INFO:Total runtime is 0.06159207423528036 minutes
2025-02-20 00:28:11,165:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:11,167:INFO:Initializing create_model()
2025-02-20 00:28:11,167:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:11,167:INFO:Checking exceptions
2025-02-20 00:28:11,167:INFO:Importing libraries
2025-02-20 00:28:11,167:INFO:Copying training dataset
2025-02-20 00:28:11,169:INFO:Defining folds
2025-02-20 00:28:11,169:INFO:Declaring metric variables
2025-02-20 00:28:11,180:INFO:Importing untrained model
2025-02-20 00:28:11,183:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:28:11,183:INFO:Starting cross validation
2025-02-20 00:28:11,198:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:11,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,349:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,349:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,445:INFO:Calculating mean and std
2025-02-20 00:28:11,445:INFO:Creating metrics dataframe
2025-02-20 00:28:11,445:INFO:Uploading results into container
2025-02-20 00:28:11,445:INFO:Uploading model into container now
2025-02-20 00:28:11,445:INFO:_master_model_container: 8
2025-02-20 00:28:11,445:INFO:_display_container: 2
2025-02-20 00:28:11,445:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:28:11,445:INFO:create_model() successfully completed......................................
2025-02-20 00:28:11,615:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:11,615:INFO:Creating metrics dataframe
2025-02-20 00:28:11,624:INFO:Initializing Ada Boost Classifier
2025-02-20 00:28:11,624:INFO:Total runtime is 0.06930271784464519 minutes
2025-02-20 00:28:11,632:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:11,633:INFO:Initializing create_model()
2025-02-20 00:28:11,633:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:11,634:INFO:Checking exceptions
2025-02-20 00:28:11,634:INFO:Importing libraries
2025-02-20 00:28:11,634:INFO:Copying training dataset
2025-02-20 00:28:11,640:INFO:Defining folds
2025-02-20 00:28:11,640:INFO:Declaring metric variables
2025-02-20 00:28:11,650:INFO:Importing untrained model
2025-02-20 00:28:11,655:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:28:11,668:INFO:Starting cross validation
2025-02-20 00:28:11,671:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:11,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,901:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,901:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,901:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,965:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:11,965:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:11,980:INFO:Calculating mean and std
2025-02-20 00:28:11,980:INFO:Creating metrics dataframe
2025-02-20 00:28:11,980:INFO:Uploading results into container
2025-02-20 00:28:11,980:INFO:Uploading model into container now
2025-02-20 00:28:11,980:INFO:_master_model_container: 9
2025-02-20 00:28:11,980:INFO:_display_container: 2
2025-02-20 00:28:11,980:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 00:28:11,980:INFO:create_model() successfully completed......................................
2025-02-20 00:28:12,135:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:12,135:INFO:Creating metrics dataframe
2025-02-20 00:28:12,151:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:28:12,151:INFO:Total runtime is 0.0780807375907898 minutes
2025-02-20 00:28:12,156:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:12,156:INFO:Initializing create_model()
2025-02-20 00:28:12,156:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:12,157:INFO:Checking exceptions
2025-02-20 00:28:12,157:INFO:Importing libraries
2025-02-20 00:28:12,157:INFO:Copying training dataset
2025-02-20 00:28:12,163:INFO:Defining folds
2025-02-20 00:28:12,163:INFO:Declaring metric variables
2025-02-20 00:28:12,172:INFO:Importing untrained model
2025-02-20 00:28:12,177:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:28:12,187:INFO:Starting cross validation
2025-02-20 00:28:12,190:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,831:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,851:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:12,851:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:12,867:INFO:Calculating mean and std
2025-02-20 00:28:12,867:INFO:Creating metrics dataframe
2025-02-20 00:28:12,869:INFO:Uploading results into container
2025-02-20 00:28:12,869:INFO:Uploading model into container now
2025-02-20 00:28:12,869:INFO:_master_model_container: 10
2025-02-20 00:28:12,869:INFO:_display_container: 2
2025-02-20 00:28:12,869:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:28:12,869:INFO:create_model() successfully completed......................................
2025-02-20 00:28:12,986:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:12,986:INFO:Creating metrics dataframe
2025-02-20 00:28:12,987:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:28:12,995:INFO:Total runtime is 0.09213999509811402 minutes
2025-02-20 00:28:12,998:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:12,998:INFO:Initializing create_model()
2025-02-20 00:28:12,998:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:12,998:INFO:Checking exceptions
2025-02-20 00:28:12,998:INFO:Importing libraries
2025-02-20 00:28:12,998:INFO:Copying training dataset
2025-02-20 00:28:13,001:INFO:Defining folds
2025-02-20 00:28:13,001:INFO:Declaring metric variables
2025-02-20 00:28:13,010:INFO:Importing untrained model
2025-02-20 00:28:13,015:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:28:13,024:INFO:Starting cross validation
2025-02-20 00:28:13,027:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:13,182:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,182:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,298:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,298:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,298:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,313:INFO:Calculating mean and std
2025-02-20 00:28:13,313:INFO:Creating metrics dataframe
2025-02-20 00:28:13,313:INFO:Uploading results into container
2025-02-20 00:28:13,313:INFO:Uploading model into container now
2025-02-20 00:28:13,313:INFO:_master_model_container: 11
2025-02-20 00:28:13,313:INFO:_display_container: 2
2025-02-20 00:28:13,313:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:28:13,313:INFO:create_model() successfully completed......................................
2025-02-20 00:28:13,437:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:13,437:INFO:Creating metrics dataframe
2025-02-20 00:28:13,445:INFO:Initializing Extra Trees Classifier
2025-02-20 00:28:13,445:INFO:Total runtime is 0.09965104659398398 minutes
2025-02-20 00:28:13,451:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:13,451:INFO:Initializing create_model()
2025-02-20 00:28:13,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:13,452:INFO:Checking exceptions
2025-02-20 00:28:13,452:INFO:Importing libraries
2025-02-20 00:28:13,452:INFO:Copying training dataset
2025-02-20 00:28:13,452:INFO:Defining folds
2025-02-20 00:28:13,452:INFO:Declaring metric variables
2025-02-20 00:28:13,464:INFO:Importing untrained model
2025-02-20 00:28:13,468:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:28:13,477:INFO:Starting cross validation
2025-02-20 00:28:13,477:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:13,925:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,925:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,941:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,963:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:13,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,992:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:13,992:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,003:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,003:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,003:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,024:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,034:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,050:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,050:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,050:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,050:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,103:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,118:INFO:Calculating mean and std
2025-02-20 00:28:14,118:INFO:Creating metrics dataframe
2025-02-20 00:28:14,122:INFO:Uploading results into container
2025-02-20 00:28:14,124:INFO:Uploading model into container now
2025-02-20 00:28:14,124:INFO:_master_model_container: 12
2025-02-20 00:28:14,124:INFO:_display_container: 2
2025-02-20 00:28:14,125:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 00:28:14,125:INFO:create_model() successfully completed......................................
2025-02-20 00:28:14,250:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:14,250:INFO:Creating metrics dataframe
2025-02-20 00:28:14,268:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:28:14,268:INFO:Total runtime is 0.11335974136988324 minutes
2025-02-20 00:28:14,268:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:14,277:INFO:Initializing create_model()
2025-02-20 00:28:14,277:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:14,278:INFO:Checking exceptions
2025-02-20 00:28:14,278:INFO:Importing libraries
2025-02-20 00:28:14,278:INFO:Copying training dataset
2025-02-20 00:28:14,287:INFO:Defining folds
2025-02-20 00:28:14,287:INFO:Declaring metric variables
2025-02-20 00:28:14,293:INFO:Importing untrained model
2025-02-20 00:28:14,300:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:28:14,305:INFO:Starting cross validation
2025-02-20 00:28:14,305:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:14,783:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,783:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,783:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,802:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,821:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:14,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,025:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,025:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,051:INFO:Calculating mean and std
2025-02-20 00:28:15,053:INFO:Creating metrics dataframe
2025-02-20 00:28:15,056:INFO:Uploading results into container
2025-02-20 00:28:15,057:INFO:Uploading model into container now
2025-02-20 00:28:15,057:INFO:_master_model_container: 13
2025-02-20 00:28:15,057:INFO:_display_container: 2
2025-02-20 00:28:15,058:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:28:15,059:INFO:create_model() successfully completed......................................
2025-02-20 00:28:15,169:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:15,169:INFO:Creating metrics dataframe
2025-02-20 00:28:15,187:INFO:Initializing Dummy Classifier
2025-02-20 00:28:15,187:INFO:Total runtime is 0.12867733637491863 minutes
2025-02-20 00:28:15,195:INFO:SubProcess create_model() called ==================================
2025-02-20 00:28:15,195:INFO:Initializing create_model()
2025-02-20 00:28:15,195:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFAF07B940>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:15,195:INFO:Checking exceptions
2025-02-20 00:28:15,195:INFO:Importing libraries
2025-02-20 00:28:15,196:INFO:Copying training dataset
2025-02-20 00:28:15,204:INFO:Defining folds
2025-02-20 00:28:15,204:INFO:Declaring metric variables
2025-02-20 00:28:15,210:INFO:Importing untrained model
2025-02-20 00:28:15,218:INFO:Dummy Classifier Imported successfully
2025-02-20 00:28:15,229:INFO:Starting cross validation
2025-02-20 00:28:15,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:28:15,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:28:15,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:28:15,504:INFO:Calculating mean and std
2025-02-20 00:28:15,504:INFO:Creating metrics dataframe
2025-02-20 00:28:15,506:INFO:Uploading results into container
2025-02-20 00:28:15,506:INFO:Uploading model into container now
2025-02-20 00:28:15,506:INFO:_master_model_container: 14
2025-02-20 00:28:15,506:INFO:_display_container: 2
2025-02-20 00:28:15,506:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 00:28:15,506:INFO:create_model() successfully completed......................................
2025-02-20 00:28:15,621:INFO:SubProcess create_model() end ==================================
2025-02-20 00:28:15,621:INFO:Creating metrics dataframe
2025-02-20 00:28:15,646:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:28:15,657:INFO:Initializing create_model()
2025-02-20 00:28:15,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:28:15,657:INFO:Checking exceptions
2025-02-20 00:28:15,660:INFO:Importing libraries
2025-02-20 00:28:15,660:INFO:Copying training dataset
2025-02-20 00:28:15,660:INFO:Defining folds
2025-02-20 00:28:15,669:INFO:Declaring metric variables
2025-02-20 00:28:15,669:INFO:Importing untrained model
2025-02-20 00:28:15,670:INFO:Declaring custom model
2025-02-20 00:28:15,670:INFO:Ridge Classifier Imported successfully
2025-02-20 00:28:15,673:INFO:Cross validation set to False
2025-02-20 00:28:15,673:INFO:Fitting Model
2025-02-20 00:28:15,744:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:28:15,744:INFO:create_model() successfully completed......................................
2025-02-20 00:28:15,895:INFO:_master_model_container: 14
2025-02-20 00:28:15,896:INFO:_display_container: 2
2025-02-20 00:28:15,897:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:28:15,897:INFO:compare_models() successfully completed......................................
2025-02-20 00:28:15,907:INFO:Initializing save_model()
2025-02-20 00:28:15,908:INFO:save_model(model=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:28:15,908:INFO:Adding model into prep_pipe
2025-02-20 00:28:15,956:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 00:28:15,956:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=123,
                                 solver='auto', tol=0.0001))],
         verbose=False)
2025-02-20 00:28:15,956:INFO:save_model() successfully completed......................................
2025-02-20 00:28:16,099:INFO:Initializing predict_model()
2025-02-20 00:28:16,099:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE7AF20>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FFAF6052D0>)
2025-02-20 00:28:16,099:INFO:Checking exceptions
2025-02-20 00:28:16,099:INFO:Preloading libraries
2025-02-20 00:28:16,105:INFO:Set up data.
2025-02-20 00:28:16,117:INFO:Set up index.
2025-02-20 00:31:01,091:INFO:PyCaret ClassificationExperiment
2025-02-20 00:31:01,092:INFO:Logging name: clf-default-name
2025-02-20 00:31:01,093:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:31:01,093:INFO:version 3.3.2
2025-02-20 00:31:01,094:INFO:Initializing setup()
2025-02-20 00:31:01,094:INFO:self.USI: f537
2025-02-20 00:31:01,095:INFO:self._variable_keys: {'USI', '_available_plots', 'y_train', 'data', 'log_plots_param', 'gpu_n_jobs_param', 'fix_imbalance', 'fold_generator', '_ml_usecase', 'target_param', 'y_test', 'idx', 'html_param', 'X_train', 'exp_name_log', 'logging_param', 'seed', 'fold_shuffle_param', 'fold_groups_param', 'memory', 'y', 'is_multiclass', 'n_jobs_param', 'pipeline', 'gpu_param', 'exp_id', 'X', 'X_test'}
2025-02-20 00:31:01,096:INFO:Checking environment
2025-02-20 00:31:01,096:INFO:python_version: 3.10.14
2025-02-20 00:31:01,096:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:31:01,096:INFO:machine: AMD64
2025-02-20 00:31:01,096:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:31:01,105:INFO:Memory: svmem(total=16423702528, available=2123378688, percent=87.1, used=14300323840, free=2123378688)
2025-02-20 00:31:01,105:INFO:Physical Core: 8
2025-02-20 00:31:01,105:INFO:Logical Core: 16
2025-02-20 00:31:01,105:INFO:Checking libraries
2025-02-20 00:31:01,105:INFO:System:
2025-02-20 00:31:01,106:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:31:01,106:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:31:01,106:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:31:01,106:INFO:PyCaret required dependencies:
2025-02-20 00:31:01,106:INFO:                 pip: 25.0
2025-02-20 00:31:01,106:INFO:          setuptools: 75.8.0
2025-02-20 00:31:01,106:INFO:             pycaret: 3.3.2
2025-02-20 00:31:01,106:INFO:             IPython: 8.32.0
2025-02-20 00:31:01,106:INFO:          ipywidgets: 8.1.5
2025-02-20 00:31:01,106:INFO:                tqdm: 4.67.1
2025-02-20 00:31:01,106:INFO:               numpy: 1.26.4
2025-02-20 00:31:01,106:INFO:              pandas: 2.1.4
2025-02-20 00:31:01,106:INFO:              jinja2: 3.1.5
2025-02-20 00:31:01,106:INFO:               scipy: 1.11.4
2025-02-20 00:31:01,106:INFO:              joblib: 1.3.2
2025-02-20 00:31:01,106:INFO:             sklearn: 1.4.2
2025-02-20 00:31:01,106:INFO:                pyod: 2.0.3
2025-02-20 00:31:01,106:INFO:            imblearn: 0.13.0
2025-02-20 00:31:01,106:INFO:   category_encoders: 2.7.0
2025-02-20 00:31:01,106:INFO:            lightgbm: 4.6.0
2025-02-20 00:31:01,106:INFO:               numba: 0.61.0
2025-02-20 00:31:01,106:INFO:            requests: 2.32.3
2025-02-20 00:31:01,106:INFO:          matplotlib: 3.7.5
2025-02-20 00:31:01,106:INFO:          scikitplot: 0.3.7
2025-02-20 00:31:01,106:INFO:         yellowbrick: 1.5
2025-02-20 00:31:01,106:INFO:              plotly: 5.24.1
2025-02-20 00:31:01,106:INFO:    plotly-resampler: Not installed
2025-02-20 00:31:01,106:INFO:             kaleido: 0.2.1
2025-02-20 00:31:01,106:INFO:           schemdraw: 0.15
2025-02-20 00:31:01,107:INFO:         statsmodels: 0.14.4
2025-02-20 00:31:01,107:INFO:              sktime: 0.26.0
2025-02-20 00:31:01,107:INFO:               tbats: 1.1.3
2025-02-20 00:31:01,107:INFO:            pmdarima: 2.0.4
2025-02-20 00:31:01,107:INFO:              psutil: 7.0.0
2025-02-20 00:31:01,107:INFO:          markupsafe: 3.0.2
2025-02-20 00:31:01,107:INFO:             pickle5: Not installed
2025-02-20 00:31:01,107:INFO:         cloudpickle: 3.1.1
2025-02-20 00:31:01,107:INFO:         deprecation: 2.1.0
2025-02-20 00:31:01,107:INFO:              xxhash: 3.5.0
2025-02-20 00:31:01,107:INFO:           wurlitzer: Not installed
2025-02-20 00:31:01,107:INFO:PyCaret optional dependencies:
2025-02-20 00:31:01,107:INFO:                shap: Not installed
2025-02-20 00:31:01,107:INFO:           interpret: Not installed
2025-02-20 00:31:01,107:INFO:                umap: Not installed
2025-02-20 00:31:01,107:INFO:     ydata_profiling: Not installed
2025-02-20 00:31:01,107:INFO:  explainerdashboard: Not installed
2025-02-20 00:31:01,107:INFO:             autoviz: Not installed
2025-02-20 00:31:01,107:INFO:           fairlearn: Not installed
2025-02-20 00:31:01,107:INFO:          deepchecks: Not installed
2025-02-20 00:31:01,107:INFO:             xgboost: Not installed
2025-02-20 00:31:01,107:INFO:            catboost: Not installed
2025-02-20 00:31:01,107:INFO:              kmodes: Not installed
2025-02-20 00:31:01,107:INFO:             mlxtend: Not installed
2025-02-20 00:31:01,107:INFO:       statsforecast: Not installed
2025-02-20 00:31:01,107:INFO:        tune_sklearn: Not installed
2025-02-20 00:31:01,107:INFO:                 ray: Not installed
2025-02-20 00:31:01,107:INFO:            hyperopt: Not installed
2025-02-20 00:31:01,107:INFO:              optuna: Not installed
2025-02-20 00:31:01,107:INFO:               skopt: Not installed
2025-02-20 00:31:01,107:INFO:              mlflow: Not installed
2025-02-20 00:31:01,107:INFO:              gradio: Not installed
2025-02-20 00:31:01,107:INFO:             fastapi: Not installed
2025-02-20 00:31:01,107:INFO:             uvicorn: Not installed
2025-02-20 00:31:01,108:INFO:              m2cgen: Not installed
2025-02-20 00:31:01,108:INFO:           evidently: Not installed
2025-02-20 00:31:01,108:INFO:               fugue: Not installed
2025-02-20 00:31:01,108:INFO:           streamlit: Not installed
2025-02-20 00:31:01,108:INFO:             prophet: Not installed
2025-02-20 00:31:01,108:INFO:None
2025-02-20 00:31:01,108:INFO:Set up data.
2025-02-20 00:31:01,123:INFO:Set up folding strategy.
2025-02-20 00:31:01,123:INFO:Set up train/test split.
2025-02-20 00:31:01,136:INFO:Set up index.
2025-02-20 00:31:01,136:INFO:Assigning column types.
2025-02-20 00:31:01,136:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:31:01,188:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,188:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,222:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,223:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,272:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,272:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,294:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,294:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,294:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:31:01,337:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,353:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,353:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,410:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:31:01,436:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,436:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,436:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:31:01,487:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,487:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,563:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,563:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,563:INFO:Preparing preprocessing pipeline...
2025-02-20 00:31:01,563:INFO:Set up label encoding.
2025-02-20 00:31:01,563:INFO:Set up simple imputation.
2025-02-20 00:31:01,571:INFO:Set up encoding of categorical features.
2025-02-20 00:31:01,571:INFO:Set up feature normalization.
2025-02-20 00:31:01,653:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:31:01,672:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'te...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2025-02-20 00:31:01,672:INFO:Creating final display dataframe.
2025-02-20 00:31:01,921:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape         (7032, 9)
5        Transformed data shape         (7032, 9)
6   Transformed train set shape         (4922, 9)
7    Transformed test set shape         (2110, 9)
8              Numeric features                 7
9          Categorical features                 1
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17                    Normalize              True
18             Normalize method            zscore
19               Fold Generator   StratifiedKFold
20                  Fold Number                10
21                     CPU Jobs                -1
22                      Use GPU             False
23               Log Experiment             False
24              Experiment Name  clf-default-name
25                          USI              f537
2025-02-20 00:31:01,996:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:01,997:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:02,059:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:02,059:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:31:02,059:INFO:setup() successfully completed in 0.97s...............
2025-02-20 00:31:02,059:INFO:Initializing compare_models()
2025-02-20 00:31:02,059:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:31:02,059:INFO:Checking exceptions
2025-02-20 00:31:02,072:INFO:Preparing display monitor
2025-02-20 00:31:02,109:INFO:Initializing Logistic Regression
2025-02-20 00:31:02,109:INFO:Total runtime is 0.0 minutes
2025-02-20 00:31:02,113:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:02,114:INFO:Initializing create_model()
2025-02-20 00:31:02,114:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:02,114:INFO:Checking exceptions
2025-02-20 00:31:02,114:INFO:Importing libraries
2025-02-20 00:31:02,114:INFO:Copying training dataset
2025-02-20 00:31:02,123:INFO:Defining folds
2025-02-20 00:31:02,123:INFO:Declaring metric variables
2025-02-20 00:31:02,128:INFO:Importing untrained model
2025-02-20 00:31:02,133:INFO:Logistic Regression Imported successfully
2025-02-20 00:31:02,145:INFO:Starting cross validation
2025-02-20 00:31:02,147:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,277:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,307:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,307:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,307:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,324:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,324:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,340:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,361:INFO:Calculating mean and std
2025-02-20 00:31:02,362:INFO:Creating metrics dataframe
2025-02-20 00:31:02,364:INFO:Uploading results into container
2025-02-20 00:31:02,365:INFO:Uploading model into container now
2025-02-20 00:31:02,365:INFO:_master_model_container: 1
2025-02-20 00:31:02,366:INFO:_display_container: 2
2025-02-20 00:31:02,366:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:31:02,366:INFO:create_model() successfully completed......................................
2025-02-20 00:31:02,544:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:02,544:INFO:Creating metrics dataframe
2025-02-20 00:31:02,551:INFO:Initializing K Neighbors Classifier
2025-02-20 00:31:02,551:INFO:Total runtime is 0.007356178760528564 minutes
2025-02-20 00:31:02,554:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:02,554:INFO:Initializing create_model()
2025-02-20 00:31:02,554:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:02,554:INFO:Checking exceptions
2025-02-20 00:31:02,554:INFO:Importing libraries
2025-02-20 00:31:02,554:INFO:Copying training dataset
2025-02-20 00:31:02,556:INFO:Defining folds
2025-02-20 00:31:02,556:INFO:Declaring metric variables
2025-02-20 00:31:02,556:INFO:Importing untrained model
2025-02-20 00:31:02,556:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:31:02,578:INFO:Starting cross validation
2025-02-20 00:31:02,580:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:02,792:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,792:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,799:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,804:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,807:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,812:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,812:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,821:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,836:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:02,851:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,851:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:02,868:INFO:Calculating mean and std
2025-02-20 00:31:02,869:INFO:Creating metrics dataframe
2025-02-20 00:31:02,872:INFO:Uploading results into container
2025-02-20 00:31:02,872:INFO:Uploading model into container now
2025-02-20 00:31:02,873:INFO:_master_model_container: 2
2025-02-20 00:31:02,873:INFO:_display_container: 2
2025-02-20 00:31:02,873:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:31:02,873:INFO:create_model() successfully completed......................................
2025-02-20 00:31:03,073:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:03,073:INFO:Creating metrics dataframe
2025-02-20 00:31:03,085:INFO:Initializing Naive Bayes
2025-02-20 00:31:03,085:INFO:Total runtime is 0.016261684894561767 minutes
2025-02-20 00:31:03,091:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:03,092:INFO:Initializing create_model()
2025-02-20 00:31:03,092:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:03,092:INFO:Checking exceptions
2025-02-20 00:31:03,092:INFO:Importing libraries
2025-02-20 00:31:03,092:INFO:Copying training dataset
2025-02-20 00:31:03,100:INFO:Defining folds
2025-02-20 00:31:03,100:INFO:Declaring metric variables
2025-02-20 00:31:03,106:INFO:Importing untrained model
2025-02-20 00:31:03,112:INFO:Naive Bayes Imported successfully
2025-02-20 00:31:03,121:INFO:Starting cross validation
2025-02-20 00:31:03,124:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,257:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,257:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,264:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,265:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,265:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,265:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,267:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,269:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,272:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,273:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,305:INFO:Calculating mean and std
2025-02-20 00:31:03,307:INFO:Creating metrics dataframe
2025-02-20 00:31:03,310:INFO:Uploading results into container
2025-02-20 00:31:03,310:INFO:Uploading model into container now
2025-02-20 00:31:03,310:INFO:_master_model_container: 3
2025-02-20 00:31:03,310:INFO:_display_container: 2
2025-02-20 00:31:03,310:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:31:03,310:INFO:create_model() successfully completed......................................
2025-02-20 00:31:03,501:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:03,501:INFO:Creating metrics dataframe
2025-02-20 00:31:03,513:INFO:Initializing Decision Tree Classifier
2025-02-20 00:31:03,513:INFO:Total runtime is 0.02339437007904053 minutes
2025-02-20 00:31:03,518:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:03,519:INFO:Initializing create_model()
2025-02-20 00:31:03,520:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:03,520:INFO:Checking exceptions
2025-02-20 00:31:03,520:INFO:Importing libraries
2025-02-20 00:31:03,520:INFO:Copying training dataset
2025-02-20 00:31:03,531:INFO:Defining folds
2025-02-20 00:31:03,531:INFO:Declaring metric variables
2025-02-20 00:31:03,534:INFO:Importing untrained model
2025-02-20 00:31:03,541:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:31:03,551:INFO:Starting cross validation
2025-02-20 00:31:03,553:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:03,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,691:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,716:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,724:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:03,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:03,760:INFO:Calculating mean and std
2025-02-20 00:31:03,761:INFO:Creating metrics dataframe
2025-02-20 00:31:03,761:INFO:Uploading results into container
2025-02-20 00:31:03,761:INFO:Uploading model into container now
2025-02-20 00:31:03,761:INFO:_master_model_container: 4
2025-02-20 00:31:03,761:INFO:_display_container: 2
2025-02-20 00:31:03,761:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 00:31:03,761:INFO:create_model() successfully completed......................................
2025-02-20 00:31:03,946:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:03,947:INFO:Creating metrics dataframe
2025-02-20 00:31:03,949:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:31:03,956:INFO:Total runtime is 0.030787471930185956 minutes
2025-02-20 00:31:03,962:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:03,963:INFO:Initializing create_model()
2025-02-20 00:31:03,963:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:03,963:INFO:Checking exceptions
2025-02-20 00:31:03,963:INFO:Importing libraries
2025-02-20 00:31:03,963:INFO:Copying training dataset
2025-02-20 00:31:03,966:INFO:Defining folds
2025-02-20 00:31:03,966:INFO:Declaring metric variables
2025-02-20 00:31:03,975:INFO:Importing untrained model
2025-02-20 00:31:03,980:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:31:03,989:INFO:Starting cross validation
2025-02-20 00:31:03,991:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,115:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,115:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,131:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,131:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,147:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,176:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,194:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,210:INFO:Calculating mean and std
2025-02-20 00:31:04,210:INFO:Creating metrics dataframe
2025-02-20 00:31:04,213:INFO:Uploading results into container
2025-02-20 00:31:04,214:INFO:Uploading model into container now
2025-02-20 00:31:04,214:INFO:_master_model_container: 5
2025-02-20 00:31:04,214:INFO:_display_container: 2
2025-02-20 00:31:04,214:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:31:04,214:INFO:create_model() successfully completed......................................
2025-02-20 00:31:04,394:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:04,394:INFO:Creating metrics dataframe
2025-02-20 00:31:04,404:INFO:Initializing Ridge Classifier
2025-02-20 00:31:04,404:INFO:Total runtime is 0.03823912938435873 minutes
2025-02-20 00:31:04,408:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:04,409:INFO:Initializing create_model()
2025-02-20 00:31:04,409:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:04,409:INFO:Checking exceptions
2025-02-20 00:31:04,409:INFO:Importing libraries
2025-02-20 00:31:04,409:INFO:Copying training dataset
2025-02-20 00:31:04,417:INFO:Defining folds
2025-02-20 00:31:04,417:INFO:Declaring metric variables
2025-02-20 00:31:04,425:INFO:Importing untrained model
2025-02-20 00:31:04,431:INFO:Ridge Classifier Imported successfully
2025-02-20 00:31:04,439:INFO:Starting cross validation
2025-02-20 00:31:04,439:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:04,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,573:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,574:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,575:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,591:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,620:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,625:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,631:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:04,633:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:04,641:INFO:Calculating mean and std
2025-02-20 00:31:04,643:INFO:Creating metrics dataframe
2025-02-20 00:31:04,643:INFO:Uploading results into container
2025-02-20 00:31:04,643:INFO:Uploading model into container now
2025-02-20 00:31:04,643:INFO:_master_model_container: 6
2025-02-20 00:31:04,643:INFO:_display_container: 2
2025-02-20 00:31:04,643:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:31:04,643:INFO:create_model() successfully completed......................................
2025-02-20 00:31:04,794:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:04,794:INFO:Creating metrics dataframe
2025-02-20 00:31:04,803:INFO:Initializing Random Forest Classifier
2025-02-20 00:31:04,803:INFO:Total runtime is 0.044888695081075035 minutes
2025-02-20 00:31:04,812:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:04,812:INFO:Initializing create_model()
2025-02-20 00:31:04,812:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:04,813:INFO:Checking exceptions
2025-02-20 00:31:04,813:INFO:Importing libraries
2025-02-20 00:31:04,813:INFO:Copying training dataset
2025-02-20 00:31:04,820:INFO:Defining folds
2025-02-20 00:31:04,820:INFO:Declaring metric variables
2025-02-20 00:31:04,827:INFO:Importing untrained model
2025-02-20 00:31:04,831:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:31:04,840:INFO:Starting cross validation
2025-02-20 00:31:04,843:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:05,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,314:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,314:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,320:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,327:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,335:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,344:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,349:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,353:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,428:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,483:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,483:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,490:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,490:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,498:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,509:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,563:INFO:Calculating mean and std
2025-02-20 00:31:05,563:INFO:Creating metrics dataframe
2025-02-20 00:31:05,563:INFO:Uploading results into container
2025-02-20 00:31:05,563:INFO:Uploading model into container now
2025-02-20 00:31:05,563:INFO:_master_model_container: 7
2025-02-20 00:31:05,563:INFO:_display_container: 2
2025-02-20 00:31:05,563:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 00:31:05,563:INFO:create_model() successfully completed......................................
2025-02-20 00:31:05,727:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:05,727:INFO:Creating metrics dataframe
2025-02-20 00:31:05,748:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:31:05,748:INFO:Total runtime is 0.060643462340037035 minutes
2025-02-20 00:31:05,754:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:05,754:INFO:Initializing create_model()
2025-02-20 00:31:05,754:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:05,754:INFO:Checking exceptions
2025-02-20 00:31:05,754:INFO:Importing libraries
2025-02-20 00:31:05,754:INFO:Copying training dataset
2025-02-20 00:31:05,762:INFO:Defining folds
2025-02-20 00:31:05,762:INFO:Declaring metric variables
2025-02-20 00:31:05,770:INFO:Importing untrained model
2025-02-20 00:31:05,772:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:31:05,783:INFO:Starting cross validation
2025-02-20 00:31:05,786:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:05,876:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,886:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,894:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,897:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,923:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,931:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,931:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,938:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,946:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,946:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:31:05,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,950:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,950:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,955:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,956:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,977:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,978:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,985:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:05,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:05,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,012:INFO:Calculating mean and std
2025-02-20 00:31:06,013:INFO:Creating metrics dataframe
2025-02-20 00:31:06,016:INFO:Uploading results into container
2025-02-20 00:31:06,017:INFO:Uploading model into container now
2025-02-20 00:31:06,017:INFO:_master_model_container: 8
2025-02-20 00:31:06,017:INFO:_display_container: 2
2025-02-20 00:31:06,018:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:31:06,018:INFO:create_model() successfully completed......................................
2025-02-20 00:31:06,178:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:06,178:INFO:Creating metrics dataframe
2025-02-20 00:31:06,195:INFO:Initializing Ada Boost Classifier
2025-02-20 00:31:06,195:INFO:Total runtime is 0.06809525887171428 minutes
2025-02-20 00:31:06,199:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:06,199:INFO:Initializing create_model()
2025-02-20 00:31:06,199:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:06,199:INFO:Checking exceptions
2025-02-20 00:31:06,199:INFO:Importing libraries
2025-02-20 00:31:06,199:INFO:Copying training dataset
2025-02-20 00:31:06,204:INFO:Defining folds
2025-02-20 00:31:06,204:INFO:Declaring metric variables
2025-02-20 00:31:06,215:INFO:Importing untrained model
2025-02-20 00:31:06,218:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:31:06,228:INFO:Starting cross validation
2025-02-20 00:31:06,233:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:06,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,348:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,411:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,481:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:06,481:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:06,496:INFO:Calculating mean and std
2025-02-20 00:31:06,498:INFO:Creating metrics dataframe
2025-02-20 00:31:06,498:INFO:Uploading results into container
2025-02-20 00:31:06,498:INFO:Uploading model into container now
2025-02-20 00:31:06,498:INFO:_master_model_container: 9
2025-02-20 00:31:06,498:INFO:_display_container: 2
2025-02-20 00:31:06,498:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 00:31:06,498:INFO:create_model() successfully completed......................................
2025-02-20 00:31:06,652:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:06,652:INFO:Creating metrics dataframe
2025-02-20 00:31:06,665:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:31:06,665:INFO:Total runtime is 0.07592835426330566 minutes
2025-02-20 00:31:06,665:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:06,665:INFO:Initializing create_model()
2025-02-20 00:31:06,665:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:06,665:INFO:Checking exceptions
2025-02-20 00:31:06,665:INFO:Importing libraries
2025-02-20 00:31:06,665:INFO:Copying training dataset
2025-02-20 00:31:06,674:INFO:Defining folds
2025-02-20 00:31:06,674:INFO:Declaring metric variables
2025-02-20 00:31:06,680:INFO:Importing untrained model
2025-02-20 00:31:06,686:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:31:06,709:INFO:Starting cross validation
2025-02-20 00:31:06,713:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:07,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,216:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,216:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,216:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,216:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,264:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,281:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,315:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,331:INFO:Calculating mean and std
2025-02-20 00:31:07,331:INFO:Creating metrics dataframe
2025-02-20 00:31:07,334:INFO:Uploading results into container
2025-02-20 00:31:07,334:INFO:Uploading model into container now
2025-02-20 00:31:07,335:INFO:_master_model_container: 10
2025-02-20 00:31:07,335:INFO:_display_container: 2
2025-02-20 00:31:07,336:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:31:07,336:INFO:create_model() successfully completed......................................
2025-02-20 00:31:07,514:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:07,514:INFO:Creating metrics dataframe
2025-02-20 00:31:07,514:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:31:07,514:INFO:Total runtime is 0.09008289178212484 minutes
2025-02-20 00:31:07,531:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:07,532:INFO:Initializing create_model()
2025-02-20 00:31:07,532:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:07,532:INFO:Checking exceptions
2025-02-20 00:31:07,532:INFO:Importing libraries
2025-02-20 00:31:07,533:INFO:Copying training dataset
2025-02-20 00:31:07,536:INFO:Defining folds
2025-02-20 00:31:07,536:INFO:Declaring metric variables
2025-02-20 00:31:07,541:INFO:Importing untrained model
2025-02-20 00:31:07,547:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:31:07,556:INFO:Starting cross validation
2025-02-20 00:31:07,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:07,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,694:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:07,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:07,779:INFO:Calculating mean and std
2025-02-20 00:31:07,779:INFO:Creating metrics dataframe
2025-02-20 00:31:07,779:INFO:Uploading results into container
2025-02-20 00:31:07,779:INFO:Uploading model into container now
2025-02-20 00:31:07,779:INFO:_master_model_container: 11
2025-02-20 00:31:07,779:INFO:_display_container: 2
2025-02-20 00:31:07,779:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:31:07,786:INFO:create_model() successfully completed......................................
2025-02-20 00:31:07,934:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:07,934:INFO:Creating metrics dataframe
2025-02-20 00:31:07,950:INFO:Initializing Extra Trees Classifier
2025-02-20 00:31:07,950:INFO:Total runtime is 0.09733970562616984 minutes
2025-02-20 00:31:07,960:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:07,960:INFO:Initializing create_model()
2025-02-20 00:31:07,960:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:07,960:INFO:Checking exceptions
2025-02-20 00:31:07,960:INFO:Importing libraries
2025-02-20 00:31:07,960:INFO:Copying training dataset
2025-02-20 00:31:07,966:INFO:Defining folds
2025-02-20 00:31:07,966:INFO:Declaring metric variables
2025-02-20 00:31:07,975:INFO:Importing untrained model
2025-02-20 00:31:07,975:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:31:07,988:INFO:Starting cross validation
2025-02-20 00:31:07,991:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:08,357:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,357:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,357:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,398:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,476:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,476:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:08,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:08,499:INFO:Calculating mean and std
2025-02-20 00:31:08,499:INFO:Creating metrics dataframe
2025-02-20 00:31:08,499:INFO:Uploading results into container
2025-02-20 00:31:08,499:INFO:Uploading model into container now
2025-02-20 00:31:08,499:INFO:_master_model_container: 12
2025-02-20 00:31:08,499:INFO:_display_container: 2
2025-02-20 00:31:08,507:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 00:31:08,507:INFO:create_model() successfully completed......................................
2025-02-20 00:31:08,654:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:08,654:INFO:Creating metrics dataframe
2025-02-20 00:31:08,668:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:31:08,668:INFO:Total runtime is 0.10930856068929036 minutes
2025-02-20 00:31:08,674:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:08,674:INFO:Initializing create_model()
2025-02-20 00:31:08,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:08,674:INFO:Checking exceptions
2025-02-20 00:31:08,674:INFO:Importing libraries
2025-02-20 00:31:08,674:INFO:Copying training dataset
2025-02-20 00:31:08,678:INFO:Defining folds
2025-02-20 00:31:08,678:INFO:Declaring metric variables
2025-02-20 00:31:08,687:INFO:Importing untrained model
2025-02-20 00:31:08,687:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:31:08,697:INFO:Starting cross validation
2025-02-20 00:31:08,700:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:09,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,486:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,556:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,556:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,634:INFO:Calculating mean and std
2025-02-20 00:31:09,634:INFO:Creating metrics dataframe
2025-02-20 00:31:09,634:INFO:Uploading results into container
2025-02-20 00:31:09,639:INFO:Uploading model into container now
2025-02-20 00:31:09,640:INFO:_master_model_container: 13
2025-02-20 00:31:09,640:INFO:_display_container: 2
2025-02-20 00:31:09,640:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:31:09,640:INFO:create_model() successfully completed......................................
2025-02-20 00:31:09,805:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:09,805:INFO:Creating metrics dataframe
2025-02-20 00:31:09,820:INFO:Initializing Dummy Classifier
2025-02-20 00:31:09,820:INFO:Total runtime is 0.12851333618164062 minutes
2025-02-20 00:31:09,824:INFO:SubProcess create_model() called ==================================
2025-02-20 00:31:09,824:INFO:Initializing create_model()
2025-02-20 00:31:09,824:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FFB6950E50>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:09,824:INFO:Checking exceptions
2025-02-20 00:31:09,824:INFO:Importing libraries
2025-02-20 00:31:09,824:INFO:Copying training dataset
2025-02-20 00:31:09,827:INFO:Defining folds
2025-02-20 00:31:09,827:INFO:Declaring metric variables
2025-02-20 00:31:09,835:INFO:Importing untrained model
2025-02-20 00:31:09,841:INFO:Dummy Classifier Imported successfully
2025-02-20 00:31:09,847:INFO:Starting cross validation
2025-02-20 00:31:09,850:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:31:09,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,974:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,987:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:09,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:10,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:10,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:31:10,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:31:10,020:INFO:Calculating mean and std
2025-02-20 00:31:10,020:INFO:Creating metrics dataframe
2025-02-20 00:31:10,020:INFO:Uploading results into container
2025-02-20 00:31:10,020:INFO:Uploading model into container now
2025-02-20 00:31:10,020:INFO:_master_model_container: 14
2025-02-20 00:31:10,020:INFO:_display_container: 2
2025-02-20 00:31:10,020:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 00:31:10,020:INFO:create_model() successfully completed......................................
2025-02-20 00:31:10,174:INFO:SubProcess create_model() end ==================================
2025-02-20 00:31:10,174:INFO:Creating metrics dataframe
2025-02-20 00:31:10,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:31:10,197:INFO:Initializing create_model()
2025-02-20 00:31:10,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:31:10,197:INFO:Checking exceptions
2025-02-20 00:31:10,204:INFO:Importing libraries
2025-02-20 00:31:10,206:INFO:Copying training dataset
2025-02-20 00:31:10,206:INFO:Defining folds
2025-02-20 00:31:10,206:INFO:Declaring metric variables
2025-02-20 00:31:10,206:INFO:Importing untrained model
2025-02-20 00:31:10,206:INFO:Declaring custom model
2025-02-20 00:31:10,206:INFO:Ridge Classifier Imported successfully
2025-02-20 00:31:10,206:INFO:Cross validation set to False
2025-02-20 00:31:10,206:INFO:Fitting Model
2025-02-20 00:31:10,261:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:31:10,261:INFO:create_model() successfully completed......................................
2025-02-20 00:31:10,479:INFO:_master_model_container: 14
2025-02-20 00:31:10,479:INFO:_display_container: 2
2025-02-20 00:31:10,480:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 00:31:10,480:INFO:compare_models() successfully completed......................................
2025-02-20 00:31:10,485:INFO:Initializing save_model()
2025-02-20 00:31:10,485:INFO:save_model(model=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'te...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:31:10,485:INFO:Adding model into prep_pipe
2025-02-20 00:31:10,496:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 00:31:10,504:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=SimpleImputer(a...
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=123,
                                 solver='auto', tol=0.0001))],
         verbose=False)
2025-02-20 00:31:10,504:INFO:save_model() successfully completed......................................
2025-02-20 00:31:10,672:INFO:Initializing predict_model()
2025-02-20 00:31:10,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FFAEE5C700>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FFAF215C60>)
2025-02-20 00:31:10,672:INFO:Checking exceptions
2025-02-20 00:31:10,672:INFO:Preloading libraries
2025-02-20 00:31:10,672:INFO:Set up data.
2025-02-20 00:31:10,689:INFO:Set up index.
2025-02-20 00:37:28,405:INFO:Initializing load_model()
2025-02-20 00:37:28,405:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 00:38:49,871:INFO:Initializing predict_model()
2025-02-20 00:38:49,871:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A33130>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB2D1BE20>)
2025-02-20 00:38:49,872:INFO:Checking exceptions
2025-02-20 00:38:49,872:INFO:Preloading libraries
2025-02-20 00:38:49,877:INFO:Set up data.
2025-02-20 00:38:49,881:INFO:Set up index.
2025-02-20 00:42:44,005:INFO:PyCaret ClassificationExperiment
2025-02-20 00:42:44,010:INFO:Logging name: clf-default-name
2025-02-20 00:42:44,010:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:42:44,010:INFO:version 3.3.2
2025-02-20 00:42:44,010:INFO:Initializing setup()
2025-02-20 00:42:44,010:INFO:self.USI: c375
2025-02-20 00:42:44,010:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 00:42:44,010:INFO:Checking environment
2025-02-20 00:42:44,010:INFO:python_version: 3.10.14
2025-02-20 00:42:44,010:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:42:44,010:INFO:machine: AMD64
2025-02-20 00:42:44,010:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:42:44,017:INFO:Memory: svmem(total=16423702528, available=4791726080, percent=70.8, used=11631976448, free=4791726080)
2025-02-20 00:42:44,017:INFO:Physical Core: 8
2025-02-20 00:42:44,017:INFO:Logical Core: 16
2025-02-20 00:42:44,017:INFO:Checking libraries
2025-02-20 00:42:44,017:INFO:System:
2025-02-20 00:42:44,017:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:42:44,017:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:42:44,017:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:42:44,017:INFO:PyCaret required dependencies:
2025-02-20 00:42:44,017:INFO:                 pip: 25.0
2025-02-20 00:42:44,017:INFO:          setuptools: 75.8.0
2025-02-20 00:42:44,017:INFO:             pycaret: 3.3.2
2025-02-20 00:42:44,017:INFO:             IPython: 8.32.0
2025-02-20 00:42:44,017:INFO:          ipywidgets: 8.1.5
2025-02-20 00:42:44,017:INFO:                tqdm: 4.67.1
2025-02-20 00:42:44,017:INFO:               numpy: 1.26.4
2025-02-20 00:42:44,017:INFO:              pandas: 2.1.4
2025-02-20 00:42:44,017:INFO:              jinja2: 3.1.5
2025-02-20 00:42:44,017:INFO:               scipy: 1.11.4
2025-02-20 00:42:44,017:INFO:              joblib: 1.3.2
2025-02-20 00:42:44,017:INFO:             sklearn: 1.4.2
2025-02-20 00:42:44,017:INFO:                pyod: 2.0.3
2025-02-20 00:42:44,017:INFO:            imblearn: 0.13.0
2025-02-20 00:42:44,017:INFO:   category_encoders: 2.7.0
2025-02-20 00:42:44,017:INFO:            lightgbm: 4.6.0
2025-02-20 00:42:44,017:INFO:               numba: 0.61.0
2025-02-20 00:42:44,017:INFO:            requests: 2.32.3
2025-02-20 00:42:44,024:INFO:          matplotlib: 3.7.5
2025-02-20 00:42:44,024:INFO:          scikitplot: 0.3.7
2025-02-20 00:42:44,024:INFO:         yellowbrick: 1.5
2025-02-20 00:42:44,024:INFO:              plotly: 5.24.1
2025-02-20 00:42:44,024:INFO:    plotly-resampler: Not installed
2025-02-20 00:42:44,024:INFO:             kaleido: 0.2.1
2025-02-20 00:42:44,024:INFO:           schemdraw: 0.15
2025-02-20 00:42:44,024:INFO:         statsmodels: 0.14.4
2025-02-20 00:42:44,024:INFO:              sktime: 0.26.0
2025-02-20 00:42:44,024:INFO:               tbats: 1.1.3
2025-02-20 00:42:44,024:INFO:            pmdarima: 2.0.4
2025-02-20 00:42:44,024:INFO:              psutil: 7.0.0
2025-02-20 00:42:44,024:INFO:          markupsafe: 3.0.2
2025-02-20 00:42:44,024:INFO:             pickle5: Not installed
2025-02-20 00:42:44,024:INFO:         cloudpickle: 3.1.1
2025-02-20 00:42:44,024:INFO:         deprecation: 2.1.0
2025-02-20 00:42:44,024:INFO:              xxhash: 3.5.0
2025-02-20 00:42:44,024:INFO:           wurlitzer: Not installed
2025-02-20 00:42:44,024:INFO:PyCaret optional dependencies:
2025-02-20 00:42:44,024:INFO:                shap: Not installed
2025-02-20 00:42:44,024:INFO:           interpret: Not installed
2025-02-20 00:42:44,024:INFO:                umap: Not installed
2025-02-20 00:42:44,024:INFO:     ydata_profiling: Not installed
2025-02-20 00:42:44,024:INFO:  explainerdashboard: Not installed
2025-02-20 00:42:44,024:INFO:             autoviz: Not installed
2025-02-20 00:42:44,024:INFO:           fairlearn: Not installed
2025-02-20 00:42:44,024:INFO:          deepchecks: Not installed
2025-02-20 00:42:44,024:INFO:             xgboost: Not installed
2025-02-20 00:42:44,024:INFO:            catboost: Not installed
2025-02-20 00:42:44,024:INFO:              kmodes: Not installed
2025-02-20 00:42:44,024:INFO:             mlxtend: Not installed
2025-02-20 00:42:44,024:INFO:       statsforecast: Not installed
2025-02-20 00:42:44,024:INFO:        tune_sklearn: Not installed
2025-02-20 00:42:44,024:INFO:                 ray: Not installed
2025-02-20 00:42:44,024:INFO:            hyperopt: Not installed
2025-02-20 00:42:44,024:INFO:              optuna: Not installed
2025-02-20 00:42:44,024:INFO:               skopt: Not installed
2025-02-20 00:42:44,024:INFO:              mlflow: Not installed
2025-02-20 00:42:44,024:INFO:              gradio: Not installed
2025-02-20 00:42:44,024:INFO:             fastapi: Not installed
2025-02-20 00:42:44,024:INFO:             uvicorn: Not installed
2025-02-20 00:42:44,024:INFO:              m2cgen: Not installed
2025-02-20 00:42:44,024:INFO:           evidently: Not installed
2025-02-20 00:42:44,024:INFO:               fugue: Not installed
2025-02-20 00:42:44,024:INFO:           streamlit: Not installed
2025-02-20 00:42:44,024:INFO:             prophet: Not installed
2025-02-20 00:42:44,024:INFO:None
2025-02-20 00:42:44,024:INFO:Set up data.
2025-02-20 00:42:44,039:INFO:Set up folding strategy.
2025-02-20 00:42:44,039:INFO:Set up train/test split.
2025-02-20 00:42:44,050:INFO:Set up index.
2025-02-20 00:42:44,050:INFO:Assigning column types.
2025-02-20 00:42:44,058:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:42:44,104:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,104:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,132:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,132:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,167:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,167:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,198:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,200:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:42:44,237:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,267:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,267:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,302:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:42:44,335:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,335:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,335:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:42:44,399:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,399:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,469:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,469:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:44,473:INFO:Preparing preprocessing pipeline...
2025-02-20 00:42:44,476:INFO:Set up label encoding.
2025-02-20 00:42:44,476:INFO:Set up simple imputation.
2025-02-20 00:42:44,476:INFO:Set up encoding of categorical features.
2025-02-20 00:42:44,476:INFO:Set up column name cleaning.
2025-02-20 00:42:44,600:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:42:44,600:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:42:44,600:INFO:Creating final display dataframe.
2025-02-20 00:42:44,917:INFO:Setup _display_container:                     Description             Value
0                    Session id              3204
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              c375
2025-02-20 00:42:45,002:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:45,002:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:45,067:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:45,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:42:45,067:INFO:setup() successfully completed in 1.06s...............
2025-02-20 00:42:45,087:INFO:Initializing compare_models()
2025-02-20 00:42:45,087:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:42:45,087:INFO:Checking exceptions
2025-02-20 00:42:45,096:INFO:Preparing display monitor
2025-02-20 00:42:45,120:INFO:Initializing Logistic Regression
2025-02-20 00:42:45,120:INFO:Total runtime is 0.0 minutes
2025-02-20 00:42:45,120:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:45,120:INFO:Initializing create_model()
2025-02-20 00:42:45,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:45,120:INFO:Checking exceptions
2025-02-20 00:42:45,120:INFO:Importing libraries
2025-02-20 00:42:45,120:INFO:Copying training dataset
2025-02-20 00:42:45,135:INFO:Defining folds
2025-02-20 00:42:45,135:INFO:Declaring metric variables
2025-02-20 00:42:45,136:INFO:Importing untrained model
2025-02-20 00:42:45,136:INFO:Logistic Regression Imported successfully
2025-02-20 00:42:45,146:INFO:Starting cross validation
2025-02-20 00:42:45,150:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:49,660:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,747:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,759:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,767:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,768:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,782:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,826:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,826:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,836:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,876:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:42:49,895:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,939:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:49,960:INFO:Calculating mean and std
2025-02-20 00:42:49,962:INFO:Creating metrics dataframe
2025-02-20 00:42:49,964:INFO:Uploading results into container
2025-02-20 00:42:49,965:INFO:Uploading model into container now
2025-02-20 00:42:49,966:INFO:_master_model_container: 1
2025-02-20 00:42:49,966:INFO:_display_container: 2
2025-02-20 00:42:49,966:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3204, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:42:49,966:INFO:create_model() successfully completed......................................
2025-02-20 00:42:50,194:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:50,194:INFO:Creating metrics dataframe
2025-02-20 00:42:50,213:INFO:Initializing K Neighbors Classifier
2025-02-20 00:42:50,213:INFO:Total runtime is 0.0848890503247579 minutes
2025-02-20 00:42:50,213:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:50,213:INFO:Initializing create_model()
2025-02-20 00:42:50,213:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:50,213:INFO:Checking exceptions
2025-02-20 00:42:50,213:INFO:Importing libraries
2025-02-20 00:42:50,213:INFO:Copying training dataset
2025-02-20 00:42:50,224:INFO:Defining folds
2025-02-20 00:42:50,224:INFO:Declaring metric variables
2025-02-20 00:42:50,227:INFO:Importing untrained model
2025-02-20 00:42:50,231:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:42:50,237:INFO:Starting cross validation
2025-02-20 00:42:50,239:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:50,496:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,496:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,528:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,528:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,552:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:50,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,797:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,807:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,807:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,807:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,864:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,867:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,869:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:52,882:INFO:Calculating mean and std
2025-02-20 00:42:52,882:INFO:Creating metrics dataframe
2025-02-20 00:42:52,882:INFO:Uploading results into container
2025-02-20 00:42:52,882:INFO:Uploading model into container now
2025-02-20 00:42:52,882:INFO:_master_model_container: 2
2025-02-20 00:42:52,882:INFO:_display_container: 2
2025-02-20 00:42:52,882:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:42:52,882:INFO:create_model() successfully completed......................................
2025-02-20 00:42:53,141:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:53,142:INFO:Creating metrics dataframe
2025-02-20 00:42:53,150:INFO:Initializing Naive Bayes
2025-02-20 00:42:53,150:INFO:Total runtime is 0.1338419715563456 minutes
2025-02-20 00:42:53,150:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:53,150:INFO:Initializing create_model()
2025-02-20 00:42:53,150:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:53,150:INFO:Checking exceptions
2025-02-20 00:42:53,150:INFO:Importing libraries
2025-02-20 00:42:53,150:INFO:Copying training dataset
2025-02-20 00:42:53,166:INFO:Defining folds
2025-02-20 00:42:53,166:INFO:Declaring metric variables
2025-02-20 00:42:53,167:INFO:Importing untrained model
2025-02-20 00:42:53,167:INFO:Naive Bayes Imported successfully
2025-02-20 00:42:53,183:INFO:Starting cross validation
2025-02-20 00:42:53,186:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:53,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,351:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,362:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,371:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,434:INFO:Calculating mean and std
2025-02-20 00:42:53,435:INFO:Creating metrics dataframe
2025-02-20 00:42:53,438:INFO:Uploading results into container
2025-02-20 00:42:53,438:INFO:Uploading model into container now
2025-02-20 00:42:53,439:INFO:_master_model_container: 3
2025-02-20 00:42:53,439:INFO:_display_container: 2
2025-02-20 00:42:53,439:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:42:53,439:INFO:create_model() successfully completed......................................
2025-02-20 00:42:53,735:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:53,735:INFO:Creating metrics dataframe
2025-02-20 00:42:53,743:INFO:Initializing Decision Tree Classifier
2025-02-20 00:42:53,743:INFO:Total runtime is 0.14372924963633218 minutes
2025-02-20 00:42:53,747:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:53,748:INFO:Initializing create_model()
2025-02-20 00:42:53,748:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:53,748:INFO:Checking exceptions
2025-02-20 00:42:53,748:INFO:Importing libraries
2025-02-20 00:42:53,748:INFO:Copying training dataset
2025-02-20 00:42:53,754:INFO:Defining folds
2025-02-20 00:42:53,754:INFO:Declaring metric variables
2025-02-20 00:42:53,762:INFO:Importing untrained model
2025-02-20 00:42:53,769:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:42:53,776:INFO:Starting cross validation
2025-02-20 00:42:53,779:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:53,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,966:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,985:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,985:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,991:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:53,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:53,995:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:54,002:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,002:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,002:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:54,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,020:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,025:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,028:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:54,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,046:INFO:Calculating mean and std
2025-02-20 00:42:54,047:INFO:Creating metrics dataframe
2025-02-20 00:42:54,049:INFO:Uploading results into container
2025-02-20 00:42:54,050:INFO:Uploading model into container now
2025-02-20 00:42:54,051:INFO:_master_model_container: 4
2025-02-20 00:42:54,051:INFO:_display_container: 2
2025-02-20 00:42:54,052:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=3204, splitter='best')
2025-02-20 00:42:54,052:INFO:create_model() successfully completed......................................
2025-02-20 00:42:54,390:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:54,390:INFO:Creating metrics dataframe
2025-02-20 00:42:54,390:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:42:54,390:INFO:Total runtime is 0.15451227029164633 minutes
2025-02-20 00:42:54,406:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:54,408:INFO:Initializing create_model()
2025-02-20 00:42:54,408:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:54,408:INFO:Checking exceptions
2025-02-20 00:42:54,408:INFO:Importing libraries
2025-02-20 00:42:54,408:INFO:Copying training dataset
2025-02-20 00:42:54,415:INFO:Defining folds
2025-02-20 00:42:54,415:INFO:Declaring metric variables
2025-02-20 00:42:54,421:INFO:Importing untrained model
2025-02-20 00:42:54,426:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:42:54,429:INFO:Starting cross validation
2025-02-20 00:42:54,434:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:54,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,636:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,667:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,684:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,684:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,708:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,709:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,715:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,716:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,720:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:54,735:INFO:Calculating mean and std
2025-02-20 00:42:54,735:INFO:Creating metrics dataframe
2025-02-20 00:42:54,735:INFO:Uploading results into container
2025-02-20 00:42:54,735:INFO:Uploading model into container now
2025-02-20 00:42:54,740:INFO:_master_model_container: 5
2025-02-20 00:42:54,740:INFO:_display_container: 2
2025-02-20 00:42:54,740:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3204, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:42:54,740:INFO:create_model() successfully completed......................................
2025-02-20 00:42:54,969:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:54,969:INFO:Creating metrics dataframe
2025-02-20 00:42:54,976:INFO:Initializing Ridge Classifier
2025-02-20 00:42:54,976:INFO:Total runtime is 0.16427651643753052 minutes
2025-02-20 00:42:54,984:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:54,985:INFO:Initializing create_model()
2025-02-20 00:42:54,985:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:54,985:INFO:Checking exceptions
2025-02-20 00:42:54,985:INFO:Importing libraries
2025-02-20 00:42:54,985:INFO:Copying training dataset
2025-02-20 00:42:54,987:INFO:Defining folds
2025-02-20 00:42:54,987:INFO:Declaring metric variables
2025-02-20 00:42:54,987:INFO:Importing untrained model
2025-02-20 00:42:55,003:INFO:Ridge Classifier Imported successfully
2025-02-20 00:42:55,003:INFO:Starting cross validation
2025-02-20 00:42:55,003:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:55,170:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,192:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,206:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,208:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,215:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,215:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,223:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,239:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,242:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,242:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,259:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,259:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,264:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,264:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:55,321:INFO:Calculating mean and std
2025-02-20 00:42:55,322:INFO:Creating metrics dataframe
2025-02-20 00:42:55,322:INFO:Uploading results into container
2025-02-20 00:42:55,322:INFO:Uploading model into container now
2025-02-20 00:42:55,327:INFO:_master_model_container: 6
2025-02-20 00:42:55,327:INFO:_display_container: 2
2025-02-20 00:42:55,328:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3204, solver='auto',
                tol=0.0001)
2025-02-20 00:42:55,328:INFO:create_model() successfully completed......................................
2025-02-20 00:42:55,637:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:55,637:INFO:Creating metrics dataframe
2025-02-20 00:42:55,637:INFO:Initializing Random Forest Classifier
2025-02-20 00:42:55,637:INFO:Total runtime is 0.17529656092325846 minutes
2025-02-20 00:42:55,657:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:55,658:INFO:Initializing create_model()
2025-02-20 00:42:55,658:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:55,658:INFO:Checking exceptions
2025-02-20 00:42:55,658:INFO:Importing libraries
2025-02-20 00:42:55,658:INFO:Copying training dataset
2025-02-20 00:42:55,665:INFO:Defining folds
2025-02-20 00:42:55,665:INFO:Declaring metric variables
2025-02-20 00:42:55,671:INFO:Importing untrained model
2025-02-20 00:42:55,678:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:42:55,682:INFO:Starting cross validation
2025-02-20 00:42:55,688:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:56,178:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,188:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,190:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,211:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,221:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,221:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,224:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,224:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,228:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,228:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,230:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,306:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,313:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,313:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,313:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,362:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,362:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,390:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,401:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,424:INFO:Calculating mean and std
2025-02-20 00:42:56,425:INFO:Creating metrics dataframe
2025-02-20 00:42:56,427:INFO:Uploading results into container
2025-02-20 00:42:56,428:INFO:Uploading model into container now
2025-02-20 00:42:56,428:INFO:_master_model_container: 7
2025-02-20 00:42:56,428:INFO:_display_container: 2
2025-02-20 00:42:56,429:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=3204, verbose=0,
                       warm_start=False)
2025-02-20 00:42:56,429:INFO:create_model() successfully completed......................................
2025-02-20 00:42:56,637:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:56,637:INFO:Creating metrics dataframe
2025-02-20 00:42:56,651:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:42:56,651:INFO:Total runtime is 0.19218333959579467 minutes
2025-02-20 00:42:56,657:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:56,657:INFO:Initializing create_model()
2025-02-20 00:42:56,657:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:56,657:INFO:Checking exceptions
2025-02-20 00:42:56,657:INFO:Importing libraries
2025-02-20 00:42:56,658:INFO:Copying training dataset
2025-02-20 00:42:56,664:INFO:Defining folds
2025-02-20 00:42:56,664:INFO:Declaring metric variables
2025-02-20 00:42:56,670:INFO:Importing untrained model
2025-02-20 00:42:56,674:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:42:56,683:INFO:Starting cross validation
2025-02-20 00:42:56,686:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:56,788:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,831:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,839:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,842:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,856:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,864:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,866:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,869:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,870:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,877:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,881:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:42:56,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,887:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,920:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,926:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:56,931:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:56,940:INFO:Calculating mean and std
2025-02-20 00:42:56,941:INFO:Creating metrics dataframe
2025-02-20 00:42:56,943:INFO:Uploading results into container
2025-02-20 00:42:56,943:INFO:Uploading model into container now
2025-02-20 00:42:56,943:INFO:_master_model_container: 8
2025-02-20 00:42:56,943:INFO:_display_container: 2
2025-02-20 00:42:56,943:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:42:56,943:INFO:create_model() successfully completed......................................
2025-02-20 00:42:57,177:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:57,177:INFO:Creating metrics dataframe
2025-02-20 00:42:57,194:INFO:Initializing Ada Boost Classifier
2025-02-20 00:42:57,194:INFO:Total runtime is 0.20123742818832396 minutes
2025-02-20 00:42:57,194:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:57,194:INFO:Initializing create_model()
2025-02-20 00:42:57,194:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:57,194:INFO:Checking exceptions
2025-02-20 00:42:57,194:INFO:Importing libraries
2025-02-20 00:42:57,194:INFO:Copying training dataset
2025-02-20 00:42:57,211:INFO:Defining folds
2025-02-20 00:42:57,211:INFO:Declaring metric variables
2025-02-20 00:42:57,214:INFO:Importing untrained model
2025-02-20 00:42:57,218:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:42:57,224:INFO:Starting cross validation
2025-02-20 00:42:57,224:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:57,333:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,343:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,360:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,375:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,390:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:42:57,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,410:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,436:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,437:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,444:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,452:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,458:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,464:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,468:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:57,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:57,490:INFO:Calculating mean and std
2025-02-20 00:42:57,491:INFO:Creating metrics dataframe
2025-02-20 00:42:57,494:INFO:Uploading results into container
2025-02-20 00:42:57,494:INFO:Uploading model into container now
2025-02-20 00:42:57,494:INFO:_master_model_container: 9
2025-02-20 00:42:57,494:INFO:_display_container: 2
2025-02-20 00:42:57,494:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3204)
2025-02-20 00:42:57,497:INFO:create_model() successfully completed......................................
2025-02-20 00:42:57,733:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:57,733:INFO:Creating metrics dataframe
2025-02-20 00:42:57,745:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:42:57,745:INFO:Total runtime is 0.21041653156280515 minutes
2025-02-20 00:42:57,753:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:57,754:INFO:Initializing create_model()
2025-02-20 00:42:57,754:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:57,754:INFO:Checking exceptions
2025-02-20 00:42:57,754:INFO:Importing libraries
2025-02-20 00:42:57,754:INFO:Copying training dataset
2025-02-20 00:42:57,762:INFO:Defining folds
2025-02-20 00:42:57,762:INFO:Declaring metric variables
2025-02-20 00:42:57,766:INFO:Importing untrained model
2025-02-20 00:42:57,766:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:42:57,771:INFO:Starting cross validation
2025-02-20 00:42:57,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:58,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,452:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,452:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,462:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,462:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,465:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,493:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,494:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,494:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,494:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,495:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,511:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,530:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,536:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,538:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,547:INFO:Calculating mean and std
2025-02-20 00:42:58,548:INFO:Creating metrics dataframe
2025-02-20 00:42:58,550:INFO:Uploading results into container
2025-02-20 00:42:58,550:INFO:Uploading model into container now
2025-02-20 00:42:58,551:INFO:_master_model_container: 10
2025-02-20 00:42:58,551:INFO:_display_container: 2
2025-02-20 00:42:58,553:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3204, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:42:58,553:INFO:create_model() successfully completed......................................
2025-02-20 00:42:58,728:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:58,728:INFO:Creating metrics dataframe
2025-02-20 00:42:58,745:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:42:58,745:INFO:Total runtime is 0.22708532015482583 minutes
2025-02-20 00:42:58,745:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:58,745:INFO:Initializing create_model()
2025-02-20 00:42:58,745:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:58,745:INFO:Checking exceptions
2025-02-20 00:42:58,745:INFO:Importing libraries
2025-02-20 00:42:58,745:INFO:Copying training dataset
2025-02-20 00:42:58,753:INFO:Defining folds
2025-02-20 00:42:58,753:INFO:Declaring metric variables
2025-02-20 00:42:58,761:INFO:Importing untrained model
2025-02-20 00:42:58,765:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:42:58,773:INFO:Starting cross validation
2025-02-20 00:42:58,776:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:58,926:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,938:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,938:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,944:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,960:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:58,979:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,010:INFO:Calculating mean and std
2025-02-20 00:42:59,010:INFO:Creating metrics dataframe
2025-02-20 00:42:59,010:INFO:Uploading results into container
2025-02-20 00:42:59,010:INFO:Uploading model into container now
2025-02-20 00:42:59,010:INFO:_master_model_container: 11
2025-02-20 00:42:59,010:INFO:_display_container: 2
2025-02-20 00:42:59,010:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:42:59,010:INFO:create_model() successfully completed......................................
2025-02-20 00:42:59,199:INFO:SubProcess create_model() end ==================================
2025-02-20 00:42:59,199:INFO:Creating metrics dataframe
2025-02-20 00:42:59,207:INFO:Initializing Extra Trees Classifier
2025-02-20 00:42:59,208:INFO:Total runtime is 0.2348137895266215 minutes
2025-02-20 00:42:59,212:INFO:SubProcess create_model() called ==================================
2025-02-20 00:42:59,212:INFO:Initializing create_model()
2025-02-20 00:42:59,212:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:42:59,212:INFO:Checking exceptions
2025-02-20 00:42:59,212:INFO:Importing libraries
2025-02-20 00:42:59,213:INFO:Copying training dataset
2025-02-20 00:42:59,217:INFO:Defining folds
2025-02-20 00:42:59,217:INFO:Declaring metric variables
2025-02-20 00:42:59,222:INFO:Importing untrained model
2025-02-20 00:42:59,228:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:42:59,235:INFO:Starting cross validation
2025-02-20 00:42:59,237:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:42:59,656:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,665:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,673:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,707:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,713:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,715:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,719:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,720:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,743:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,745:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,755:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,779:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,779:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,779:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,779:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,805:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,831:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,836:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,839:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:42:59,841:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:42:59,850:INFO:Calculating mean and std
2025-02-20 00:42:59,852:INFO:Creating metrics dataframe
2025-02-20 00:42:59,855:INFO:Uploading results into container
2025-02-20 00:42:59,856:INFO:Uploading model into container now
2025-02-20 00:42:59,856:INFO:_master_model_container: 12
2025-02-20 00:42:59,856:INFO:_display_container: 2
2025-02-20 00:42:59,857:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=3204, verbose=0,
                     warm_start=False)
2025-02-20 00:42:59,857:INFO:create_model() successfully completed......................................
2025-02-20 00:43:00,034:INFO:SubProcess create_model() end ==================================
2025-02-20 00:43:00,034:INFO:Creating metrics dataframe
2025-02-20 00:43:00,050:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:43:00,050:INFO:Total runtime is 0.24883867502212523 minutes
2025-02-20 00:43:00,050:INFO:SubProcess create_model() called ==================================
2025-02-20 00:43:00,050:INFO:Initializing create_model()
2025-02-20 00:43:00,050:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:43:00,050:INFO:Checking exceptions
2025-02-20 00:43:00,050:INFO:Importing libraries
2025-02-20 00:43:00,050:INFO:Copying training dataset
2025-02-20 00:43:00,057:INFO:Defining folds
2025-02-20 00:43:00,057:INFO:Declaring metric variables
2025-02-20 00:43:00,062:INFO:Importing untrained model
2025-02-20 00:43:00,068:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:43:00,076:INFO:Starting cross validation
2025-02-20 00:43:00,079:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:43:00,580:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,580:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,580:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,580:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,596:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,599:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,601:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,606:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,614:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,620:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,627:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,664:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,688:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,692:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,695:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,697:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,697:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,697:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,728:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:00,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:00,754:INFO:Calculating mean and std
2025-02-20 00:43:00,754:INFO:Creating metrics dataframe
2025-02-20 00:43:00,754:INFO:Uploading results into container
2025-02-20 00:43:00,754:INFO:Uploading model into container now
2025-02-20 00:43:00,754:INFO:_master_model_container: 13
2025-02-20 00:43:00,754:INFO:_display_container: 2
2025-02-20 00:43:00,754:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3204, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:43:00,754:INFO:create_model() successfully completed......................................
2025-02-20 00:43:00,964:INFO:SubProcess create_model() end ==================================
2025-02-20 00:43:00,964:INFO:Creating metrics dataframe
2025-02-20 00:43:00,969:INFO:Initializing Dummy Classifier
2025-02-20 00:43:00,974:INFO:Total runtime is 0.2642331480979919 minutes
2025-02-20 00:43:00,974:INFO:SubProcess create_model() called ==================================
2025-02-20 00:43:00,974:INFO:Initializing create_model()
2025-02-20 00:43:00,974:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0AEBC10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:43:00,974:INFO:Checking exceptions
2025-02-20 00:43:00,977:INFO:Importing libraries
2025-02-20 00:43:00,977:INFO:Copying training dataset
2025-02-20 00:43:00,982:INFO:Defining folds
2025-02-20 00:43:00,982:INFO:Declaring metric variables
2025-02-20 00:43:00,982:INFO:Importing untrained model
2025-02-20 00:43:00,990:INFO:Dummy Classifier Imported successfully
2025-02-20 00:43:00,996:INFO:Starting cross validation
2025-02-20 00:43:00,999:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:43:01,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,153:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,155:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,157:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,157:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,160:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,164:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,165:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,169:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,171:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,197:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,267:INFO:Calculating mean and std
2025-02-20 00:43:01,267:INFO:Creating metrics dataframe
2025-02-20 00:43:01,267:INFO:Uploading results into container
2025-02-20 00:43:01,267:INFO:Uploading model into container now
2025-02-20 00:43:01,267:INFO:_master_model_container: 14
2025-02-20 00:43:01,267:INFO:_display_container: 2
2025-02-20 00:43:01,267:INFO:DummyClassifier(constant=None, random_state=3204, strategy='prior')
2025-02-20 00:43:01,267:INFO:create_model() successfully completed......................................
2025-02-20 00:43:01,445:INFO:SubProcess create_model() end ==================================
2025-02-20 00:43:01,445:INFO:Creating metrics dataframe
2025-02-20 00:43:01,456:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:43:01,461:INFO:Initializing create_model()
2025-02-20 00:43:01,461:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:43:01,464:INFO:Checking exceptions
2025-02-20 00:43:01,464:INFO:Importing libraries
2025-02-20 00:43:01,466:INFO:Copying training dataset
2025-02-20 00:43:01,468:INFO:Defining folds
2025-02-20 00:43:01,468:INFO:Declaring metric variables
2025-02-20 00:43:01,468:INFO:Importing untrained model
2025-02-20 00:43:01,468:INFO:Declaring custom model
2025-02-20 00:43:01,468:INFO:Naive Bayes Imported successfully
2025-02-20 00:43:01,468:INFO:Cross validation set to False
2025-02-20 00:43:01,468:INFO:Fitting Model
2025-02-20 00:43:01,598:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:43:01,598:INFO:create_model() successfully completed......................................
2025-02-20 00:43:01,785:INFO:_master_model_container: 14
2025-02-20 00:43:01,785:INFO:_display_container: 2
2025-02-20 00:43:01,785:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:43:01,785:INFO:compare_models() successfully completed......................................
2025-02-20 00:43:01,858:INFO:Initializing predict_model()
2025-02-20 00:43:01,858:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB374B130>)
2025-02-20 00:43:01,858:INFO:Checking exceptions
2025-02-20 00:43:01,858:INFO:Preloading libraries
2025-02-20 00:43:01,863:INFO:Set up data.
2025-02-20 00:43:01,873:INFO:Set up index.
2025-02-20 00:43:01,963:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 00:43:01,964:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,966:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,970:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:43:01,971:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:43:01,973:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 00:43:01,973:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 00:43:01,975:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 00:43:02,218:INFO:Initializing save_model()
2025-02-20 00:43:02,218:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:43:02,218:INFO:Adding model into prep_pipe
2025-02-20 00:43:02,241:INFO:LDA.pkl saved in current working directory
2025-02-20 00:43:02,256:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 00:43:02,256:INFO:save_model() successfully completed......................................
2025-02-20 00:43:02,529:INFO:Initializing load_model()
2025-02-20 00:43:02,530:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 00:43:02,693:INFO:Initializing predict_model()
2025-02-20 00:43:02,699:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB374B400>)
2025-02-20 00:43:02,699:INFO:Checking exceptions
2025-02-20 00:43:02,700:INFO:Preloading libraries
2025-02-20 00:43:02,703:INFO:Set up data.
2025-02-20 00:43:02,707:INFO:Set up index.
2025-02-20 00:45:42,094:INFO:Initializing predict_model()
2025-02-20 00:45:42,094:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB37F6C80>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AEB652200>)
2025-02-20 00:45:42,094:INFO:Checking exceptions
2025-02-20 00:45:42,094:INFO:Preloading libraries
2025-02-20 00:45:42,103:INFO:Set up data.
2025-02-20 00:45:42,109:INFO:Set up index.
2025-02-20 00:46:20,356:INFO:PyCaret ClassificationExperiment
2025-02-20 00:46:20,359:INFO:Logging name: clf-default-name
2025-02-20 00:46:20,359:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 00:46:20,359:INFO:version 3.3.2
2025-02-20 00:46:20,359:INFO:Initializing setup()
2025-02-20 00:46:20,359:INFO:self.USI: 1289
2025-02-20 00:46:20,359:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 00:46:20,359:INFO:Checking environment
2025-02-20 00:46:20,359:INFO:python_version: 3.10.14
2025-02-20 00:46:20,359:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 00:46:20,359:INFO:machine: AMD64
2025-02-20 00:46:20,360:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 00:46:20,363:INFO:Memory: svmem(total=16423702528, available=3528577024, percent=78.5, used=12895125504, free=3528577024)
2025-02-20 00:46:20,363:INFO:Physical Core: 8
2025-02-20 00:46:20,363:INFO:Logical Core: 16
2025-02-20 00:46:20,363:INFO:Checking libraries
2025-02-20 00:46:20,363:INFO:System:
2025-02-20 00:46:20,363:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 00:46:20,363:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 00:46:20,363:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 00:46:20,363:INFO:PyCaret required dependencies:
2025-02-20 00:46:20,363:INFO:                 pip: 25.0
2025-02-20 00:46:20,363:INFO:          setuptools: 75.8.0
2025-02-20 00:46:20,363:INFO:             pycaret: 3.3.2
2025-02-20 00:46:20,363:INFO:             IPython: 8.32.0
2025-02-20 00:46:20,363:INFO:          ipywidgets: 8.1.5
2025-02-20 00:46:20,363:INFO:                tqdm: 4.67.1
2025-02-20 00:46:20,363:INFO:               numpy: 1.26.4
2025-02-20 00:46:20,363:INFO:              pandas: 2.1.4
2025-02-20 00:46:20,363:INFO:              jinja2: 3.1.5
2025-02-20 00:46:20,363:INFO:               scipy: 1.11.4
2025-02-20 00:46:20,363:INFO:              joblib: 1.3.2
2025-02-20 00:46:20,363:INFO:             sklearn: 1.4.2
2025-02-20 00:46:20,363:INFO:                pyod: 2.0.3
2025-02-20 00:46:20,363:INFO:            imblearn: 0.13.0
2025-02-20 00:46:20,363:INFO:   category_encoders: 2.7.0
2025-02-20 00:46:20,363:INFO:            lightgbm: 4.6.0
2025-02-20 00:46:20,363:INFO:               numba: 0.61.0
2025-02-20 00:46:20,363:INFO:            requests: 2.32.3
2025-02-20 00:46:20,363:INFO:          matplotlib: 3.7.5
2025-02-20 00:46:20,363:INFO:          scikitplot: 0.3.7
2025-02-20 00:46:20,363:INFO:         yellowbrick: 1.5
2025-02-20 00:46:20,363:INFO:              plotly: 5.24.1
2025-02-20 00:46:20,363:INFO:    plotly-resampler: Not installed
2025-02-20 00:46:20,363:INFO:             kaleido: 0.2.1
2025-02-20 00:46:20,363:INFO:           schemdraw: 0.15
2025-02-20 00:46:20,363:INFO:         statsmodels: 0.14.4
2025-02-20 00:46:20,363:INFO:              sktime: 0.26.0
2025-02-20 00:46:20,363:INFO:               tbats: 1.1.3
2025-02-20 00:46:20,363:INFO:            pmdarima: 2.0.4
2025-02-20 00:46:20,363:INFO:              psutil: 7.0.0
2025-02-20 00:46:20,363:INFO:          markupsafe: 3.0.2
2025-02-20 00:46:20,363:INFO:             pickle5: Not installed
2025-02-20 00:46:20,363:INFO:         cloudpickle: 3.1.1
2025-02-20 00:46:20,363:INFO:         deprecation: 2.1.0
2025-02-20 00:46:20,363:INFO:              xxhash: 3.5.0
2025-02-20 00:46:20,363:INFO:           wurlitzer: Not installed
2025-02-20 00:46:20,363:INFO:PyCaret optional dependencies:
2025-02-20 00:46:20,363:INFO:                shap: Not installed
2025-02-20 00:46:20,363:INFO:           interpret: Not installed
2025-02-20 00:46:20,363:INFO:                umap: Not installed
2025-02-20 00:46:20,363:INFO:     ydata_profiling: Not installed
2025-02-20 00:46:20,363:INFO:  explainerdashboard: Not installed
2025-02-20 00:46:20,363:INFO:             autoviz: Not installed
2025-02-20 00:46:20,363:INFO:           fairlearn: Not installed
2025-02-20 00:46:20,363:INFO:          deepchecks: Not installed
2025-02-20 00:46:20,363:INFO:             xgboost: Not installed
2025-02-20 00:46:20,363:INFO:            catboost: Not installed
2025-02-20 00:46:20,363:INFO:              kmodes: Not installed
2025-02-20 00:46:20,363:INFO:             mlxtend: Not installed
2025-02-20 00:46:20,363:INFO:       statsforecast: Not installed
2025-02-20 00:46:20,363:INFO:        tune_sklearn: Not installed
2025-02-20 00:46:20,363:INFO:                 ray: Not installed
2025-02-20 00:46:20,363:INFO:            hyperopt: Not installed
2025-02-20 00:46:20,363:INFO:              optuna: Not installed
2025-02-20 00:46:20,363:INFO:               skopt: Not installed
2025-02-20 00:46:20,363:INFO:              mlflow: Not installed
2025-02-20 00:46:20,363:INFO:              gradio: Not installed
2025-02-20 00:46:20,363:INFO:             fastapi: Not installed
2025-02-20 00:46:20,363:INFO:             uvicorn: Not installed
2025-02-20 00:46:20,363:INFO:              m2cgen: Not installed
2025-02-20 00:46:20,363:INFO:           evidently: Not installed
2025-02-20 00:46:20,363:INFO:               fugue: Not installed
2025-02-20 00:46:20,363:INFO:           streamlit: Not installed
2025-02-20 00:46:20,363:INFO:             prophet: Not installed
2025-02-20 00:46:20,363:INFO:None
2025-02-20 00:46:20,363:INFO:Set up data.
2025-02-20 00:46:20,380:INFO:Set up folding strategy.
2025-02-20 00:46:20,380:INFO:Set up train/test split.
2025-02-20 00:46:20,397:INFO:Set up index.
2025-02-20 00:46:20,397:INFO:Assigning column types.
2025-02-20 00:46:20,400:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 00:46:20,431:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,431:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,447:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,462:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,498:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,498:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,514:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,514:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,514:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 00:46:20,562:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,618:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 00:46:20,648:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,648:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,648:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 00:46:20,715:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,715:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,778:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,780:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:20,781:INFO:Preparing preprocessing pipeline...
2025-02-20 00:46:20,781:INFO:Set up label encoding.
2025-02-20 00:46:20,781:INFO:Set up simple imputation.
2025-02-20 00:46:20,781:INFO:Set up encoding of categorical features.
2025-02-20 00:46:20,781:INFO:Set up column name cleaning.
2025-02-20 00:46:20,899:INFO:Finished creating preprocessing pipeline.
2025-02-20 00:46:20,899:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 00:46:20,899:INFO:Creating final display dataframe.
2025-02-20 00:46:21,183:INFO:Setup _display_container:                     Description             Value
0                    Session id               984
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              1289
2025-02-20 00:46:21,249:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:21,249:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:21,320:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:21,320:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 00:46:21,320:INFO:setup() successfully completed in 0.97s...............
2025-02-20 00:46:21,335:INFO:Initializing compare_models()
2025-02-20 00:46:21,335:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 00:46:21,335:INFO:Checking exceptions
2025-02-20 00:46:21,347:INFO:Preparing display monitor
2025-02-20 00:46:21,371:INFO:Initializing Logistic Regression
2025-02-20 00:46:21,371:INFO:Total runtime is 2.0051002502441405e-05 minutes
2025-02-20 00:46:21,371:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:21,371:INFO:Initializing create_model()
2025-02-20 00:46:21,371:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:21,371:INFO:Checking exceptions
2025-02-20 00:46:21,371:INFO:Importing libraries
2025-02-20 00:46:21,371:INFO:Copying training dataset
2025-02-20 00:46:21,381:INFO:Defining folds
2025-02-20 00:46:21,381:INFO:Declaring metric variables
2025-02-20 00:46:21,382:INFO:Importing untrained model
2025-02-20 00:46:21,382:INFO:Logistic Regression Imported successfully
2025-02-20 00:46:21,391:INFO:Starting cross validation
2025-02-20 00:46:21,396:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:21,799:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,868:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,882:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,898:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,899:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,916:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,916:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,948:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,964:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 00:46:21,964:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:21,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,015:INFO:Calculating mean and std
2025-02-20 00:46:22,016:INFO:Creating metrics dataframe
2025-02-20 00:46:22,018:INFO:Uploading results into container
2025-02-20 00:46:22,018:INFO:Uploading model into container now
2025-02-20 00:46:22,018:INFO:_master_model_container: 1
2025-02-20 00:46:22,018:INFO:_display_container: 2
2025-02-20 00:46:22,018:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=984, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 00:46:22,018:INFO:create_model() successfully completed......................................
2025-02-20 00:46:22,185:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:22,185:INFO:Creating metrics dataframe
2025-02-20 00:46:22,202:INFO:Initializing K Neighbors Classifier
2025-02-20 00:46:22,202:INFO:Total runtime is 0.013867342472076416 minutes
2025-02-20 00:46:22,202:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:22,202:INFO:Initializing create_model()
2025-02-20 00:46:22,202:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:22,202:INFO:Checking exceptions
2025-02-20 00:46:22,202:INFO:Importing libraries
2025-02-20 00:46:22,202:INFO:Copying training dataset
2025-02-20 00:46:22,207:INFO:Defining folds
2025-02-20 00:46:22,207:INFO:Declaring metric variables
2025-02-20 00:46:22,207:INFO:Importing untrained model
2025-02-20 00:46:22,216:INFO:K Neighbors Classifier Imported successfully
2025-02-20 00:46:22,221:INFO:Starting cross validation
2025-02-20 00:46:22,221:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:22,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,544:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,560:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,594:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,601:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,607:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:22,664:INFO:Calculating mean and std
2025-02-20 00:46:22,664:INFO:Creating metrics dataframe
2025-02-20 00:46:22,664:INFO:Uploading results into container
2025-02-20 00:46:22,664:INFO:Uploading model into container now
2025-02-20 00:46:22,664:INFO:_master_model_container: 2
2025-02-20 00:46:22,664:INFO:_display_container: 2
2025-02-20 00:46:22,664:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 00:46:22,664:INFO:create_model() successfully completed......................................
2025-02-20 00:46:22,888:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:22,888:INFO:Creating metrics dataframe
2025-02-20 00:46:22,904:INFO:Initializing Naive Bayes
2025-02-20 00:46:22,904:INFO:Total runtime is 0.025576738516489665 minutes
2025-02-20 00:46:22,909:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:22,909:INFO:Initializing create_model()
2025-02-20 00:46:22,909:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:22,909:INFO:Checking exceptions
2025-02-20 00:46:22,909:INFO:Importing libraries
2025-02-20 00:46:22,909:INFO:Copying training dataset
2025-02-20 00:46:22,917:INFO:Defining folds
2025-02-20 00:46:22,917:INFO:Declaring metric variables
2025-02-20 00:46:22,923:INFO:Importing untrained model
2025-02-20 00:46:22,923:INFO:Naive Bayes Imported successfully
2025-02-20 00:46:22,937:INFO:Starting cross validation
2025-02-20 00:46:22,937:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:23,070:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,086:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,130:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,151:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,160:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,162:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,178:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,200:INFO:Calculating mean and std
2025-02-20 00:46:23,200:INFO:Creating metrics dataframe
2025-02-20 00:46:23,202:INFO:Uploading results into container
2025-02-20 00:46:23,202:INFO:Uploading model into container now
2025-02-20 00:46:23,205:INFO:_master_model_container: 3
2025-02-20 00:46:23,205:INFO:_display_container: 2
2025-02-20 00:46:23,205:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:46:23,205:INFO:create_model() successfully completed......................................
2025-02-20 00:46:23,387:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:23,387:INFO:Creating metrics dataframe
2025-02-20 00:46:23,387:INFO:Initializing Decision Tree Classifier
2025-02-20 00:46:23,387:INFO:Total runtime is 0.03362241983413696 minutes
2025-02-20 00:46:23,387:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:23,387:INFO:Initializing create_model()
2025-02-20 00:46:23,387:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:23,398:INFO:Checking exceptions
2025-02-20 00:46:23,398:INFO:Importing libraries
2025-02-20 00:46:23,398:INFO:Copying training dataset
2025-02-20 00:46:23,404:INFO:Defining folds
2025-02-20 00:46:23,405:INFO:Declaring metric variables
2025-02-20 00:46:23,405:INFO:Importing untrained model
2025-02-20 00:46:23,411:INFO:Decision Tree Classifier Imported successfully
2025-02-20 00:46:23,415:INFO:Starting cross validation
2025-02-20 00:46:23,419:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:23,541:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,557:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,557:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,557:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,588:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,620:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:23,620:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:23,635:INFO:Calculating mean and std
2025-02-20 00:46:23,637:INFO:Creating metrics dataframe
2025-02-20 00:46:23,637:INFO:Uploading results into container
2025-02-20 00:46:23,637:INFO:Uploading model into container now
2025-02-20 00:46:23,637:INFO:_master_model_container: 4
2025-02-20 00:46:23,637:INFO:_display_container: 2
2025-02-20 00:46:23,637:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=984, splitter='best')
2025-02-20 00:46:23,637:INFO:create_model() successfully completed......................................
2025-02-20 00:46:23,821:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:23,822:INFO:Creating metrics dataframe
2025-02-20 00:46:23,826:INFO:Initializing SVM - Linear Kernel
2025-02-20 00:46:23,826:INFO:Total runtime is 0.04093508720397949 minutes
2025-02-20 00:46:23,826:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:23,826:INFO:Initializing create_model()
2025-02-20 00:46:23,826:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:23,826:INFO:Checking exceptions
2025-02-20 00:46:23,826:INFO:Importing libraries
2025-02-20 00:46:23,826:INFO:Copying training dataset
2025-02-20 00:46:23,840:INFO:Defining folds
2025-02-20 00:46:23,840:INFO:Declaring metric variables
2025-02-20 00:46:23,846:INFO:Importing untrained model
2025-02-20 00:46:23,846:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 00:46:23,854:INFO:Starting cross validation
2025-02-20 00:46:23,860:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:24,010:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,073:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,075:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,075:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,089:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,104:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,107:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,153:INFO:Calculating mean and std
2025-02-20 00:46:24,155:INFO:Creating metrics dataframe
2025-02-20 00:46:24,155:INFO:Uploading results into container
2025-02-20 00:46:24,155:INFO:Uploading model into container now
2025-02-20 00:46:24,155:INFO:_master_model_container: 5
2025-02-20 00:46:24,155:INFO:_display_container: 2
2025-02-20 00:46:24,159:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=984, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 00:46:24,159:INFO:create_model() successfully completed......................................
2025-02-20 00:46:24,340:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:24,340:INFO:Creating metrics dataframe
2025-02-20 00:46:24,340:INFO:Initializing Ridge Classifier
2025-02-20 00:46:24,340:INFO:Total runtime is 0.04950320323308308 minutes
2025-02-20 00:46:24,356:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:24,356:INFO:Initializing create_model()
2025-02-20 00:46:24,356:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:24,356:INFO:Checking exceptions
2025-02-20 00:46:24,356:INFO:Importing libraries
2025-02-20 00:46:24,356:INFO:Copying training dataset
2025-02-20 00:46:24,356:INFO:Defining folds
2025-02-20 00:46:24,356:INFO:Declaring metric variables
2025-02-20 00:46:24,356:INFO:Importing untrained model
2025-02-20 00:46:24,356:INFO:Ridge Classifier Imported successfully
2025-02-20 00:46:24,371:INFO:Starting cross validation
2025-02-20 00:46:24,380:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:24,514:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,514:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,514:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,529:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,577:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,577:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,586:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:24,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:24,624:INFO:Calculating mean and std
2025-02-20 00:46:24,624:INFO:Creating metrics dataframe
2025-02-20 00:46:24,624:INFO:Uploading results into container
2025-02-20 00:46:24,624:INFO:Uploading model into container now
2025-02-20 00:46:24,624:INFO:_master_model_container: 6
2025-02-20 00:46:24,624:INFO:_display_container: 2
2025-02-20 00:46:24,624:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=984, solver='auto',
                tol=0.0001)
2025-02-20 00:46:24,624:INFO:create_model() successfully completed......................................
2025-02-20 00:46:24,804:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:24,804:INFO:Creating metrics dataframe
2025-02-20 00:46:24,823:INFO:Initializing Random Forest Classifier
2025-02-20 00:46:24,823:INFO:Total runtime is 0.05755166212717691 minutes
2025-02-20 00:46:24,825:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:24,825:INFO:Initializing create_model()
2025-02-20 00:46:24,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:24,825:INFO:Checking exceptions
2025-02-20 00:46:24,825:INFO:Importing libraries
2025-02-20 00:46:24,825:INFO:Copying training dataset
2025-02-20 00:46:24,825:INFO:Defining folds
2025-02-20 00:46:24,825:INFO:Declaring metric variables
2025-02-20 00:46:24,825:INFO:Importing untrained model
2025-02-20 00:46:24,841:INFO:Random Forest Classifier Imported successfully
2025-02-20 00:46:24,841:INFO:Starting cross validation
2025-02-20 00:46:24,841:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:25,367:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,392:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,421:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,422:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,556:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,566:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,581:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,612:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:25,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:25,644:INFO:Calculating mean and std
2025-02-20 00:46:25,644:INFO:Creating metrics dataframe
2025-02-20 00:46:25,648:INFO:Uploading results into container
2025-02-20 00:46:25,648:INFO:Uploading model into container now
2025-02-20 00:46:25,648:INFO:_master_model_container: 7
2025-02-20 00:46:25,648:INFO:_display_container: 2
2025-02-20 00:46:25,650:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=984, verbose=0,
                       warm_start=False)
2025-02-20 00:46:25,650:INFO:create_model() successfully completed......................................
2025-02-20 00:46:25,828:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:25,828:INFO:Creating metrics dataframe
2025-02-20 00:46:25,840:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 00:46:25,840:INFO:Total runtime is 0.07450779279073079 minutes
2025-02-20 00:46:25,843:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:25,843:INFO:Initializing create_model()
2025-02-20 00:46:25,843:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:25,843:INFO:Checking exceptions
2025-02-20 00:46:25,843:INFO:Importing libraries
2025-02-20 00:46:25,843:INFO:Copying training dataset
2025-02-20 00:46:25,843:INFO:Defining folds
2025-02-20 00:46:25,843:INFO:Declaring metric variables
2025-02-20 00:46:25,850:INFO:Importing untrained model
2025-02-20 00:46:25,853:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 00:46:25,862:INFO:Starting cross validation
2025-02-20 00:46:25,862:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:25,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:25,953:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:25,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:25,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:25,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:25,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,031:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:26,047:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 00:46:26,062:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,079:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,079:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,090:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,110:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,110:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,125:INFO:Calculating mean and std
2025-02-20 00:46:26,125:INFO:Creating metrics dataframe
2025-02-20 00:46:26,125:INFO:Uploading results into container
2025-02-20 00:46:26,125:INFO:Uploading model into container now
2025-02-20 00:46:26,125:INFO:_master_model_container: 8
2025-02-20 00:46:26,125:INFO:_display_container: 2
2025-02-20 00:46:26,125:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 00:46:26,125:INFO:create_model() successfully completed......................................
2025-02-20 00:46:26,312:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:26,312:INFO:Creating metrics dataframe
2025-02-20 00:46:26,327:INFO:Initializing Ada Boost Classifier
2025-02-20 00:46:26,327:INFO:Total runtime is 0.08261746168136597 minutes
2025-02-20 00:46:26,328:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:26,328:INFO:Initializing create_model()
2025-02-20 00:46:26,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:26,328:INFO:Checking exceptions
2025-02-20 00:46:26,328:INFO:Importing libraries
2025-02-20 00:46:26,328:INFO:Copying training dataset
2025-02-20 00:46:26,336:INFO:Defining folds
2025-02-20 00:46:26,336:INFO:Declaring metric variables
2025-02-20 00:46:26,347:INFO:Importing untrained model
2025-02-20 00:46:26,348:INFO:Ada Boost Classifier Imported successfully
2025-02-20 00:46:26,354:INFO:Starting cross validation
2025-02-20 00:46:26,359:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:26,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,459:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,459:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,485:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,516:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,564:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,564:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,564:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:26,564:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:26,580:INFO:Calculating mean and std
2025-02-20 00:46:26,581:INFO:Creating metrics dataframe
2025-02-20 00:46:26,581:INFO:Uploading results into container
2025-02-20 00:46:26,581:INFO:Uploading model into container now
2025-02-20 00:46:26,581:INFO:_master_model_container: 9
2025-02-20 00:46:26,581:INFO:_display_container: 2
2025-02-20 00:46:26,581:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=984)
2025-02-20 00:46:26,581:INFO:create_model() successfully completed......................................
2025-02-20 00:46:26,757:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:26,757:INFO:Creating metrics dataframe
2025-02-20 00:46:26,776:INFO:Initializing Gradient Boosting Classifier
2025-02-20 00:46:26,776:INFO:Total runtime is 0.09010936021804809 minutes
2025-02-20 00:46:26,776:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:26,776:INFO:Initializing create_model()
2025-02-20 00:46:26,776:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:26,776:INFO:Checking exceptions
2025-02-20 00:46:26,776:INFO:Importing libraries
2025-02-20 00:46:26,776:INFO:Copying training dataset
2025-02-20 00:46:26,781:INFO:Defining folds
2025-02-20 00:46:26,781:INFO:Declaring metric variables
2025-02-20 00:46:26,786:INFO:Importing untrained model
2025-02-20 00:46:26,786:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 00:46:26,795:INFO:Starting cross validation
2025-02-20 00:46:26,798:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:27,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,455:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,471:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,503:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,534:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,565:INFO:Calculating mean and std
2025-02-20 00:46:27,567:INFO:Creating metrics dataframe
2025-02-20 00:46:27,567:INFO:Uploading results into container
2025-02-20 00:46:27,567:INFO:Uploading model into container now
2025-02-20 00:46:27,567:INFO:_master_model_container: 10
2025-02-20 00:46:27,567:INFO:_display_container: 2
2025-02-20 00:46:27,567:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=984, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 00:46:27,567:INFO:create_model() successfully completed......................................
2025-02-20 00:46:27,744:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:27,744:INFO:Creating metrics dataframe
2025-02-20 00:46:27,748:INFO:Initializing Linear Discriminant Analysis
2025-02-20 00:46:27,748:INFO:Total runtime is 0.10630911191304525 minutes
2025-02-20 00:46:27,758:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:27,759:INFO:Initializing create_model()
2025-02-20 00:46:27,759:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:27,760:INFO:Checking exceptions
2025-02-20 00:46:27,760:INFO:Importing libraries
2025-02-20 00:46:27,760:INFO:Copying training dataset
2025-02-20 00:46:27,760:INFO:Defining folds
2025-02-20 00:46:27,760:INFO:Declaring metric variables
2025-02-20 00:46:27,767:INFO:Importing untrained model
2025-02-20 00:46:27,770:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 00:46:27,777:INFO:Starting cross validation
2025-02-20 00:46:27,777:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:27,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,911:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,942:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:27,989:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,005:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,007:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,037:INFO:Calculating mean and std
2025-02-20 00:46:28,037:INFO:Creating metrics dataframe
2025-02-20 00:46:28,037:INFO:Uploading results into container
2025-02-20 00:46:28,037:INFO:Uploading model into container now
2025-02-20 00:46:28,037:INFO:_master_model_container: 11
2025-02-20 00:46:28,037:INFO:_display_container: 2
2025-02-20 00:46:28,037:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 00:46:28,037:INFO:create_model() successfully completed......................................
2025-02-20 00:46:28,213:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:28,213:INFO:Creating metrics dataframe
2025-02-20 00:46:28,213:INFO:Initializing Extra Trees Classifier
2025-02-20 00:46:28,213:INFO:Total runtime is 0.11405236721038818 minutes
2025-02-20 00:46:28,227:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:28,227:INFO:Initializing create_model()
2025-02-20 00:46:28,227:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:28,227:INFO:Checking exceptions
2025-02-20 00:46:28,227:INFO:Importing libraries
2025-02-20 00:46:28,227:INFO:Copying training dataset
2025-02-20 00:46:28,232:INFO:Defining folds
2025-02-20 00:46:28,232:INFO:Declaring metric variables
2025-02-20 00:46:28,232:INFO:Importing untrained model
2025-02-20 00:46:28,241:INFO:Extra Trees Classifier Imported successfully
2025-02-20 00:46:28,246:INFO:Starting cross validation
2025-02-20 00:46:28,250:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:28,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,682:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,682:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,688:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,688:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,688:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,688:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,703:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,703:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,709:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,709:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,716:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,761:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:28,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:28,863:INFO:Calculating mean and std
2025-02-20 00:46:28,864:INFO:Creating metrics dataframe
2025-02-20 00:46:28,864:INFO:Uploading results into container
2025-02-20 00:46:28,868:INFO:Uploading model into container now
2025-02-20 00:46:28,868:INFO:_master_model_container: 12
2025-02-20 00:46:28,868:INFO:_display_container: 2
2025-02-20 00:46:28,869:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=984, verbose=0,
                     warm_start=False)
2025-02-20 00:46:28,869:INFO:create_model() successfully completed......................................
2025-02-20 00:46:29,029:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:29,029:INFO:Creating metrics dataframe
2025-02-20 00:46:29,047:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 00:46:29,047:INFO:Total runtime is 0.12796286741892496 minutes
2025-02-20 00:46:29,047:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:29,047:INFO:Initializing create_model()
2025-02-20 00:46:29,047:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:29,047:INFO:Checking exceptions
2025-02-20 00:46:29,047:INFO:Importing libraries
2025-02-20 00:46:29,047:INFO:Copying training dataset
2025-02-20 00:46:29,061:INFO:Defining folds
2025-02-20 00:46:29,061:INFO:Declaring metric variables
2025-02-20 00:46:29,064:INFO:Importing untrained model
2025-02-20 00:46:29,067:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 00:46:29,067:INFO:Starting cross validation
2025-02-20 00:46:29,075:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:29,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,701:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,732:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,764:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,795:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,795:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,795:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,810:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,813:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:29,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:29,833:INFO:Calculating mean and std
2025-02-20 00:46:29,833:INFO:Creating metrics dataframe
2025-02-20 00:46:29,833:INFO:Uploading results into container
2025-02-20 00:46:29,833:INFO:Uploading model into container now
2025-02-20 00:46:29,833:INFO:_master_model_container: 13
2025-02-20 00:46:29,833:INFO:_display_container: 2
2025-02-20 00:46:29,833:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=984, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 00:46:29,833:INFO:create_model() successfully completed......................................
2025-02-20 00:46:30,034:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:30,034:INFO:Creating metrics dataframe
2025-02-20 00:46:30,034:INFO:Initializing Dummy Classifier
2025-02-20 00:46:30,034:INFO:Total runtime is 0.14439711968104044 minutes
2025-02-20 00:46:30,049:INFO:SubProcess create_model() called ==================================
2025-02-20 00:46:30,049:INFO:Initializing create_model()
2025-02-20 00:46:30,049:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3A21480>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:30,049:INFO:Checking exceptions
2025-02-20 00:46:30,049:INFO:Importing libraries
2025-02-20 00:46:30,049:INFO:Copying training dataset
2025-02-20 00:46:30,052:INFO:Defining folds
2025-02-20 00:46:30,052:INFO:Declaring metric variables
2025-02-20 00:46:30,052:INFO:Importing untrained model
2025-02-20 00:46:30,052:INFO:Dummy Classifier Imported successfully
2025-02-20 00:46:30,065:INFO:Starting cross validation
2025-02-20 00:46:30,065:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 00:46:30,189:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,189:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,189:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,205:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,236:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,248:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,252:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,282:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,297:INFO:Calculating mean and std
2025-02-20 00:46:30,298:INFO:Creating metrics dataframe
2025-02-20 00:46:30,300:INFO:Uploading results into container
2025-02-20 00:46:30,300:INFO:Uploading model into container now
2025-02-20 00:46:30,300:INFO:_master_model_container: 14
2025-02-20 00:46:30,300:INFO:_display_container: 2
2025-02-20 00:46:30,300:INFO:DummyClassifier(constant=None, random_state=984, strategy='prior')
2025-02-20 00:46:30,300:INFO:create_model() successfully completed......................................
2025-02-20 00:46:30,483:INFO:SubProcess create_model() end ==================================
2025-02-20 00:46:30,483:INFO:Creating metrics dataframe
2025-02-20 00:46:30,498:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 00:46:30,503:INFO:Initializing create_model()
2025-02-20 00:46:30,503:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 00:46:30,503:INFO:Checking exceptions
2025-02-20 00:46:30,503:INFO:Importing libraries
2025-02-20 00:46:30,503:INFO:Copying training dataset
2025-02-20 00:46:30,503:INFO:Defining folds
2025-02-20 00:46:30,503:INFO:Declaring metric variables
2025-02-20 00:46:30,503:INFO:Importing untrained model
2025-02-20 00:46:30,503:INFO:Declaring custom model
2025-02-20 00:46:30,513:INFO:Naive Bayes Imported successfully
2025-02-20 00:46:30,515:INFO:Cross validation set to False
2025-02-20 00:46:30,515:INFO:Fitting Model
2025-02-20 00:46:30,567:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:46:30,567:INFO:create_model() successfully completed......................................
2025-02-20 00:46:30,805:INFO:_master_model_container: 14
2025-02-20 00:46:30,805:INFO:_display_container: 2
2025-02-20 00:46:30,805:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 00:46:30,805:INFO:compare_models() successfully completed......................................
2025-02-20 00:46:30,870:INFO:Initializing predict_model()
2025-02-20 00:46:30,870:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB36B3880>)
2025-02-20 00:46:30,870:INFO:Checking exceptions
2025-02-20 00:46:30,870:INFO:Preloading libraries
2025-02-20 00:46:30,874:INFO:Set up data.
2025-02-20 00:46:30,874:INFO:Set up index.
2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,935:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 00:46:30,948:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 00:46:30,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 00:46:30,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 00:46:30,949:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 00:46:31,200:INFO:Initializing save_model()
2025-02-20 00:46:31,200:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 00:46:31,200:INFO:Adding model into prep_pipe
2025-02-20 00:46:31,216:INFO:LDA.pkl saved in current working directory
2025-02-20 00:46:31,233:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 00:46:31,233:INFO:save_model() successfully completed......................................
2025-02-20 00:46:31,474:INFO:Initializing load_model()
2025-02-20 00:46:31,475:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 00:46:31,600:INFO:Initializing predict_model()
2025-02-20 00:46:31,602:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2A81BA0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB0D037F0>)
2025-02-20 00:46:31,602:INFO:Checking exceptions
2025-02-20 00:46:31,603:INFO:Preloading libraries
2025-02-20 00:46:31,605:INFO:Set up data.
2025-02-20 00:46:31,609:INFO:Set up index.
2025-02-20 01:31:41,907:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:31:41,907:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:31:41,907:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:31:41,907:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 01:31:42,616:INFO:PyCaret ClassificationExperiment
2025-02-20 01:31:42,616:INFO:Logging name: clf-default-name
2025-02-20 01:31:42,616:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:31:42,616:INFO:version 3.3.2
2025-02-20 01:31:42,616:INFO:Initializing setup()
2025-02-20 01:31:42,616:INFO:self.USI: 459b
2025-02-20 01:31:42,616:INFO:self._variable_keys: {'exp_id', 'X', 'log_plots_param', 'USI', 'gpu_param', 'pipeline', '_ml_usecase', 'y_train', 'memory', 'seed', '_available_plots', 'fix_imbalance', 'fold_groups_param', 'y', 'data', 'n_jobs_param', 'X_train', 'X_test', 'idx', 'fold_generator', 'is_multiclass', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'target_param', 'y_test', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 01:31:42,616:INFO:Checking environment
2025-02-20 01:31:42,616:INFO:python_version: 3.10.14
2025-02-20 01:31:42,616:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:31:42,616:INFO:machine: AMD64
2025-02-20 01:31:42,616:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:31:42,631:INFO:Memory: svmem(total=16423702528, available=4203507712, percent=74.4, used=12220194816, free=4203507712)
2025-02-20 01:31:42,631:INFO:Physical Core: 8
2025-02-20 01:31:42,631:INFO:Logical Core: 16
2025-02-20 01:31:42,631:INFO:Checking libraries
2025-02-20 01:31:42,631:INFO:System:
2025-02-20 01:31:42,631:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:31:42,631:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:31:42,631:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:31:42,631:INFO:PyCaret required dependencies:
2025-02-20 01:31:42,663:INFO:                 pip: 25.0
2025-02-20 01:31:42,663:INFO:          setuptools: 75.8.0
2025-02-20 01:31:42,663:INFO:             pycaret: 3.3.2
2025-02-20 01:31:42,663:INFO:             IPython: 8.32.0
2025-02-20 01:31:42,663:INFO:          ipywidgets: 8.1.5
2025-02-20 01:31:42,663:INFO:                tqdm: 4.67.1
2025-02-20 01:31:42,663:INFO:               numpy: 1.26.4
2025-02-20 01:31:42,663:INFO:              pandas: 2.1.4
2025-02-20 01:31:42,663:INFO:              jinja2: 3.1.5
2025-02-20 01:31:42,663:INFO:               scipy: 1.11.4
2025-02-20 01:31:42,663:INFO:              joblib: 1.3.2
2025-02-20 01:31:42,663:INFO:             sklearn: 1.4.2
2025-02-20 01:31:42,663:INFO:                pyod: 2.0.3
2025-02-20 01:31:42,663:INFO:            imblearn: 0.13.0
2025-02-20 01:31:42,663:INFO:   category_encoders: 2.7.0
2025-02-20 01:31:42,663:INFO:            lightgbm: 4.6.0
2025-02-20 01:31:42,663:INFO:               numba: 0.61.0
2025-02-20 01:31:42,663:INFO:            requests: 2.32.3
2025-02-20 01:31:42,663:INFO:          matplotlib: 3.7.5
2025-02-20 01:31:42,663:INFO:          scikitplot: 0.3.7
2025-02-20 01:31:42,663:INFO:         yellowbrick: 1.5
2025-02-20 01:31:42,663:INFO:              plotly: 5.24.1
2025-02-20 01:31:42,663:INFO:    plotly-resampler: Not installed
2025-02-20 01:31:42,663:INFO:             kaleido: 0.2.1
2025-02-20 01:31:42,663:INFO:           schemdraw: 0.15
2025-02-20 01:31:42,663:INFO:         statsmodels: 0.14.4
2025-02-20 01:31:42,663:INFO:              sktime: 0.26.0
2025-02-20 01:31:42,663:INFO:               tbats: 1.1.3
2025-02-20 01:31:42,663:INFO:            pmdarima: 2.0.4
2025-02-20 01:31:42,663:INFO:              psutil: 7.0.0
2025-02-20 01:31:42,663:INFO:          markupsafe: 3.0.2
2025-02-20 01:31:42,663:INFO:             pickle5: Not installed
2025-02-20 01:31:42,663:INFO:         cloudpickle: 3.1.1
2025-02-20 01:31:42,663:INFO:         deprecation: 2.1.0
2025-02-20 01:31:42,663:INFO:              xxhash: 3.5.0
2025-02-20 01:31:42,663:INFO:           wurlitzer: Not installed
2025-02-20 01:31:42,663:INFO:PyCaret optional dependencies:
2025-02-20 01:31:42,679:INFO:                shap: Not installed
2025-02-20 01:31:42,679:INFO:           interpret: Not installed
2025-02-20 01:31:42,679:INFO:                umap: Not installed
2025-02-20 01:31:42,679:INFO:     ydata_profiling: Not installed
2025-02-20 01:31:42,679:INFO:  explainerdashboard: Not installed
2025-02-20 01:31:42,679:INFO:             autoviz: Not installed
2025-02-20 01:31:42,679:INFO:           fairlearn: Not installed
2025-02-20 01:31:42,679:INFO:          deepchecks: Not installed
2025-02-20 01:31:42,679:INFO:             xgboost: Not installed
2025-02-20 01:31:42,679:INFO:            catboost: Not installed
2025-02-20 01:31:42,679:INFO:              kmodes: Not installed
2025-02-20 01:31:42,679:INFO:             mlxtend: Not installed
2025-02-20 01:31:42,679:INFO:       statsforecast: Not installed
2025-02-20 01:31:42,679:INFO:        tune_sklearn: Not installed
2025-02-20 01:31:42,679:INFO:                 ray: Not installed
2025-02-20 01:31:42,679:INFO:            hyperopt: Not installed
2025-02-20 01:31:42,679:INFO:              optuna: Not installed
2025-02-20 01:31:42,679:INFO:               skopt: Not installed
2025-02-20 01:31:42,679:INFO:              mlflow: Not installed
2025-02-20 01:31:42,679:INFO:              gradio: Not installed
2025-02-20 01:31:42,679:INFO:             fastapi: Not installed
2025-02-20 01:31:42,679:INFO:             uvicorn: Not installed
2025-02-20 01:31:42,679:INFO:              m2cgen: Not installed
2025-02-20 01:31:42,679:INFO:           evidently: Not installed
2025-02-20 01:31:42,679:INFO:               fugue: Not installed
2025-02-20 01:31:42,679:INFO:           streamlit: Not installed
2025-02-20 01:31:42,679:INFO:             prophet: Not installed
2025-02-20 01:31:42,679:INFO:None
2025-02-20 01:31:42,679:INFO:Set up data.
2025-02-20 01:31:42,695:INFO:Set up folding strategy.
2025-02-20 01:31:42,695:INFO:Set up train/test split.
2025-02-20 01:31:42,727:INFO:Set up index.
2025-02-20 01:31:42,727:INFO:Assigning column types.
2025-02-20 01:31:42,727:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:31:42,782:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:31:42,798:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:31:42,844:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:42,844:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:42,899:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:31:42,899:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:31:42,946:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:42,946:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:42,947:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:31:42,987:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:31:43,018:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,018:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,084:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:31:43,112:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,112:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,112:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:31:43,200:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,200:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,387:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,387:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,396:INFO:Preparing preprocessing pipeline...
2025-02-20 01:31:43,396:INFO:Set up simple imputation.
2025-02-20 01:31:43,396:INFO:Set up encoding of categorical features.
2025-02-20 01:31:43,396:INFO:Set up feature normalization.
2025-02-20 01:31:43,515:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:31:43,547:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=na...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False)
2025-02-20 01:31:43,547:INFO:Creating final display dataframe.
2025-02-20 01:31:43,840:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape         (7043, 8)
4        Transformed data shape         (7043, 8)
5   Transformed train set shape         (4930, 8)
6    Transformed test set shape         (2113, 8)
7              Numeric features                 6
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15                    Normalize              True
16             Normalize method            zscore
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              459b
2025-02-20 01:31:43,949:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:43,949:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:44,031:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:44,031:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:31:44,047:INFO:setup() successfully completed in 1.45s...............
2025-02-20 01:31:44,047:INFO:Initializing compare_models()
2025-02-20 01:31:44,047:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:31:44,047:INFO:Checking exceptions
2025-02-20 01:31:44,070:INFO:Preparing display monitor
2025-02-20 01:31:44,104:INFO:Initializing Logistic Regression
2025-02-20 01:31:44,104:INFO:Total runtime is 0.0 minutes
2025-02-20 01:31:44,115:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:44,115:INFO:Initializing create_model()
2025-02-20 01:31:44,115:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:44,115:INFO:Checking exceptions
2025-02-20 01:31:44,115:INFO:Importing libraries
2025-02-20 01:31:44,115:INFO:Copying training dataset
2025-02-20 01:31:44,120:INFO:Defining folds
2025-02-20 01:31:44,120:INFO:Declaring metric variables
2025-02-20 01:31:44,128:INFO:Importing untrained model
2025-02-20 01:31:44,139:INFO:Logistic Regression Imported successfully
2025-02-20 01:31:44,151:INFO:Starting cross validation
2025-02-20 01:31:44,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:49,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,065:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,070:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,081:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,096:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,128:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,187:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,214:INFO:Calculating mean and std
2025-02-20 01:31:49,216:INFO:Creating metrics dataframe
2025-02-20 01:31:49,219:INFO:Uploading results into container
2025-02-20 01:31:49,220:INFO:Uploading model into container now
2025-02-20 01:31:49,220:INFO:_master_model_container: 1
2025-02-20 01:31:49,220:INFO:_display_container: 2
2025-02-20 01:31:49,220:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:31:49,220:INFO:create_model() successfully completed......................................
2025-02-20 01:31:49,328:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:49,328:INFO:Creating metrics dataframe
2025-02-20 01:31:49,328:INFO:Initializing K Neighbors Classifier
2025-02-20 01:31:49,328:INFO:Total runtime is 0.0870648185412089 minutes
2025-02-20 01:31:49,328:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:49,328:INFO:Initializing create_model()
2025-02-20 01:31:49,328:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:49,328:INFO:Checking exceptions
2025-02-20 01:31:49,328:INFO:Importing libraries
2025-02-20 01:31:49,328:INFO:Copying training dataset
2025-02-20 01:31:49,344:INFO:Defining folds
2025-02-20 01:31:49,344:INFO:Declaring metric variables
2025-02-20 01:31:49,353:INFO:Importing untrained model
2025-02-20 01:31:49,353:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:31:49,370:INFO:Starting cross validation
2025-02-20 01:31:49,373:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:49,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:49,675:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,521:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,521:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,521:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,542:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,558:INFO:Calculating mean and std
2025-02-20 01:31:52,558:INFO:Creating metrics dataframe
2025-02-20 01:31:52,566:INFO:Uploading results into container
2025-02-20 01:31:52,568:INFO:Uploading model into container now
2025-02-20 01:31:52,569:INFO:_master_model_container: 2
2025-02-20 01:31:52,569:INFO:_display_container: 2
2025-02-20 01:31:52,570:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:31:52,570:INFO:create_model() successfully completed......................................
2025-02-20 01:31:52,683:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:52,683:INFO:Creating metrics dataframe
2025-02-20 01:31:52,691:INFO:Initializing Naive Bayes
2025-02-20 01:31:52,691:INFO:Total runtime is 0.1431048631668091 minutes
2025-02-20 01:31:52,702:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:52,702:INFO:Initializing create_model()
2025-02-20 01:31:52,702:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:52,702:INFO:Checking exceptions
2025-02-20 01:31:52,702:INFO:Importing libraries
2025-02-20 01:31:52,702:INFO:Copying training dataset
2025-02-20 01:31:52,704:INFO:Defining folds
2025-02-20 01:31:52,704:INFO:Declaring metric variables
2025-02-20 01:31:52,720:INFO:Importing untrained model
2025-02-20 01:31:52,722:INFO:Naive Bayes Imported successfully
2025-02-20 01:31:52,736:INFO:Starting cross validation
2025-02-20 01:31:52,739:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:52,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,904:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,907:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,907:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,907:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:52,933:INFO:Calculating mean and std
2025-02-20 01:31:52,934:INFO:Creating metrics dataframe
2025-02-20 01:31:52,936:INFO:Uploading results into container
2025-02-20 01:31:52,938:INFO:Uploading model into container now
2025-02-20 01:31:52,938:INFO:_master_model_container: 3
2025-02-20 01:31:52,938:INFO:_display_container: 2
2025-02-20 01:31:52,938:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:31:52,938:INFO:create_model() successfully completed......................................
2025-02-20 01:31:53,055:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:53,055:INFO:Creating metrics dataframe
2025-02-20 01:31:53,065:INFO:Initializing Decision Tree Classifier
2025-02-20 01:31:53,066:INFO:Total runtime is 0.14935977458953859 minutes
2025-02-20 01:31:53,073:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:53,074:INFO:Initializing create_model()
2025-02-20 01:31:53,074:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:53,074:INFO:Checking exceptions
2025-02-20 01:31:53,074:INFO:Importing libraries
2025-02-20 01:31:53,074:INFO:Copying training dataset
2025-02-20 01:31:53,074:INFO:Defining folds
2025-02-20 01:31:53,074:INFO:Declaring metric variables
2025-02-20 01:31:53,088:INFO:Importing untrained model
2025-02-20 01:31:53,094:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:31:53,105:INFO:Starting cross validation
2025-02-20 01:31:53,106:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:53,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,332:INFO:Calculating mean and std
2025-02-20 01:31:53,334:INFO:Creating metrics dataframe
2025-02-20 01:31:53,334:INFO:Uploading results into container
2025-02-20 01:31:53,334:INFO:Uploading model into container now
2025-02-20 01:31:53,334:INFO:_master_model_container: 4
2025-02-20 01:31:53,334:INFO:_display_container: 2
2025-02-20 01:31:53,334:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 01:31:53,334:INFO:create_model() successfully completed......................................
2025-02-20 01:31:53,449:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:53,449:INFO:Creating metrics dataframe
2025-02-20 01:31:53,459:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:31:53,459:INFO:Total runtime is 0.1559184988339742 minutes
2025-02-20 01:31:53,466:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:53,468:INFO:Initializing create_model()
2025-02-20 01:31:53,468:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:53,468:INFO:Checking exceptions
2025-02-20 01:31:53,469:INFO:Importing libraries
2025-02-20 01:31:53,469:INFO:Copying training dataset
2025-02-20 01:31:53,469:INFO:Defining folds
2025-02-20 01:31:53,469:INFO:Declaring metric variables
2025-02-20 01:31:53,469:INFO:Importing untrained model
2025-02-20 01:31:53,483:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:31:53,498:INFO:Starting cross validation
2025-02-20 01:31:53,499:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:53,651:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,697:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:53,712:INFO:Calculating mean and std
2025-02-20 01:31:53,712:INFO:Creating metrics dataframe
2025-02-20 01:31:53,716:INFO:Uploading results into container
2025-02-20 01:31:53,717:INFO:Uploading model into container now
2025-02-20 01:31:53,717:INFO:_master_model_container: 5
2025-02-20 01:31:53,717:INFO:_display_container: 2
2025-02-20 01:31:53,717:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:31:53,717:INFO:create_model() successfully completed......................................
2025-02-20 01:31:53,833:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:53,833:INFO:Creating metrics dataframe
2025-02-20 01:31:53,834:INFO:Initializing Ridge Classifier
2025-02-20 01:31:53,834:INFO:Total runtime is 0.16216522057851157 minutes
2025-02-20 01:31:53,846:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:53,849:INFO:Initializing create_model()
2025-02-20 01:31:53,849:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:53,851:INFO:Checking exceptions
2025-02-20 01:31:53,851:INFO:Importing libraries
2025-02-20 01:31:53,851:INFO:Copying training dataset
2025-02-20 01:31:53,851:INFO:Defining folds
2025-02-20 01:31:53,851:INFO:Declaring metric variables
2025-02-20 01:31:53,862:INFO:Importing untrained model
2025-02-20 01:31:53,866:INFO:Ridge Classifier Imported successfully
2025-02-20 01:31:53,870:INFO:Starting cross validation
2025-02-20 01:31:53,870:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:54,010:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,018:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,018:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,018:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,018:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,034:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,049:INFO:Calculating mean and std
2025-02-20 01:31:54,052:INFO:Creating metrics dataframe
2025-02-20 01:31:54,052:INFO:Uploading results into container
2025-02-20 01:31:54,052:INFO:Uploading model into container now
2025-02-20 01:31:54,052:INFO:_master_model_container: 6
2025-02-20 01:31:54,052:INFO:_display_container: 2
2025-02-20 01:31:54,052:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 01:31:54,052:INFO:create_model() successfully completed......................................
2025-02-20 01:31:54,166:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:54,166:INFO:Creating metrics dataframe
2025-02-20 01:31:54,177:INFO:Initializing Random Forest Classifier
2025-02-20 01:31:54,177:INFO:Total runtime is 0.1678751309712728 minutes
2025-02-20 01:31:54,179:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:54,179:INFO:Initializing create_model()
2025-02-20 01:31:54,179:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:54,179:INFO:Checking exceptions
2025-02-20 01:31:54,179:INFO:Importing libraries
2025-02-20 01:31:54,179:INFO:Copying training dataset
2025-02-20 01:31:54,184:INFO:Defining folds
2025-02-20 01:31:54,184:INFO:Declaring metric variables
2025-02-20 01:31:54,193:INFO:Importing untrained model
2025-02-20 01:31:54,199:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:31:54,204:INFO:Starting cross validation
2025-02-20 01:31:54,204:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,751:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,770:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,770:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:54,799:INFO:Calculating mean and std
2025-02-20 01:31:54,801:INFO:Creating metrics dataframe
2025-02-20 01:31:54,801:INFO:Uploading results into container
2025-02-20 01:31:54,801:INFO:Uploading model into container now
2025-02-20 01:31:54,801:INFO:_master_model_container: 7
2025-02-20 01:31:54,801:INFO:_display_container: 2
2025-02-20 01:31:54,801:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 01:31:54,801:INFO:create_model() successfully completed......................................
2025-02-20 01:31:54,896:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:54,912:INFO:Creating metrics dataframe
2025-02-20 01:31:54,920:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:31:54,920:INFO:Total runtime is 0.18026267687479655 minutes
2025-02-20 01:31:54,928:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:54,928:INFO:Initializing create_model()
2025-02-20 01:31:54,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:54,928:INFO:Checking exceptions
2025-02-20 01:31:54,928:INFO:Importing libraries
2025-02-20 01:31:54,928:INFO:Copying training dataset
2025-02-20 01:31:54,933:INFO:Defining folds
2025-02-20 01:31:54,933:INFO:Declaring metric variables
2025-02-20 01:31:54,933:INFO:Importing untrained model
2025-02-20 01:31:54,944:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:31:54,960:INFO:Starting cross validation
2025-02-20 01:31:54,960:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:55,057:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,064:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,085:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,101:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,132:INFO:Calculating mean and std
2025-02-20 01:31:55,134:INFO:Creating metrics dataframe
2025-02-20 01:31:55,134:INFO:Uploading results into container
2025-02-20 01:31:55,134:INFO:Uploading model into container now
2025-02-20 01:31:55,134:INFO:_master_model_container: 8
2025-02-20 01:31:55,134:INFO:_display_container: 2
2025-02-20 01:31:55,134:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:31:55,134:INFO:create_model() successfully completed......................................
2025-02-20 01:31:55,246:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:55,250:INFO:Creating metrics dataframe
2025-02-20 01:31:55,255:INFO:Initializing Ada Boost Classifier
2025-02-20 01:31:55,255:INFO:Total runtime is 0.18584567308425903 minutes
2025-02-20 01:31:55,266:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:55,266:INFO:Initializing create_model()
2025-02-20 01:31:55,266:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:55,266:INFO:Checking exceptions
2025-02-20 01:31:55,266:INFO:Importing libraries
2025-02-20 01:31:55,268:INFO:Copying training dataset
2025-02-20 01:31:55,273:INFO:Defining folds
2025-02-20 01:31:55,273:INFO:Declaring metric variables
2025-02-20 01:31:55,273:INFO:Importing untrained model
2025-02-20 01:31:55,286:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:31:55,291:INFO:Starting cross validation
2025-02-20 01:31:55,291:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:55,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,421:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,424:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:31:55,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,477:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,483:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,493:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,493:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,493:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:55,533:INFO:Calculating mean and std
2025-02-20 01:31:55,534:INFO:Creating metrics dataframe
2025-02-20 01:31:55,534:INFO:Uploading results into container
2025-02-20 01:31:55,534:INFO:Uploading model into container now
2025-02-20 01:31:55,534:INFO:_master_model_container: 9
2025-02-20 01:31:55,534:INFO:_display_container: 2
2025-02-20 01:31:55,534:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 01:31:55,534:INFO:create_model() successfully completed......................................
2025-02-20 01:31:55,651:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:55,651:INFO:Creating metrics dataframe
2025-02-20 01:31:55,660:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:31:55,660:INFO:Total runtime is 0.19259477456410726 minutes
2025-02-20 01:31:55,668:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:55,668:INFO:Initializing create_model()
2025-02-20 01:31:55,668:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:55,668:INFO:Checking exceptions
2025-02-20 01:31:55,668:INFO:Importing libraries
2025-02-20 01:31:55,668:INFO:Copying training dataset
2025-02-20 01:31:55,676:INFO:Defining folds
2025-02-20 01:31:55,676:INFO:Declaring metric variables
2025-02-20 01:31:55,684:INFO:Importing untrained model
2025-02-20 01:31:55,689:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:31:55,689:INFO:Starting cross validation
2025-02-20 01:31:55,699:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:56,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,295:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,295:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,326:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,326:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,326:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,356:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,373:INFO:Calculating mean and std
2025-02-20 01:31:56,373:INFO:Creating metrics dataframe
2025-02-20 01:31:56,373:INFO:Uploading results into container
2025-02-20 01:31:56,373:INFO:Uploading model into container now
2025-02-20 01:31:56,373:INFO:_master_model_container: 10
2025-02-20 01:31:56,373:INFO:_display_container: 2
2025-02-20 01:31:56,373:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:31:56,380:INFO:create_model() successfully completed......................................
2025-02-20 01:31:56,501:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:56,501:INFO:Creating metrics dataframe
2025-02-20 01:31:56,501:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:31:56,501:INFO:Total runtime is 0.2066124121348063 minutes
2025-02-20 01:31:56,517:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:56,517:INFO:Initializing create_model()
2025-02-20 01:31:56,517:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:56,517:INFO:Checking exceptions
2025-02-20 01:31:56,517:INFO:Importing libraries
2025-02-20 01:31:56,517:INFO:Copying training dataset
2025-02-20 01:31:56,532:INFO:Defining folds
2025-02-20 01:31:56,532:INFO:Declaring metric variables
2025-02-20 01:31:56,541:INFO:Importing untrained model
2025-02-20 01:31:56,542:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:31:56,555:INFO:Starting cross validation
2025-02-20 01:31:56,555:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:56,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,741:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,741:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,741:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,748:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,752:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:56,768:INFO:Calculating mean and std
2025-02-20 01:31:56,768:INFO:Creating metrics dataframe
2025-02-20 01:31:56,772:INFO:Uploading results into container
2025-02-20 01:31:56,773:INFO:Uploading model into container now
2025-02-20 01:31:56,773:INFO:_master_model_container: 11
2025-02-20 01:31:56,773:INFO:_display_container: 2
2025-02-20 01:31:56,773:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:31:56,773:INFO:create_model() successfully completed......................................
2025-02-20 01:31:56,889:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:56,889:INFO:Creating metrics dataframe
2025-02-20 01:31:56,900:INFO:Initializing Extra Trees Classifier
2025-02-20 01:31:56,902:INFO:Total runtime is 0.21328735351562497 minutes
2025-02-20 01:31:56,907:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:56,907:INFO:Initializing create_model()
2025-02-20 01:31:56,907:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:56,907:INFO:Checking exceptions
2025-02-20 01:31:56,907:INFO:Importing libraries
2025-02-20 01:31:56,907:INFO:Copying training dataset
2025-02-20 01:31:56,907:INFO:Defining folds
2025-02-20 01:31:56,907:INFO:Declaring metric variables
2025-02-20 01:31:56,919:INFO:Importing untrained model
2025-02-20 01:31:56,924:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:31:56,933:INFO:Starting cross validation
2025-02-20 01:31:56,938:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:57,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,406:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,456:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:57,481:INFO:Calculating mean and std
2025-02-20 01:31:57,484:INFO:Creating metrics dataframe
2025-02-20 01:31:57,484:INFO:Uploading results into container
2025-02-20 01:31:57,484:INFO:Uploading model into container now
2025-02-20 01:31:57,484:INFO:_master_model_container: 12
2025-02-20 01:31:57,484:INFO:_display_container: 2
2025-02-20 01:31:57,484:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 01:31:57,484:INFO:create_model() successfully completed......................................
2025-02-20 01:31:57,606:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:57,606:INFO:Creating metrics dataframe
2025-02-20 01:31:57,621:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:31:57,621:INFO:Total runtime is 0.22527118126551307 minutes
2025-02-20 01:31:57,623:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:57,623:INFO:Initializing create_model()
2025-02-20 01:31:57,623:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:57,623:INFO:Checking exceptions
2025-02-20 01:31:57,623:INFO:Importing libraries
2025-02-20 01:31:57,623:INFO:Copying training dataset
2025-02-20 01:31:57,635:INFO:Defining folds
2025-02-20 01:31:57,635:INFO:Declaring metric variables
2025-02-20 01:31:57,639:INFO:Importing untrained model
2025-02-20 01:31:57,639:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:31:57,660:INFO:Starting cross validation
2025-02-20 01:31:57,660:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:58,966:INFO:Calculating mean and std
2025-02-20 01:31:58,968:INFO:Creating metrics dataframe
2025-02-20 01:31:58,972:INFO:Uploading results into container
2025-02-20 01:31:58,973:INFO:Uploading model into container now
2025-02-20 01:31:58,974:INFO:_master_model_container: 13
2025-02-20 01:31:58,974:INFO:_display_container: 2
2025-02-20 01:31:58,974:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:31:58,974:INFO:create_model() successfully completed......................................
2025-02-20 01:31:59,094:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:59,094:INFO:Creating metrics dataframe
2025-02-20 01:31:59,109:INFO:Initializing Dummy Classifier
2025-02-20 01:31:59,109:INFO:Total runtime is 0.250083311398824 minutes
2025-02-20 01:31:59,109:INFO:SubProcess create_model() called ==================================
2025-02-20 01:31:59,109:INFO:Initializing create_model()
2025-02-20 01:31:59,109:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C790C213C0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:59,109:INFO:Checking exceptions
2025-02-20 01:31:59,109:INFO:Importing libraries
2025-02-20 01:31:59,125:INFO:Copying training dataset
2025-02-20 01:31:59,125:INFO:Defining folds
2025-02-20 01:31:59,125:INFO:Declaring metric variables
2025-02-20 01:31:59,125:INFO:Importing untrained model
2025-02-20 01:31:59,140:INFO:Dummy Classifier Imported successfully
2025-02-20 01:31:59,154:INFO:Starting cross validation
2025-02-20 01:31:59,154:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:31:59,285:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,285:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,301:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:31:59,332:INFO:Calculating mean and std
2025-02-20 01:31:59,332:INFO:Creating metrics dataframe
2025-02-20 01:31:59,332:INFO:Uploading results into container
2025-02-20 01:31:59,332:INFO:Uploading model into container now
2025-02-20 01:31:59,332:INFO:_master_model_container: 14
2025-02-20 01:31:59,332:INFO:_display_container: 2
2025-02-20 01:31:59,332:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 01:31:59,332:INFO:create_model() successfully completed......................................
2025-02-20 01:31:59,445:INFO:SubProcess create_model() end ==================================
2025-02-20 01:31:59,445:INFO:Creating metrics dataframe
2025-02-20 01:31:59,460:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:31:59,467:INFO:Initializing create_model()
2025-02-20 01:31:59,467:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:31:59,467:INFO:Checking exceptions
2025-02-20 01:31:59,476:INFO:Importing libraries
2025-02-20 01:31:59,476:INFO:Copying training dataset
2025-02-20 01:31:59,483:INFO:Defining folds
2025-02-20 01:31:59,483:INFO:Declaring metric variables
2025-02-20 01:31:59,484:INFO:Importing untrained model
2025-02-20 01:31:59,484:INFO:Declaring custom model
2025-02-20 01:31:59,484:INFO:Logistic Regression Imported successfully
2025-02-20 01:31:59,486:INFO:Cross validation set to False
2025-02-20 01:31:59,486:INFO:Fitting Model
2025-02-20 01:31:59,566:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:31:59,566:INFO:create_model() successfully completed......................................
2025-02-20 01:31:59,710:INFO:_master_model_container: 14
2025-02-20 01:31:59,710:INFO:_display_container: 2
2025-02-20 01:31:59,710:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:31:59,710:INFO:compare_models() successfully completed......................................
2025-02-20 01:31:59,718:INFO:Initializing save_model()
2025-02-20 01:31:59,718:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=na...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('normalize',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:31:59,718:INFO:Adding model into prep_pipe
2025-02-20 01:31:59,735:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 01:31:59,742:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'MonthlyCharges',
                                             'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('categorical_imput...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=StandardScaler(copy=True,
                                                               with_mean=True,
                                                               with_std=True))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:31:59,742:INFO:save_model() successfully completed......................................
2025-02-20 01:31:59,877:INFO:Initializing predict_model()
2025-02-20 01:31:59,877:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18C430>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C790BBB640>)
2025-02-20 01:31:59,877:INFO:Checking exceptions
2025-02-20 01:31:59,877:INFO:Preloading libraries
2025-02-20 01:31:59,877:INFO:Set up data.
2025-02-20 01:31:59,877:INFO:Set up index.
2025-02-20 01:33:35,061:INFO:PyCaret ClassificationExperiment
2025-02-20 01:33:35,063:INFO:Logging name: clf-default-name
2025-02-20 01:33:35,063:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:33:35,063:INFO:version 3.3.2
2025-02-20 01:33:35,063:INFO:Initializing setup()
2025-02-20 01:33:35,068:INFO:self.USI: 7853
2025-02-20 01:33:35,068:INFO:self._variable_keys: {'exp_id', 'X', 'log_plots_param', 'USI', 'gpu_param', 'pipeline', '_ml_usecase', 'y_train', 'memory', 'seed', '_available_plots', 'fix_imbalance', 'fold_groups_param', 'y', 'data', 'n_jobs_param', 'X_train', 'X_test', 'idx', 'fold_generator', 'is_multiclass', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'target_param', 'y_test', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 01:33:35,068:INFO:Checking environment
2025-02-20 01:33:35,070:INFO:python_version: 3.10.14
2025-02-20 01:33:35,070:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:33:35,070:INFO:machine: AMD64
2025-02-20 01:33:35,070:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:33:35,087:INFO:Memory: svmem(total=16423702528, available=2269577216, percent=86.2, used=14154125312, free=2269577216)
2025-02-20 01:33:35,087:INFO:Physical Core: 8
2025-02-20 01:33:35,087:INFO:Logical Core: 16
2025-02-20 01:33:35,087:INFO:Checking libraries
2025-02-20 01:33:35,087:INFO:System:
2025-02-20 01:33:35,087:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:33:35,087:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:33:35,087:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:33:35,087:INFO:PyCaret required dependencies:
2025-02-20 01:33:35,087:INFO:                 pip: 25.0
2025-02-20 01:33:35,087:INFO:          setuptools: 75.8.0
2025-02-20 01:33:35,087:INFO:             pycaret: 3.3.2
2025-02-20 01:33:35,087:INFO:             IPython: 8.32.0
2025-02-20 01:33:35,087:INFO:          ipywidgets: 8.1.5
2025-02-20 01:33:35,095:INFO:                tqdm: 4.67.1
2025-02-20 01:33:35,095:INFO:               numpy: 1.26.4
2025-02-20 01:33:35,095:INFO:              pandas: 2.1.4
2025-02-20 01:33:35,095:INFO:              jinja2: 3.1.5
2025-02-20 01:33:35,095:INFO:               scipy: 1.11.4
2025-02-20 01:33:35,095:INFO:              joblib: 1.3.2
2025-02-20 01:33:35,095:INFO:             sklearn: 1.4.2
2025-02-20 01:33:35,095:INFO:                pyod: 2.0.3
2025-02-20 01:33:35,095:INFO:            imblearn: 0.13.0
2025-02-20 01:33:35,095:INFO:   category_encoders: 2.7.0
2025-02-20 01:33:35,095:INFO:            lightgbm: 4.6.0
2025-02-20 01:33:35,095:INFO:               numba: 0.61.0
2025-02-20 01:33:35,095:INFO:            requests: 2.32.3
2025-02-20 01:33:35,095:INFO:          matplotlib: 3.7.5
2025-02-20 01:33:35,095:INFO:          scikitplot: 0.3.7
2025-02-20 01:33:35,095:INFO:         yellowbrick: 1.5
2025-02-20 01:33:35,095:INFO:              plotly: 5.24.1
2025-02-20 01:33:35,095:INFO:    plotly-resampler: Not installed
2025-02-20 01:33:35,095:INFO:             kaleido: 0.2.1
2025-02-20 01:33:35,095:INFO:           schemdraw: 0.15
2025-02-20 01:33:35,095:INFO:         statsmodels: 0.14.4
2025-02-20 01:33:35,095:INFO:              sktime: 0.26.0
2025-02-20 01:33:35,095:INFO:               tbats: 1.1.3
2025-02-20 01:33:35,095:INFO:            pmdarima: 2.0.4
2025-02-20 01:33:35,095:INFO:              psutil: 7.0.0
2025-02-20 01:33:35,095:INFO:          markupsafe: 3.0.2
2025-02-20 01:33:35,095:INFO:             pickle5: Not installed
2025-02-20 01:33:35,095:INFO:         cloudpickle: 3.1.1
2025-02-20 01:33:35,095:INFO:         deprecation: 2.1.0
2025-02-20 01:33:35,095:INFO:              xxhash: 3.5.0
2025-02-20 01:33:35,095:INFO:           wurlitzer: Not installed
2025-02-20 01:33:35,095:INFO:PyCaret optional dependencies:
2025-02-20 01:33:35,095:INFO:                shap: Not installed
2025-02-20 01:33:35,095:INFO:           interpret: Not installed
2025-02-20 01:33:35,095:INFO:                umap: Not installed
2025-02-20 01:33:35,095:INFO:     ydata_profiling: Not installed
2025-02-20 01:33:35,095:INFO:  explainerdashboard: Not installed
2025-02-20 01:33:35,095:INFO:             autoviz: Not installed
2025-02-20 01:33:35,095:INFO:           fairlearn: Not installed
2025-02-20 01:33:35,095:INFO:          deepchecks: Not installed
2025-02-20 01:33:35,095:INFO:             xgboost: Not installed
2025-02-20 01:33:35,095:INFO:            catboost: Not installed
2025-02-20 01:33:35,095:INFO:              kmodes: Not installed
2025-02-20 01:33:35,095:INFO:             mlxtend: Not installed
2025-02-20 01:33:35,095:INFO:       statsforecast: Not installed
2025-02-20 01:33:35,095:INFO:        tune_sklearn: Not installed
2025-02-20 01:33:35,095:INFO:                 ray: Not installed
2025-02-20 01:33:35,095:INFO:            hyperopt: Not installed
2025-02-20 01:33:35,095:INFO:              optuna: Not installed
2025-02-20 01:33:35,095:INFO:               skopt: Not installed
2025-02-20 01:33:35,095:INFO:              mlflow: Not installed
2025-02-20 01:33:35,095:INFO:              gradio: Not installed
2025-02-20 01:33:35,095:INFO:             fastapi: Not installed
2025-02-20 01:33:35,095:INFO:             uvicorn: Not installed
2025-02-20 01:33:35,095:INFO:              m2cgen: Not installed
2025-02-20 01:33:35,095:INFO:           evidently: Not installed
2025-02-20 01:33:35,095:INFO:               fugue: Not installed
2025-02-20 01:33:35,095:INFO:           streamlit: Not installed
2025-02-20 01:33:35,095:INFO:             prophet: Not installed
2025-02-20 01:33:35,095:INFO:None
2025-02-20 01:33:35,095:INFO:Set up data.
2025-02-20 01:33:35,107:INFO:Set up folding strategy.
2025-02-20 01:33:35,107:INFO:Set up train/test split.
2025-02-20 01:33:35,127:INFO:Set up index.
2025-02-20 01:33:35,127:INFO:Assigning column types.
2025-02-20 01:33:35,137:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:33:35,188:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,199:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,237:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,237:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,295:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,303:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,337:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,337:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,337:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:33:35,404:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,437:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,437:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,492:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:33:35,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,535:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,537:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:33:35,637:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,637:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,740:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,740:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:35,740:INFO:Preparing preprocessing pipeline...
2025-02-20 01:33:35,740:INFO:Set up simple imputation.
2025-02-20 01:33:35,753:INFO:Set up encoding of categorical features.
2025-02-20 01:33:35,838:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:33:35,855:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-02-20 01:33:35,855:INFO:Creating final display dataframe.
2025-02-20 01:33:36,125:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape         (7043, 9)
4        Transformed data shape         (7043, 9)
5   Transformed train set shape         (4930, 9)
6    Transformed test set shape         (2113, 9)
7              Numeric features                 7
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              7853
2025-02-20 01:33:36,225:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:36,233:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:36,333:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:36,333:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:33:36,333:INFO:setup() successfully completed in 1.28s...............
2025-02-20 01:33:36,333:INFO:Initializing compare_models()
2025-02-20 01:33:36,333:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:33:36,333:INFO:Checking exceptions
2025-02-20 01:33:36,333:INFO:Preparing display monitor
2025-02-20 01:33:36,375:INFO:Initializing Logistic Regression
2025-02-20 01:33:36,375:INFO:Total runtime is 0.0 minutes
2025-02-20 01:33:36,383:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:36,383:INFO:Initializing create_model()
2025-02-20 01:33:36,383:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:36,383:INFO:Checking exceptions
2025-02-20 01:33:36,383:INFO:Importing libraries
2025-02-20 01:33:36,383:INFO:Copying training dataset
2025-02-20 01:33:36,392:INFO:Defining folds
2025-02-20 01:33:36,392:INFO:Declaring metric variables
2025-02-20 01:33:36,400:INFO:Importing untrained model
2025-02-20 01:33:36,400:INFO:Logistic Regression Imported successfully
2025-02-20 01:33:36,416:INFO:Starting cross validation
2025-02-20 01:33:36,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:36,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,887:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,918:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:36,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:36,981:INFO:Calculating mean and std
2025-02-20 01:33:36,981:INFO:Creating metrics dataframe
2025-02-20 01:33:36,981:INFO:Uploading results into container
2025-02-20 01:33:36,981:INFO:Uploading model into container now
2025-02-20 01:33:36,981:INFO:_master_model_container: 1
2025-02-20 01:33:36,981:INFO:_display_container: 2
2025-02-20 01:33:36,981:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:33:36,981:INFO:create_model() successfully completed......................................
2025-02-20 01:33:37,133:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:37,133:INFO:Creating metrics dataframe
2025-02-20 01:33:37,133:INFO:Initializing K Neighbors Classifier
2025-02-20 01:33:37,133:INFO:Total runtime is 0.01263288656870524 minutes
2025-02-20 01:33:37,149:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:37,149:INFO:Initializing create_model()
2025-02-20 01:33:37,149:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:37,149:INFO:Checking exceptions
2025-02-20 01:33:37,153:INFO:Importing libraries
2025-02-20 01:33:37,153:INFO:Copying training dataset
2025-02-20 01:33:37,153:INFO:Defining folds
2025-02-20 01:33:37,153:INFO:Declaring metric variables
2025-02-20 01:33:37,153:INFO:Importing untrained model
2025-02-20 01:33:37,167:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:33:37,177:INFO:Starting cross validation
2025-02-20 01:33:37,177:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:37,450:INFO:Calculating mean and std
2025-02-20 01:33:37,450:INFO:Creating metrics dataframe
2025-02-20 01:33:37,456:INFO:Uploading results into container
2025-02-20 01:33:37,456:INFO:Uploading model into container now
2025-02-20 01:33:37,456:INFO:_master_model_container: 2
2025-02-20 01:33:37,456:INFO:_display_container: 2
2025-02-20 01:33:37,457:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:33:37,457:INFO:create_model() successfully completed......................................
2025-02-20 01:33:37,591:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:37,591:INFO:Creating metrics dataframe
2025-02-20 01:33:37,606:INFO:Initializing Naive Bayes
2025-02-20 01:33:37,606:INFO:Total runtime is 0.02051820755004883 minutes
2025-02-20 01:33:37,606:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:37,606:INFO:Initializing create_model()
2025-02-20 01:33:37,606:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:37,606:INFO:Checking exceptions
2025-02-20 01:33:37,606:INFO:Importing libraries
2025-02-20 01:33:37,606:INFO:Copying training dataset
2025-02-20 01:33:37,622:INFO:Defining folds
2025-02-20 01:33:37,622:INFO:Declaring metric variables
2025-02-20 01:33:37,629:INFO:Importing untrained model
2025-02-20 01:33:37,629:INFO:Naive Bayes Imported successfully
2025-02-20 01:33:37,642:INFO:Starting cross validation
2025-02-20 01:33:37,645:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:37,796:INFO:Calculating mean and std
2025-02-20 01:33:37,796:INFO:Creating metrics dataframe
2025-02-20 01:33:37,796:INFO:Uploading results into container
2025-02-20 01:33:37,796:INFO:Uploading model into container now
2025-02-20 01:33:37,796:INFO:_master_model_container: 3
2025-02-20 01:33:37,796:INFO:_display_container: 2
2025-02-20 01:33:37,803:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:33:37,803:INFO:create_model() successfully completed......................................
2025-02-20 01:33:37,938:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:37,938:INFO:Creating metrics dataframe
2025-02-20 01:33:37,956:INFO:Initializing Decision Tree Classifier
2025-02-20 01:33:37,956:INFO:Total runtime is 0.02634127140045166 minutes
2025-02-20 01:33:37,956:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:37,956:INFO:Initializing create_model()
2025-02-20 01:33:37,956:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:37,956:INFO:Checking exceptions
2025-02-20 01:33:37,956:INFO:Importing libraries
2025-02-20 01:33:37,956:INFO:Copying training dataset
2025-02-20 01:33:37,964:INFO:Defining folds
2025-02-20 01:33:37,964:INFO:Declaring metric variables
2025-02-20 01:33:37,971:INFO:Importing untrained model
2025-02-20 01:33:37,971:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:33:37,987:INFO:Starting cross validation
2025-02-20 01:33:37,989:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:38,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,125:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,154:INFO:Calculating mean and std
2025-02-20 01:33:38,154:INFO:Creating metrics dataframe
2025-02-20 01:33:38,154:INFO:Uploading results into container
2025-02-20 01:33:38,154:INFO:Uploading model into container now
2025-02-20 01:33:38,154:INFO:_master_model_container: 4
2025-02-20 01:33:38,154:INFO:_display_container: 2
2025-02-20 01:33:38,154:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 01:33:38,154:INFO:create_model() successfully completed......................................
2025-02-20 01:33:38,299:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:38,299:INFO:Creating metrics dataframe
2025-02-20 01:33:38,318:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:33:38,318:INFO:Total runtime is 0.03237166007359823 minutes
2025-02-20 01:33:38,322:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:38,322:INFO:Initializing create_model()
2025-02-20 01:33:38,322:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:38,322:INFO:Checking exceptions
2025-02-20 01:33:38,322:INFO:Importing libraries
2025-02-20 01:33:38,322:INFO:Copying training dataset
2025-02-20 01:33:38,330:INFO:Defining folds
2025-02-20 01:33:38,330:INFO:Declaring metric variables
2025-02-20 01:33:38,330:INFO:Importing untrained model
2025-02-20 01:33:38,340:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:33:38,344:INFO:Starting cross validation
2025-02-20 01:33:38,344:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:38,536:INFO:Calculating mean and std
2025-02-20 01:33:38,537:INFO:Creating metrics dataframe
2025-02-20 01:33:38,541:INFO:Uploading results into container
2025-02-20 01:33:38,541:INFO:Uploading model into container now
2025-02-20 01:33:38,542:INFO:_master_model_container: 5
2025-02-20 01:33:38,543:INFO:_display_container: 2
2025-02-20 01:33:38,543:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:33:38,543:INFO:create_model() successfully completed......................................
2025-02-20 01:33:38,689:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:38,689:INFO:Creating metrics dataframe
2025-02-20 01:33:38,689:INFO:Initializing Ridge Classifier
2025-02-20 01:33:38,689:INFO:Total runtime is 0.03856685558954875 minutes
2025-02-20 01:33:38,689:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:38,689:INFO:Initializing create_model()
2025-02-20 01:33:38,703:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:38,703:INFO:Checking exceptions
2025-02-20 01:33:38,703:INFO:Importing libraries
2025-02-20 01:33:38,703:INFO:Copying training dataset
2025-02-20 01:33:38,703:INFO:Defining folds
2025-02-20 01:33:38,703:INFO:Declaring metric variables
2025-02-20 01:33:38,703:INFO:Importing untrained model
2025-02-20 01:33:38,717:INFO:Ridge Classifier Imported successfully
2025-02-20 01:33:38,728:INFO:Starting cross validation
2025-02-20 01:33:38,730:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:38,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,848:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,854:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,854:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,860:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:38,888:INFO:Calculating mean and std
2025-02-20 01:33:38,888:INFO:Creating metrics dataframe
2025-02-20 01:33:38,888:INFO:Uploading results into container
2025-02-20 01:33:38,888:INFO:Uploading model into container now
2025-02-20 01:33:38,888:INFO:_master_model_container: 6
2025-02-20 01:33:38,888:INFO:_display_container: 2
2025-02-20 01:33:38,888:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 01:33:38,888:INFO:create_model() successfully completed......................................
2025-02-20 01:33:39,030:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:39,030:INFO:Creating metrics dataframe
2025-02-20 01:33:39,046:INFO:Initializing Random Forest Classifier
2025-02-20 01:33:39,046:INFO:Total runtime is 0.044513765970865884 minutes
2025-02-20 01:33:39,046:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:39,046:INFO:Initializing create_model()
2025-02-20 01:33:39,046:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:39,046:INFO:Checking exceptions
2025-02-20 01:33:39,046:INFO:Importing libraries
2025-02-20 01:33:39,046:INFO:Copying training dataset
2025-02-20 01:33:39,062:INFO:Defining folds
2025-02-20 01:33:39,062:INFO:Declaring metric variables
2025-02-20 01:33:39,068:INFO:Importing untrained model
2025-02-20 01:33:39,073:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:33:39,075:INFO:Starting cross validation
2025-02-20 01:33:39,086:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:39,615:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,719:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:39,735:INFO:Calculating mean and std
2025-02-20 01:33:39,735:INFO:Creating metrics dataframe
2025-02-20 01:33:39,735:INFO:Uploading results into container
2025-02-20 01:33:39,735:INFO:Uploading model into container now
2025-02-20 01:33:39,735:INFO:_master_model_container: 7
2025-02-20 01:33:39,735:INFO:_display_container: 2
2025-02-20 01:33:39,735:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 01:33:39,735:INFO:create_model() successfully completed......................................
2025-02-20 01:33:39,884:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:39,884:INFO:Creating metrics dataframe
2025-02-20 01:33:39,900:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:33:39,900:INFO:Total runtime is 0.058748288949330645 minutes
2025-02-20 01:33:39,902:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:39,902:INFO:Initializing create_model()
2025-02-20 01:33:39,902:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:39,902:INFO:Checking exceptions
2025-02-20 01:33:39,902:INFO:Importing libraries
2025-02-20 01:33:39,902:INFO:Copying training dataset
2025-02-20 01:33:39,910:INFO:Defining folds
2025-02-20 01:33:39,910:INFO:Declaring metric variables
2025-02-20 01:33:39,916:INFO:Importing untrained model
2025-02-20 01:33:39,926:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:33:39,937:INFO:Starting cross validation
2025-02-20 01:33:39,940:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:40,020:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,026:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:33:40,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,089:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,105:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,105:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,121:INFO:Calculating mean and std
2025-02-20 01:33:40,121:INFO:Creating metrics dataframe
2025-02-20 01:33:40,125:INFO:Uploading results into container
2025-02-20 01:33:40,125:INFO:Uploading model into container now
2025-02-20 01:33:40,125:INFO:_master_model_container: 8
2025-02-20 01:33:40,125:INFO:_display_container: 2
2025-02-20 01:33:40,125:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:33:40,125:INFO:create_model() successfully completed......................................
2025-02-20 01:33:40,272:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:40,272:INFO:Creating metrics dataframe
2025-02-20 01:33:40,287:INFO:Initializing Ada Boost Classifier
2025-02-20 01:33:40,287:INFO:Total runtime is 0.0652002731959025 minutes
2025-02-20 01:33:40,287:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:40,287:INFO:Initializing create_model()
2025-02-20 01:33:40,287:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:40,287:INFO:Checking exceptions
2025-02-20 01:33:40,287:INFO:Importing libraries
2025-02-20 01:33:40,287:INFO:Copying training dataset
2025-02-20 01:33:40,303:INFO:Defining folds
2025-02-20 01:33:40,303:INFO:Declaring metric variables
2025-02-20 01:33:40,310:INFO:Importing untrained model
2025-02-20 01:33:40,314:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:33:40,324:INFO:Starting cross validation
2025-02-20 01:33:40,326:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:40,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,416:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,432:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,432:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,443:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:33:40,456:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,472:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,487:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:40,503:INFO:Calculating mean and std
2025-02-20 01:33:40,503:INFO:Creating metrics dataframe
2025-02-20 01:33:40,503:INFO:Uploading results into container
2025-02-20 01:33:40,503:INFO:Uploading model into container now
2025-02-20 01:33:40,503:INFO:_master_model_container: 9
2025-02-20 01:33:40,503:INFO:_display_container: 2
2025-02-20 01:33:40,503:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 01:33:40,503:INFO:create_model() successfully completed......................................
2025-02-20 01:33:40,655:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:40,655:INFO:Creating metrics dataframe
2025-02-20 01:33:40,661:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:33:40,670:INFO:Total runtime is 0.07157926559448242 minutes
2025-02-20 01:33:40,671:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:40,671:INFO:Initializing create_model()
2025-02-20 01:33:40,671:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:40,671:INFO:Checking exceptions
2025-02-20 01:33:40,671:INFO:Importing libraries
2025-02-20 01:33:40,671:INFO:Copying training dataset
2025-02-20 01:33:40,671:INFO:Defining folds
2025-02-20 01:33:40,671:INFO:Declaring metric variables
2025-02-20 01:33:40,687:INFO:Importing untrained model
2025-02-20 01:33:40,688:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:33:40,701:INFO:Starting cross validation
2025-02-20 01:33:40,703:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:41,243:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,259:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,268:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,315:INFO:Calculating mean and std
2025-02-20 01:33:41,315:INFO:Creating metrics dataframe
2025-02-20 01:33:41,315:INFO:Uploading results into container
2025-02-20 01:33:41,315:INFO:Uploading model into container now
2025-02-20 01:33:41,315:INFO:_master_model_container: 10
2025-02-20 01:33:41,315:INFO:_display_container: 2
2025-02-20 01:33:41,322:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:33:41,322:INFO:create_model() successfully completed......................................
2025-02-20 01:33:41,470:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:41,470:INFO:Creating metrics dataframe
2025-02-20 01:33:41,475:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:33:41,475:INFO:Total runtime is 0.08499052524566651 minutes
2025-02-20 01:33:41,488:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:41,488:INFO:Initializing create_model()
2025-02-20 01:33:41,488:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:41,488:INFO:Checking exceptions
2025-02-20 01:33:41,488:INFO:Importing libraries
2025-02-20 01:33:41,488:INFO:Copying training dataset
2025-02-20 01:33:41,488:INFO:Defining folds
2025-02-20 01:33:41,488:INFO:Declaring metric variables
2025-02-20 01:33:41,500:INFO:Importing untrained model
2025-02-20 01:33:41,507:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:33:41,513:INFO:Starting cross validation
2025-02-20 01:33:41,513:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:41,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:41,666:INFO:Calculating mean and std
2025-02-20 01:33:41,666:INFO:Creating metrics dataframe
2025-02-20 01:33:41,670:INFO:Uploading results into container
2025-02-20 01:33:41,670:INFO:Uploading model into container now
2025-02-20 01:33:41,670:INFO:_master_model_container: 11
2025-02-20 01:33:41,670:INFO:_display_container: 2
2025-02-20 01:33:41,670:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:33:41,670:INFO:create_model() successfully completed......................................
2025-02-20 01:33:41,821:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:41,821:INFO:Creating metrics dataframe
2025-02-20 01:33:41,837:INFO:Initializing Extra Trees Classifier
2025-02-20 01:33:41,837:INFO:Total runtime is 0.0910277565320333 minutes
2025-02-20 01:33:41,845:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:41,845:INFO:Initializing create_model()
2025-02-20 01:33:41,845:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:41,845:INFO:Checking exceptions
2025-02-20 01:33:41,845:INFO:Importing libraries
2025-02-20 01:33:41,845:INFO:Copying training dataset
2025-02-20 01:33:41,854:INFO:Defining folds
2025-02-20 01:33:41,854:INFO:Declaring metric variables
2025-02-20 01:33:41,860:INFO:Importing untrained model
2025-02-20 01:33:41,860:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:33:41,878:INFO:Starting cross validation
2025-02-20 01:33:41,878:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:42,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,390:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,407:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:42,415:INFO:Calculating mean and std
2025-02-20 01:33:42,415:INFO:Creating metrics dataframe
2025-02-20 01:33:42,415:INFO:Uploading results into container
2025-02-20 01:33:42,415:INFO:Uploading model into container now
2025-02-20 01:33:42,420:INFO:_master_model_container: 12
2025-02-20 01:33:42,420:INFO:_display_container: 2
2025-02-20 01:33:42,420:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 01:33:42,420:INFO:create_model() successfully completed......................................
2025-02-20 01:33:42,570:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:42,570:INFO:Creating metrics dataframe
2025-02-20 01:33:42,584:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:33:42,584:INFO:Total runtime is 0.10347537994384767 minutes
2025-02-20 01:33:42,599:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:42,599:INFO:Initializing create_model()
2025-02-20 01:33:42,599:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:42,599:INFO:Checking exceptions
2025-02-20 01:33:42,599:INFO:Importing libraries
2025-02-20 01:33:42,604:INFO:Copying training dataset
2025-02-20 01:33:42,608:INFO:Defining folds
2025-02-20 01:33:42,608:INFO:Declaring metric variables
2025-02-20 01:33:42,617:INFO:Importing untrained model
2025-02-20 01:33:42,620:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:33:42,633:INFO:Starting cross validation
2025-02-20 01:33:42,637:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:43,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,123:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,144:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,160:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,192:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,209:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,220:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,253:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,264:INFO:Calculating mean and std
2025-02-20 01:33:43,265:INFO:Creating metrics dataframe
2025-02-20 01:33:43,265:INFO:Uploading results into container
2025-02-20 01:33:43,270:INFO:Uploading model into container now
2025-02-20 01:33:43,270:INFO:_master_model_container: 13
2025-02-20 01:33:43,270:INFO:_display_container: 2
2025-02-20 01:33:43,270:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:33:43,273:INFO:create_model() successfully completed......................................
2025-02-20 01:33:43,427:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:43,427:INFO:Creating metrics dataframe
2025-02-20 01:33:43,440:INFO:Initializing Dummy Classifier
2025-02-20 01:33:43,440:INFO:Total runtime is 0.1177393953005473 minutes
2025-02-20 01:33:43,440:INFO:SubProcess create_model() called ==================================
2025-02-20 01:33:43,440:INFO:Initializing create_model()
2025-02-20 01:33:43,440:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C7EB48BFA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:43,440:INFO:Checking exceptions
2025-02-20 01:33:43,440:INFO:Importing libraries
2025-02-20 01:33:43,440:INFO:Copying training dataset
2025-02-20 01:33:43,459:INFO:Defining folds
2025-02-20 01:33:43,459:INFO:Declaring metric variables
2025-02-20 01:33:43,463:INFO:Importing untrained model
2025-02-20 01:33:43,470:INFO:Dummy Classifier Imported successfully
2025-02-20 01:33:43,478:INFO:Starting cross validation
2025-02-20 01:33:43,478:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:33:43,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,604:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:33:43,632:INFO:Calculating mean and std
2025-02-20 01:33:43,632:INFO:Creating metrics dataframe
2025-02-20 01:33:43,637:INFO:Uploading results into container
2025-02-20 01:33:43,637:INFO:Uploading model into container now
2025-02-20 01:33:43,637:INFO:_master_model_container: 14
2025-02-20 01:33:43,637:INFO:_display_container: 2
2025-02-20 01:33:43,637:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 01:33:43,637:INFO:create_model() successfully completed......................................
2025-02-20 01:33:43,775:INFO:SubProcess create_model() end ==================================
2025-02-20 01:33:43,775:INFO:Creating metrics dataframe
2025-02-20 01:33:43,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:33:43,806:INFO:Initializing create_model()
2025-02-20 01:33:43,806:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:43,806:INFO:Checking exceptions
2025-02-20 01:33:43,806:INFO:Importing libraries
2025-02-20 01:33:43,806:INFO:Copying training dataset
2025-02-20 01:33:43,818:INFO:Defining folds
2025-02-20 01:33:43,818:INFO:Declaring metric variables
2025-02-20 01:33:43,818:INFO:Importing untrained model
2025-02-20 01:33:43,818:INFO:Declaring custom model
2025-02-20 01:33:43,818:INFO:Logistic Regression Imported successfully
2025-02-20 01:33:43,822:INFO:Cross validation set to False
2025-02-20 01:33:43,822:INFO:Fitting Model
2025-02-20 01:33:44,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:33:44,676:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:33:44,676:INFO:create_model() successfully completed......................................
2025-02-20 01:33:44,876:INFO:_master_model_container: 14
2025-02-20 01:33:44,876:INFO:_display_container: 2
2025-02-20 01:33:44,876:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:33:44,876:INFO:compare_models() successfully completed......................................
2025-02-20 01:33:44,876:INFO:Initializing finalize_model()
2025-02-20 01:33:44,876:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 01:33:44,884:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:33:44,887:INFO:Initializing create_model()
2025-02-20 01:33:44,887:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:33:44,887:INFO:Checking exceptions
2025-02-20 01:33:44,892:INFO:Importing libraries
2025-02-20 01:33:44,892:INFO:Copying training dataset
2025-02-20 01:33:44,892:INFO:Defining folds
2025-02-20 01:33:44,892:INFO:Declaring metric variables
2025-02-20 01:33:44,892:INFO:Importing untrained model
2025-02-20 01:33:44,892:INFO:Declaring custom model
2025-02-20 01:33:44,892:INFO:Logistic Regression Imported successfully
2025-02-20 01:33:44,892:INFO:Cross validation set to False
2025-02-20 01:33:44,892:INFO:Fitting Model
2025-02-20 01:33:45,707:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:33:45,707:INFO:create_model() successfully completed......................................
2025-02-20 01:33:45,919:INFO:_master_model_container: 14
2025-02-20 01:33:45,919:INFO:_display_container: 2
2025-02-20 01:33:45,928:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:33:45,928:INFO:finalize_model() successfully completed......................................
2025-02-20 01:33:46,120:INFO:Initializing save_model()
2025-02-20 01:33:46,120:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:33:46,120:INFO:Adding model into prep_pipe
2025-02-20 01:33:46,120:WARNING:Only Model saved as it was a pipeline.
2025-02-20 01:33:46,130:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 01:33:46,137:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:33:46,137:INFO:save_model() successfully completed......................................
2025-02-20 01:34:09,325:INFO:Initializing load_model()
2025-02-20 01:34:09,346:INFO:load_model(model_name=best_churn_model, platform=None, authentication=None, verbose=True)
2025-02-20 01:34:09,377:INFO:Initializing predict_model()
2025-02-20 01:34:09,377:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C794E1AE60>)
2025-02-20 01:34:09,377:INFO:Checking exceptions
2025-02-20 01:34:09,377:INFO:Preloading libraries
2025-02-20 01:34:09,385:INFO:Set up data.
2025-02-20 01:34:09,388:INFO:Set up index.
2025-02-20 01:34:46,040:INFO:Initializing load_model()
2025-02-20 01:34:46,065:INFO:load_model(model_name=best_churn_model, platform=None, authentication=None, verbose=True)
2025-02-20 01:34:46,090:INFO:Initializing predict_model()
2025-02-20 01:34:46,090:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C794E19A20>)
2025-02-20 01:34:46,090:INFO:Checking exceptions
2025-02-20 01:34:46,090:INFO:Preloading libraries
2025-02-20 01:34:46,096:INFO:Set up data.
2025-02-20 01:34:46,101:INFO:Set up index.
2025-02-20 01:36:03,543:INFO:Initializing load_model()
2025-02-20 01:36:03,543:INFO:load_model(model_name=best_churn_model, platform=None, authentication=None, verbose=True)
2025-02-20 01:36:03,570:INFO:Initializing predict_model()
2025-02-20 01:36:03,570:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C79587C280>)
2025-02-20 01:36:03,570:INFO:Checking exceptions
2025-02-20 01:36:03,570:INFO:Preloading libraries
2025-02-20 01:36:03,576:INFO:Set up data.
2025-02-20 01:36:03,576:INFO:Set up index.
2025-02-20 01:36:23,645:INFO:Initializing load_model()
2025-02-20 01:36:23,646:INFO:load_model(model_name=best_churn_model, platform=None, authentication=None, verbose=True)
2025-02-20 01:36:23,668:INFO:Initializing predict_model()
2025-02-20 01:36:23,668:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C7CD18F610>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C79587C4C0>)
2025-02-20 01:36:23,668:INFO:Checking exceptions
2025-02-20 01:36:23,668:INFO:Preloading libraries
2025-02-20 01:36:23,676:INFO:Set up data.
2025-02-20 01:36:23,676:INFO:Set up index.
2025-02-20 01:37:39,722:INFO:Initializing load_model()
2025-02-20 01:37:39,722:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:38:10,510:INFO:PyCaret ClassificationExperiment
2025-02-20 01:38:10,510:INFO:Logging name: clf-default-name
2025-02-20 01:38:10,510:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:38:10,511:INFO:version 3.3.2
2025-02-20 01:38:10,511:INFO:Initializing setup()
2025-02-20 01:38:10,511:INFO:self.USI: e5d5
2025-02-20 01:38:10,511:INFO:self._variable_keys: {'exp_id', 'X', 'log_plots_param', 'USI', 'gpu_param', 'pipeline', '_ml_usecase', 'y_train', 'memory', 'seed', '_available_plots', 'fix_imbalance', 'fold_groups_param', 'y', 'data', 'n_jobs_param', 'X_train', 'X_test', 'idx', 'fold_generator', 'is_multiclass', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'target_param', 'y_test', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 01:38:10,511:INFO:Checking environment
2025-02-20 01:38:10,511:INFO:python_version: 3.10.14
2025-02-20 01:38:10,511:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:38:10,511:INFO:machine: AMD64
2025-02-20 01:38:10,513:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:38:10,529:INFO:Memory: svmem(total=16423702528, available=2246799360, percent=86.3, used=14176903168, free=2246799360)
2025-02-20 01:38:10,529:INFO:Physical Core: 8
2025-02-20 01:38:10,529:INFO:Logical Core: 16
2025-02-20 01:38:10,529:INFO:Checking libraries
2025-02-20 01:38:10,529:INFO:System:
2025-02-20 01:38:10,529:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:38:10,529:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:38:10,530:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:38:10,530:INFO:PyCaret required dependencies:
2025-02-20 01:38:10,530:INFO:                 pip: 25.0
2025-02-20 01:38:10,530:INFO:          setuptools: 75.8.0
2025-02-20 01:38:10,530:INFO:             pycaret: 3.3.2
2025-02-20 01:38:10,530:INFO:             IPython: 8.32.0
2025-02-20 01:38:10,530:INFO:          ipywidgets: 8.1.5
2025-02-20 01:38:10,530:INFO:                tqdm: 4.67.1
2025-02-20 01:38:10,530:INFO:               numpy: 1.26.4
2025-02-20 01:38:10,530:INFO:              pandas: 2.1.4
2025-02-20 01:38:10,530:INFO:              jinja2: 3.1.5
2025-02-20 01:38:10,530:INFO:               scipy: 1.11.4
2025-02-20 01:38:10,530:INFO:              joblib: 1.3.2
2025-02-20 01:38:10,530:INFO:             sklearn: 1.4.2
2025-02-20 01:38:10,530:INFO:                pyod: 2.0.3
2025-02-20 01:38:10,530:INFO:            imblearn: 0.13.0
2025-02-20 01:38:10,530:INFO:   category_encoders: 2.7.0
2025-02-20 01:38:10,530:INFO:            lightgbm: 4.6.0
2025-02-20 01:38:10,530:INFO:               numba: 0.61.0
2025-02-20 01:38:10,530:INFO:            requests: 2.32.3
2025-02-20 01:38:10,530:INFO:          matplotlib: 3.7.5
2025-02-20 01:38:10,530:INFO:          scikitplot: 0.3.7
2025-02-20 01:38:10,530:INFO:         yellowbrick: 1.5
2025-02-20 01:38:10,530:INFO:              plotly: 5.24.1
2025-02-20 01:38:10,530:INFO:    plotly-resampler: Not installed
2025-02-20 01:38:10,530:INFO:             kaleido: 0.2.1
2025-02-20 01:38:10,530:INFO:           schemdraw: 0.15
2025-02-20 01:38:10,530:INFO:         statsmodels: 0.14.4
2025-02-20 01:38:10,530:INFO:              sktime: 0.26.0
2025-02-20 01:38:10,530:INFO:               tbats: 1.1.3
2025-02-20 01:38:10,530:INFO:            pmdarima: 2.0.4
2025-02-20 01:38:10,530:INFO:              psutil: 7.0.0
2025-02-20 01:38:10,530:INFO:          markupsafe: 3.0.2
2025-02-20 01:38:10,530:INFO:             pickle5: Not installed
2025-02-20 01:38:10,530:INFO:         cloudpickle: 3.1.1
2025-02-20 01:38:10,530:INFO:         deprecation: 2.1.0
2025-02-20 01:38:10,530:INFO:              xxhash: 3.5.0
2025-02-20 01:38:10,530:INFO:           wurlitzer: Not installed
2025-02-20 01:38:10,530:INFO:PyCaret optional dependencies:
2025-02-20 01:38:10,530:INFO:                shap: Not installed
2025-02-20 01:38:10,530:INFO:           interpret: Not installed
2025-02-20 01:38:10,530:INFO:                umap: Not installed
2025-02-20 01:38:10,530:INFO:     ydata_profiling: Not installed
2025-02-20 01:38:10,530:INFO:  explainerdashboard: Not installed
2025-02-20 01:38:10,530:INFO:             autoviz: Not installed
2025-02-20 01:38:10,534:INFO:           fairlearn: Not installed
2025-02-20 01:38:10,534:INFO:          deepchecks: Not installed
2025-02-20 01:38:10,534:INFO:             xgboost: Not installed
2025-02-20 01:38:10,534:INFO:            catboost: Not installed
2025-02-20 01:38:10,534:INFO:              kmodes: Not installed
2025-02-20 01:38:10,534:INFO:             mlxtend: Not installed
2025-02-20 01:38:10,534:INFO:       statsforecast: Not installed
2025-02-20 01:38:10,534:INFO:        tune_sklearn: Not installed
2025-02-20 01:38:10,534:INFO:                 ray: Not installed
2025-02-20 01:38:10,534:INFO:            hyperopt: Not installed
2025-02-20 01:38:10,534:INFO:              optuna: Not installed
2025-02-20 01:38:10,534:INFO:               skopt: Not installed
2025-02-20 01:38:10,534:INFO:              mlflow: Not installed
2025-02-20 01:38:10,534:INFO:              gradio: Not installed
2025-02-20 01:38:10,534:INFO:             fastapi: Not installed
2025-02-20 01:38:10,534:INFO:             uvicorn: Not installed
2025-02-20 01:38:10,534:INFO:              m2cgen: Not installed
2025-02-20 01:38:10,534:INFO:           evidently: Not installed
2025-02-20 01:38:10,534:INFO:               fugue: Not installed
2025-02-20 01:38:10,534:INFO:           streamlit: Not installed
2025-02-20 01:38:10,534:INFO:             prophet: Not installed
2025-02-20 01:38:10,534:INFO:None
2025-02-20 01:38:10,534:INFO:Set up data.
2025-02-20 01:38:10,552:INFO:Set up folding strategy.
2025-02-20 01:38:10,552:INFO:Set up train/test split.
2025-02-20 01:38:10,565:INFO:Set up index.
2025-02-20 01:38:10,565:INFO:Assigning column types.
2025-02-20 01:38:10,576:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:38:10,636:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,636:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,671:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,671:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,718:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,727:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,759:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,759:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,759:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:38:10,808:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,839:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,839:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,898:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:10,931:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,931:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:10,931:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:38:11,019:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,019:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,116:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,116:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,116:INFO:Preparing preprocessing pipeline...
2025-02-20 01:38:11,116:INFO:Set up simple imputation.
2025-02-20 01:38:11,116:INFO:Set up encoding of categorical features.
2025-02-20 01:38:11,199:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:38:11,199:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-02-20 01:38:11,199:INFO:Creating final display dataframe.
2025-02-20 01:38:11,492:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape         (7043, 9)
4        Transformed data shape         (7043, 9)
5   Transformed train set shape         (4930, 9)
6    Transformed test set shape         (2113, 9)
7              Numeric features                 7
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              e5d5
2025-02-20 01:38:11,598:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,598:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,681:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,681:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:11,681:INFO:setup() successfully completed in 1.17s...............
2025-02-20 01:38:11,681:INFO:Initializing compare_models()
2025-02-20 01:38:11,681:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79461EE90>, include=None, fold=None, round=4, cross_validation=True, sort=GBC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C79461EE90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'GBC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:38:11,681:INFO:Checking exceptions
2025-02-20 01:38:14,039:INFO:PyCaret ClassificationExperiment
2025-02-20 01:38:14,039:INFO:Logging name: clf-default-name
2025-02-20 01:38:14,039:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:38:14,039:INFO:version 3.3.2
2025-02-20 01:38:14,039:INFO:Initializing setup()
2025-02-20 01:38:14,039:INFO:self.USI: bba3
2025-02-20 01:38:14,039:INFO:self._variable_keys: {'exp_id', 'X', 'log_plots_param', 'USI', 'gpu_param', 'pipeline', '_ml_usecase', 'y_train', 'memory', 'seed', '_available_plots', 'fix_imbalance', 'fold_groups_param', 'y', 'data', 'n_jobs_param', 'X_train', 'X_test', 'idx', 'fold_generator', 'is_multiclass', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'target_param', 'y_test', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 01:38:14,040:INFO:Checking environment
2025-02-20 01:38:14,040:INFO:python_version: 3.10.14
2025-02-20 01:38:14,040:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:38:14,040:INFO:machine: AMD64
2025-02-20 01:38:14,040:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:38:14,048:INFO:Memory: svmem(total=16423702528, available=2210877440, percent=86.5, used=14212825088, free=2210877440)
2025-02-20 01:38:14,048:INFO:Physical Core: 8
2025-02-20 01:38:14,048:INFO:Logical Core: 16
2025-02-20 01:38:14,048:INFO:Checking libraries
2025-02-20 01:38:14,048:INFO:System:
2025-02-20 01:38:14,048:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:38:14,048:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:38:14,048:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:38:14,048:INFO:PyCaret required dependencies:
2025-02-20 01:38:14,048:INFO:                 pip: 25.0
2025-02-20 01:38:14,048:INFO:          setuptools: 75.8.0
2025-02-20 01:38:14,048:INFO:             pycaret: 3.3.2
2025-02-20 01:38:14,048:INFO:             IPython: 8.32.0
2025-02-20 01:38:14,048:INFO:          ipywidgets: 8.1.5
2025-02-20 01:38:14,048:INFO:                tqdm: 4.67.1
2025-02-20 01:38:14,048:INFO:               numpy: 1.26.4
2025-02-20 01:38:14,048:INFO:              pandas: 2.1.4
2025-02-20 01:38:14,048:INFO:              jinja2: 3.1.5
2025-02-20 01:38:14,048:INFO:               scipy: 1.11.4
2025-02-20 01:38:14,048:INFO:              joblib: 1.3.2
2025-02-20 01:38:14,048:INFO:             sklearn: 1.4.2
2025-02-20 01:38:14,048:INFO:                pyod: 2.0.3
2025-02-20 01:38:14,048:INFO:            imblearn: 0.13.0
2025-02-20 01:38:14,048:INFO:   category_encoders: 2.7.0
2025-02-20 01:38:14,048:INFO:            lightgbm: 4.6.0
2025-02-20 01:38:14,048:INFO:               numba: 0.61.0
2025-02-20 01:38:14,048:INFO:            requests: 2.32.3
2025-02-20 01:38:14,048:INFO:          matplotlib: 3.7.5
2025-02-20 01:38:14,048:INFO:          scikitplot: 0.3.7
2025-02-20 01:38:14,048:INFO:         yellowbrick: 1.5
2025-02-20 01:38:14,048:INFO:              plotly: 5.24.1
2025-02-20 01:38:14,048:INFO:    plotly-resampler: Not installed
2025-02-20 01:38:14,048:INFO:             kaleido: 0.2.1
2025-02-20 01:38:14,048:INFO:           schemdraw: 0.15
2025-02-20 01:38:14,048:INFO:         statsmodels: 0.14.4
2025-02-20 01:38:14,048:INFO:              sktime: 0.26.0
2025-02-20 01:38:14,048:INFO:               tbats: 1.1.3
2025-02-20 01:38:14,048:INFO:            pmdarima: 2.0.4
2025-02-20 01:38:14,048:INFO:              psutil: 7.0.0
2025-02-20 01:38:14,048:INFO:          markupsafe: 3.0.2
2025-02-20 01:38:14,048:INFO:             pickle5: Not installed
2025-02-20 01:38:14,048:INFO:         cloudpickle: 3.1.1
2025-02-20 01:38:14,048:INFO:         deprecation: 2.1.0
2025-02-20 01:38:14,048:INFO:              xxhash: 3.5.0
2025-02-20 01:38:14,048:INFO:           wurlitzer: Not installed
2025-02-20 01:38:14,048:INFO:PyCaret optional dependencies:
2025-02-20 01:38:14,048:INFO:                shap: Not installed
2025-02-20 01:38:14,048:INFO:           interpret: Not installed
2025-02-20 01:38:14,048:INFO:                umap: Not installed
2025-02-20 01:38:14,048:INFO:     ydata_profiling: Not installed
2025-02-20 01:38:14,048:INFO:  explainerdashboard: Not installed
2025-02-20 01:38:14,048:INFO:             autoviz: Not installed
2025-02-20 01:38:14,048:INFO:           fairlearn: Not installed
2025-02-20 01:38:14,048:INFO:          deepchecks: Not installed
2025-02-20 01:38:14,048:INFO:             xgboost: Not installed
2025-02-20 01:38:14,048:INFO:            catboost: Not installed
2025-02-20 01:38:14,048:INFO:              kmodes: Not installed
2025-02-20 01:38:14,048:INFO:             mlxtend: Not installed
2025-02-20 01:38:14,048:INFO:       statsforecast: Not installed
2025-02-20 01:38:14,048:INFO:        tune_sklearn: Not installed
2025-02-20 01:38:14,048:INFO:                 ray: Not installed
2025-02-20 01:38:14,048:INFO:            hyperopt: Not installed
2025-02-20 01:38:14,048:INFO:              optuna: Not installed
2025-02-20 01:38:14,048:INFO:               skopt: Not installed
2025-02-20 01:38:14,048:INFO:              mlflow: Not installed
2025-02-20 01:38:14,048:INFO:              gradio: Not installed
2025-02-20 01:38:14,048:INFO:             fastapi: Not installed
2025-02-20 01:38:14,048:INFO:             uvicorn: Not installed
2025-02-20 01:38:14,048:INFO:              m2cgen: Not installed
2025-02-20 01:38:14,048:INFO:           evidently: Not installed
2025-02-20 01:38:14,048:INFO:               fugue: Not installed
2025-02-20 01:38:14,048:INFO:           streamlit: Not installed
2025-02-20 01:38:14,048:INFO:             prophet: Not installed
2025-02-20 01:38:14,048:INFO:None
2025-02-20 01:38:14,048:INFO:Set up data.
2025-02-20 01:38:14,065:INFO:Set up folding strategy.
2025-02-20 01:38:14,065:INFO:Set up train/test split.
2025-02-20 01:38:14,072:INFO:Set up index.
2025-02-20 01:38:14,080:INFO:Assigning column types.
2025-02-20 01:38:14,081:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:38:14,154:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,164:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,198:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,198:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,251:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,251:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,282:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,282:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,282:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:38:14,333:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,368:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,368:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,415:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:14,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,448:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:38:14,549:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,549:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,651:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,651:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:14,651:INFO:Preparing preprocessing pipeline...
2025-02-20 01:38:14,651:INFO:Set up simple imputation.
2025-02-20 01:38:14,664:INFO:Set up encoding of categorical features.
2025-02-20 01:38:14,748:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:38:14,748:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-02-20 01:38:14,748:INFO:Creating final display dataframe.
2025-02-20 01:38:15,097:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape         (7043, 9)
4        Transformed data shape         (7043, 9)
5   Transformed train set shape         (4930, 9)
6    Transformed test set shape         (2113, 9)
7              Numeric features                 7
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              bba3
2025-02-20 01:38:15,214:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:15,214:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:15,314:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:15,314:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:15,321:INFO:setup() successfully completed in 1.29s...............
2025-02-20 01:38:15,321:INFO:Initializing compare_models()
2025-02-20 01:38:15,321:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F430>, include=None, fold=None, round=4, cross_validation=True, sort=GBC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F430>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'GBC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:38:15,321:INFO:Checking exceptions
2025-02-20 01:38:24,841:INFO:PyCaret ClassificationExperiment
2025-02-20 01:38:24,841:INFO:Logging name: clf-default-name
2025-02-20 01:38:24,841:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:38:24,841:INFO:version 3.3.2
2025-02-20 01:38:24,841:INFO:Initializing setup()
2025-02-20 01:38:24,841:INFO:self.USI: 53ba
2025-02-20 01:38:24,841:INFO:self._variable_keys: {'exp_id', 'X', 'log_plots_param', 'USI', 'gpu_param', 'pipeline', '_ml_usecase', 'y_train', 'memory', 'seed', '_available_plots', 'fix_imbalance', 'fold_groups_param', 'y', 'data', 'n_jobs_param', 'X_train', 'X_test', 'idx', 'fold_generator', 'is_multiclass', 'gpu_n_jobs_param', 'html_param', 'logging_param', 'target_param', 'y_test', 'exp_name_log', 'fold_shuffle_param'}
2025-02-20 01:38:24,848:INFO:Checking environment
2025-02-20 01:38:24,848:INFO:python_version: 3.10.14
2025-02-20 01:38:24,848:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:38:24,848:INFO:machine: AMD64
2025-02-20 01:38:24,848:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:38:24,864:INFO:Memory: svmem(total=16423702528, available=2194808832, percent=86.6, used=14228893696, free=2194808832)
2025-02-20 01:38:24,866:INFO:Physical Core: 8
2025-02-20 01:38:24,866:INFO:Logical Core: 16
2025-02-20 01:38:24,866:INFO:Checking libraries
2025-02-20 01:38:24,866:INFO:System:
2025-02-20 01:38:24,866:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:38:24,866:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:38:24,866:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:38:24,866:INFO:PyCaret required dependencies:
2025-02-20 01:38:24,866:INFO:                 pip: 25.0
2025-02-20 01:38:24,866:INFO:          setuptools: 75.8.0
2025-02-20 01:38:24,866:INFO:             pycaret: 3.3.2
2025-02-20 01:38:24,866:INFO:             IPython: 8.32.0
2025-02-20 01:38:24,866:INFO:          ipywidgets: 8.1.5
2025-02-20 01:38:24,866:INFO:                tqdm: 4.67.1
2025-02-20 01:38:24,866:INFO:               numpy: 1.26.4
2025-02-20 01:38:24,866:INFO:              pandas: 2.1.4
2025-02-20 01:38:24,866:INFO:              jinja2: 3.1.5
2025-02-20 01:38:24,866:INFO:               scipy: 1.11.4
2025-02-20 01:38:24,866:INFO:              joblib: 1.3.2
2025-02-20 01:38:24,866:INFO:             sklearn: 1.4.2
2025-02-20 01:38:24,866:INFO:                pyod: 2.0.3
2025-02-20 01:38:24,866:INFO:            imblearn: 0.13.0
2025-02-20 01:38:24,866:INFO:   category_encoders: 2.7.0
2025-02-20 01:38:24,866:INFO:            lightgbm: 4.6.0
2025-02-20 01:38:24,866:INFO:               numba: 0.61.0
2025-02-20 01:38:24,866:INFO:            requests: 2.32.3
2025-02-20 01:38:24,866:INFO:          matplotlib: 3.7.5
2025-02-20 01:38:24,866:INFO:          scikitplot: 0.3.7
2025-02-20 01:38:24,866:INFO:         yellowbrick: 1.5
2025-02-20 01:38:24,866:INFO:              plotly: 5.24.1
2025-02-20 01:38:24,866:INFO:    plotly-resampler: Not installed
2025-02-20 01:38:24,866:INFO:             kaleido: 0.2.1
2025-02-20 01:38:24,866:INFO:           schemdraw: 0.15
2025-02-20 01:38:24,866:INFO:         statsmodels: 0.14.4
2025-02-20 01:38:24,866:INFO:              sktime: 0.26.0
2025-02-20 01:38:24,866:INFO:               tbats: 1.1.3
2025-02-20 01:38:24,866:INFO:            pmdarima: 2.0.4
2025-02-20 01:38:24,866:INFO:              psutil: 7.0.0
2025-02-20 01:38:24,866:INFO:          markupsafe: 3.0.2
2025-02-20 01:38:24,866:INFO:             pickle5: Not installed
2025-02-20 01:38:24,866:INFO:         cloudpickle: 3.1.1
2025-02-20 01:38:24,866:INFO:         deprecation: 2.1.0
2025-02-20 01:38:24,866:INFO:              xxhash: 3.5.0
2025-02-20 01:38:24,866:INFO:           wurlitzer: Not installed
2025-02-20 01:38:24,866:INFO:PyCaret optional dependencies:
2025-02-20 01:38:24,866:INFO:                shap: Not installed
2025-02-20 01:38:24,866:INFO:           interpret: Not installed
2025-02-20 01:38:24,866:INFO:                umap: Not installed
2025-02-20 01:38:24,866:INFO:     ydata_profiling: Not installed
2025-02-20 01:38:24,866:INFO:  explainerdashboard: Not installed
2025-02-20 01:38:24,866:INFO:             autoviz: Not installed
2025-02-20 01:38:24,866:INFO:           fairlearn: Not installed
2025-02-20 01:38:24,866:INFO:          deepchecks: Not installed
2025-02-20 01:38:24,866:INFO:             xgboost: Not installed
2025-02-20 01:38:24,866:INFO:            catboost: Not installed
2025-02-20 01:38:24,866:INFO:              kmodes: Not installed
2025-02-20 01:38:24,866:INFO:             mlxtend: Not installed
2025-02-20 01:38:24,866:INFO:       statsforecast: Not installed
2025-02-20 01:38:24,866:INFO:        tune_sklearn: Not installed
2025-02-20 01:38:24,866:INFO:                 ray: Not installed
2025-02-20 01:38:24,866:INFO:            hyperopt: Not installed
2025-02-20 01:38:24,866:INFO:              optuna: Not installed
2025-02-20 01:38:24,866:INFO:               skopt: Not installed
2025-02-20 01:38:24,866:INFO:              mlflow: Not installed
2025-02-20 01:38:24,866:INFO:              gradio: Not installed
2025-02-20 01:38:24,866:INFO:             fastapi: Not installed
2025-02-20 01:38:24,866:INFO:             uvicorn: Not installed
2025-02-20 01:38:24,866:INFO:              m2cgen: Not installed
2025-02-20 01:38:24,866:INFO:           evidently: Not installed
2025-02-20 01:38:24,866:INFO:               fugue: Not installed
2025-02-20 01:38:24,866:INFO:           streamlit: Not installed
2025-02-20 01:38:24,866:INFO:             prophet: Not installed
2025-02-20 01:38:24,866:INFO:None
2025-02-20 01:38:24,866:INFO:Set up data.
2025-02-20 01:38:24,882:INFO:Set up folding strategy.
2025-02-20 01:38:24,882:INFO:Set up train/test split.
2025-02-20 01:38:24,898:INFO:Set up index.
2025-02-20 01:38:24,898:INFO:Assigning column types.
2025-02-20 01:38:24,898:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:38:24,963:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:24,983:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:25,023:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,023:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,078:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:25,078:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:25,114:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,114:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,114:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:38:25,166:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:25,198:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,198:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,264:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:25,304:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,304:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,304:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:38:25,398:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,398:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,482:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,482:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,482:INFO:Preparing preprocessing pipeline...
2025-02-20 01:38:25,482:INFO:Set up simple imputation.
2025-02-20 01:38:25,498:INFO:Set up encoding of categorical features.
2025-02-20 01:38:25,570:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:38:25,570:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False)
2025-02-20 01:38:25,570:INFO:Creating final display dataframe.
2025-02-20 01:38:25,859:INFO:Setup _display_container:                     Description             Value
0                    Session id               123
1                        Target             Churn
2                   Target type            Binary
3           Original data shape         (7043, 9)
4        Transformed data shape         (7043, 9)
5   Transformed train set shape         (4930, 9)
6    Transformed test set shape         (2113, 9)
7              Numeric features                 7
8          Categorical features                 1
9                    Preprocess              True
10              Imputation type            simple
11           Numeric imputation              mean
12       Categorical imputation              mode
13     Maximum one-hot encoding                25
14              Encoding method              None
15               Fold Generator   StratifiedKFold
16                  Fold Number                10
17                     CPU Jobs                -1
18                      Use GPU             False
19               Log Experiment             False
20              Experiment Name  clf-default-name
21                          USI              53ba
2025-02-20 01:38:25,961:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:25,961:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:26,048:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:26,048:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:26,048:INFO:setup() successfully completed in 1.21s...............
2025-02-20 01:38:26,048:INFO:Initializing compare_models()
2025-02-20 01:38:26,048:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, include=None, fold=None, round=4, cross_validation=True, sort=AUC, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'AUC', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:38:26,048:INFO:Checking exceptions
2025-02-20 01:38:26,048:INFO:Preparing display monitor
2025-02-20 01:38:26,092:INFO:Initializing Logistic Regression
2025-02-20 01:38:26,092:INFO:Total runtime is 0.0 minutes
2025-02-20 01:38:26,100:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:26,100:INFO:Initializing create_model()
2025-02-20 01:38:26,100:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:26,100:INFO:Checking exceptions
2025-02-20 01:38:26,100:INFO:Importing libraries
2025-02-20 01:38:26,100:INFO:Copying training dataset
2025-02-20 01:38:26,108:INFO:Defining folds
2025-02-20 01:38:26,108:INFO:Declaring metric variables
2025-02-20 01:38:26,116:INFO:Importing untrained model
2025-02-20 01:38:26,124:INFO:Logistic Regression Imported successfully
2025-02-20 01:38:26,145:INFO:Starting cross validation
2025-02-20 01:38:26,145:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:26,599:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,630:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,646:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,646:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,681:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:26,692:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,722:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:26,739:INFO:Calculating mean and std
2025-02-20 01:38:26,739:INFO:Creating metrics dataframe
2025-02-20 01:38:26,743:INFO:Uploading results into container
2025-02-20 01:38:26,743:INFO:Uploading model into container now
2025-02-20 01:38:26,743:INFO:_master_model_container: 1
2025-02-20 01:38:26,743:INFO:_display_container: 2
2025-02-20 01:38:26,743:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:38:26,743:INFO:create_model() successfully completed......................................
2025-02-20 01:38:26,956:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:26,956:INFO:Creating metrics dataframe
2025-02-20 01:38:26,964:INFO:Initializing K Neighbors Classifier
2025-02-20 01:38:26,964:INFO:Total runtime is 0.01454775333404541 minutes
2025-02-20 01:38:26,970:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:26,970:INFO:Initializing create_model()
2025-02-20 01:38:26,970:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:26,970:INFO:Checking exceptions
2025-02-20 01:38:26,970:INFO:Importing libraries
2025-02-20 01:38:26,970:INFO:Copying training dataset
2025-02-20 01:38:26,974:INFO:Defining folds
2025-02-20 01:38:26,974:INFO:Declaring metric variables
2025-02-20 01:38:26,983:INFO:Importing untrained model
2025-02-20 01:38:26,989:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:38:26,998:INFO:Starting cross validation
2025-02-20 01:38:27,003:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:27,377:INFO:Calculating mean and std
2025-02-20 01:38:27,377:INFO:Creating metrics dataframe
2025-02-20 01:38:27,383:INFO:Uploading results into container
2025-02-20 01:38:27,383:INFO:Uploading model into container now
2025-02-20 01:38:27,385:INFO:_master_model_container: 2
2025-02-20 01:38:27,385:INFO:_display_container: 2
2025-02-20 01:38:27,385:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:38:27,385:INFO:create_model() successfully completed......................................
2025-02-20 01:38:27,605:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:27,605:INFO:Creating metrics dataframe
2025-02-20 01:38:27,622:INFO:Initializing Naive Bayes
2025-02-20 01:38:27,622:INFO:Total runtime is 0.02550553878148397 minutes
2025-02-20 01:38:27,622:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:27,622:INFO:Initializing create_model()
2025-02-20 01:38:27,622:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:27,622:INFO:Checking exceptions
2025-02-20 01:38:27,622:INFO:Importing libraries
2025-02-20 01:38:27,622:INFO:Copying training dataset
2025-02-20 01:38:27,635:INFO:Defining folds
2025-02-20 01:38:27,638:INFO:Declaring metric variables
2025-02-20 01:38:27,639:INFO:Importing untrained model
2025-02-20 01:38:27,648:INFO:Naive Bayes Imported successfully
2025-02-20 01:38:27,657:INFO:Starting cross validation
2025-02-20 01:38:27,661:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:27,862:INFO:Calculating mean and std
2025-02-20 01:38:27,864:INFO:Creating metrics dataframe
2025-02-20 01:38:27,866:INFO:Uploading results into container
2025-02-20 01:38:27,866:INFO:Uploading model into container now
2025-02-20 01:38:27,866:INFO:_master_model_container: 3
2025-02-20 01:38:27,866:INFO:_display_container: 2
2025-02-20 01:38:27,866:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:38:27,866:INFO:create_model() successfully completed......................................
2025-02-20 01:38:28,049:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:28,049:INFO:Creating metrics dataframe
2025-02-20 01:38:28,066:INFO:Initializing Decision Tree Classifier
2025-02-20 01:38:28,066:INFO:Total runtime is 0.032912902037302655 minutes
2025-02-20 01:38:28,066:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:28,066:INFO:Initializing create_model()
2025-02-20 01:38:28,066:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:28,066:INFO:Checking exceptions
2025-02-20 01:38:28,066:INFO:Importing libraries
2025-02-20 01:38:28,066:INFO:Copying training dataset
2025-02-20 01:38:28,078:INFO:Defining folds
2025-02-20 01:38:28,078:INFO:Declaring metric variables
2025-02-20 01:38:28,084:INFO:Importing untrained model
2025-02-20 01:38:28,084:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:38:28,098:INFO:Starting cross validation
2025-02-20 01:38:28,102:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:28,216:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,249:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:28,279:INFO:Calculating mean and std
2025-02-20 01:38:28,279:INFO:Creating metrics dataframe
2025-02-20 01:38:28,282:INFO:Uploading results into container
2025-02-20 01:38:28,282:INFO:Uploading model into container now
2025-02-20 01:38:28,282:INFO:_master_model_container: 4
2025-02-20 01:38:28,282:INFO:_display_container: 2
2025-02-20 01:38:28,282:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=123, splitter='best')
2025-02-20 01:38:28,282:INFO:create_model() successfully completed......................................
2025-02-20 01:38:28,488:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:28,488:INFO:Creating metrics dataframe
2025-02-20 01:38:28,503:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:38:28,503:INFO:Total runtime is 0.04019858042399089 minutes
2025-02-20 01:38:28,503:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:28,503:INFO:Initializing create_model()
2025-02-20 01:38:28,503:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:28,503:INFO:Checking exceptions
2025-02-20 01:38:28,503:INFO:Importing libraries
2025-02-20 01:38:28,503:INFO:Copying training dataset
2025-02-20 01:38:28,515:INFO:Defining folds
2025-02-20 01:38:28,515:INFO:Declaring metric variables
2025-02-20 01:38:28,522:INFO:Importing untrained model
2025-02-20 01:38:28,530:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:38:28,538:INFO:Starting cross validation
2025-02-20 01:38:28,538:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:28,762:INFO:Calculating mean and std
2025-02-20 01:38:28,765:INFO:Creating metrics dataframe
2025-02-20 01:38:28,766:INFO:Uploading results into container
2025-02-20 01:38:28,766:INFO:Uploading model into container now
2025-02-20 01:38:28,766:INFO:_master_model_container: 5
2025-02-20 01:38:28,766:INFO:_display_container: 2
2025-02-20 01:38:28,766:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=123, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:38:28,766:INFO:create_model() successfully completed......................................
2025-02-20 01:38:28,966:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:28,966:INFO:Creating metrics dataframe
2025-02-20 01:38:28,983:INFO:Initializing Ridge Classifier
2025-02-20 01:38:28,983:INFO:Total runtime is 0.048190597693125406 minutes
2025-02-20 01:38:28,991:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:28,991:INFO:Initializing create_model()
2025-02-20 01:38:28,991:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:28,991:INFO:Checking exceptions
2025-02-20 01:38:28,991:INFO:Importing libraries
2025-02-20 01:38:28,991:INFO:Copying training dataset
2025-02-20 01:38:29,007:INFO:Defining folds
2025-02-20 01:38:29,007:INFO:Declaring metric variables
2025-02-20 01:38:29,016:INFO:Importing untrained model
2025-02-20 01:38:29,019:INFO:Ridge Classifier Imported successfully
2025-02-20 01:38:29,035:INFO:Starting cross validation
2025-02-20 01:38:29,035:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:29,166:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:29,213:INFO:Calculating mean and std
2025-02-20 01:38:29,214:INFO:Creating metrics dataframe
2025-02-20 01:38:29,215:INFO:Uploading results into container
2025-02-20 01:38:29,215:INFO:Uploading model into container now
2025-02-20 01:38:29,215:INFO:_master_model_container: 6
2025-02-20 01:38:29,215:INFO:_display_container: 2
2025-02-20 01:38:29,215:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=123, solver='auto',
                tol=0.0001)
2025-02-20 01:38:29,215:INFO:create_model() successfully completed......................................
2025-02-20 01:38:29,420:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:29,420:INFO:Creating metrics dataframe
2025-02-20 01:38:29,431:INFO:Initializing Random Forest Classifier
2025-02-20 01:38:29,431:INFO:Total runtime is 0.05566122531890869 minutes
2025-02-20 01:38:29,438:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:29,438:INFO:Initializing create_model()
2025-02-20 01:38:29,438:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:29,438:INFO:Checking exceptions
2025-02-20 01:38:29,438:INFO:Importing libraries
2025-02-20 01:38:29,438:INFO:Copying training dataset
2025-02-20 01:38:29,449:INFO:Defining folds
2025-02-20 01:38:29,449:INFO:Declaring metric variables
2025-02-20 01:38:29,449:INFO:Importing untrained model
2025-02-20 01:38:29,462:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:38:29,474:INFO:Starting cross validation
2025-02-20 01:38:29,475:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,207:INFO:Calculating mean and std
2025-02-20 01:38:30,207:INFO:Creating metrics dataframe
2025-02-20 01:38:30,207:INFO:Uploading results into container
2025-02-20 01:38:30,207:INFO:Uploading model into container now
2025-02-20 01:38:30,207:INFO:_master_model_container: 7
2025-02-20 01:38:30,207:INFO:_display_container: 2
2025-02-20 01:38:30,207:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=123, verbose=0,
                       warm_start=False)
2025-02-20 01:38:30,207:INFO:create_model() successfully completed......................................
2025-02-20 01:38:30,433:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:30,433:INFO:Creating metrics dataframe
2025-02-20 01:38:30,448:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:38:30,448:INFO:Total runtime is 0.07260688543319702 minutes
2025-02-20 01:38:30,450:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:30,450:INFO:Initializing create_model()
2025-02-20 01:38:30,450:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:30,450:INFO:Checking exceptions
2025-02-20 01:38:30,450:INFO:Importing libraries
2025-02-20 01:38:30,450:INFO:Copying training dataset
2025-02-20 01:38:30,460:INFO:Defining folds
2025-02-20 01:38:30,460:INFO:Declaring metric variables
2025-02-20 01:38:30,468:INFO:Importing untrained model
2025-02-20 01:38:30,468:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:38:30,484:INFO:Starting cross validation
2025-02-20 01:38:30,485:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:30,566:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,566:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,577:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,593:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,599:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,599:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:38:30,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,631:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,631:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:30,649:INFO:Calculating mean and std
2025-02-20 01:38:30,650:INFO:Creating metrics dataframe
2025-02-20 01:38:30,653:INFO:Uploading results into container
2025-02-20 01:38:30,653:INFO:Uploading model into container now
2025-02-20 01:38:30,654:INFO:_master_model_container: 8
2025-02-20 01:38:30,654:INFO:_display_container: 2
2025-02-20 01:38:30,654:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:38:30,654:INFO:create_model() successfully completed......................................
2025-02-20 01:38:30,859:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:30,864:INFO:Creating metrics dataframe
2025-02-20 01:38:30,869:INFO:Initializing Ada Boost Classifier
2025-02-20 01:38:30,880:INFO:Total runtime is 0.07980374495188394 minutes
2025-02-20 01:38:30,883:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:30,883:INFO:Initializing create_model()
2025-02-20 01:38:30,883:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:30,883:INFO:Checking exceptions
2025-02-20 01:38:30,883:INFO:Importing libraries
2025-02-20 01:38:30,883:INFO:Copying training dataset
2025-02-20 01:38:30,898:INFO:Defining folds
2025-02-20 01:38:30,898:INFO:Declaring metric variables
2025-02-20 01:38:30,900:INFO:Importing untrained model
2025-02-20 01:38:30,900:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:38:30,917:INFO:Starting cross validation
2025-02-20 01:38:30,917:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:31,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,032:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,032:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,032:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,032:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,037:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,045:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,045:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,053:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,053:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:38:31,077:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,077:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,085:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,085:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,117:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,130:INFO:Calculating mean and std
2025-02-20 01:38:31,133:INFO:Creating metrics dataframe
2025-02-20 01:38:31,133:INFO:Uploading results into container
2025-02-20 01:38:31,133:INFO:Uploading model into container now
2025-02-20 01:38:31,133:INFO:_master_model_container: 9
2025-02-20 01:38:31,133:INFO:_display_container: 2
2025-02-20 01:38:31,133:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=123)
2025-02-20 01:38:31,133:INFO:create_model() successfully completed......................................
2025-02-20 01:38:31,360:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:31,360:INFO:Creating metrics dataframe
2025-02-20 01:38:31,367:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:38:31,376:INFO:Total runtime is 0.08807168801625569 minutes
2025-02-20 01:38:31,381:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:31,381:INFO:Initializing create_model()
2025-02-20 01:38:31,381:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:31,381:INFO:Checking exceptions
2025-02-20 01:38:31,381:INFO:Importing libraries
2025-02-20 01:38:31,381:INFO:Copying training dataset
2025-02-20 01:38:31,389:INFO:Defining folds
2025-02-20 01:38:31,389:INFO:Declaring metric variables
2025-02-20 01:38:31,393:INFO:Importing untrained model
2025-02-20 01:38:31,401:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:38:31,416:INFO:Starting cross validation
2025-02-20 01:38:31,416:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:31,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:31,997:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,013:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,044:INFO:Calculating mean and std
2025-02-20 01:38:32,044:INFO:Creating metrics dataframe
2025-02-20 01:38:32,044:INFO:Uploading results into container
2025-02-20 01:38:32,044:INFO:Uploading model into container now
2025-02-20 01:38:32,044:INFO:_master_model_container: 10
2025-02-20 01:38:32,044:INFO:_display_container: 2
2025-02-20 01:38:32,044:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=123, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:38:32,044:INFO:create_model() successfully completed......................................
2025-02-20 01:38:32,232:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:32,232:INFO:Creating metrics dataframe
2025-02-20 01:38:32,247:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:38:32,247:INFO:Total runtime is 0.10259582599004109 minutes
2025-02-20 01:38:32,247:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:32,247:INFO:Initializing create_model()
2025-02-20 01:38:32,247:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:32,247:INFO:Checking exceptions
2025-02-20 01:38:32,247:INFO:Importing libraries
2025-02-20 01:38:32,247:INFO:Copying training dataset
2025-02-20 01:38:32,265:INFO:Defining folds
2025-02-20 01:38:32,265:INFO:Declaring metric variables
2025-02-20 01:38:32,265:INFO:Importing untrained model
2025-02-20 01:38:32,281:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:38:32,289:INFO:Starting cross validation
2025-02-20 01:38:32,289:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:32,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,425:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,433:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,448:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:32,481:INFO:Calculating mean and std
2025-02-20 01:38:32,481:INFO:Creating metrics dataframe
2025-02-20 01:38:32,485:INFO:Uploading results into container
2025-02-20 01:38:32,486:INFO:Uploading model into container now
2025-02-20 01:38:32,486:INFO:_master_model_container: 11
2025-02-20 01:38:32,486:INFO:_display_container: 2
2025-02-20 01:38:32,486:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:38:32,486:INFO:create_model() successfully completed......................................
2025-02-20 01:38:32,659:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:32,659:INFO:Creating metrics dataframe
2025-02-20 01:38:32,675:INFO:Initializing Extra Trees Classifier
2025-02-20 01:38:32,675:INFO:Total runtime is 0.10972227255503336 minutes
2025-02-20 01:38:32,675:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:32,675:INFO:Initializing create_model()
2025-02-20 01:38:32,675:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:32,675:INFO:Checking exceptions
2025-02-20 01:38:32,675:INFO:Importing libraries
2025-02-20 01:38:32,675:INFO:Copying training dataset
2025-02-20 01:38:32,691:INFO:Defining folds
2025-02-20 01:38:32,691:INFO:Declaring metric variables
2025-02-20 01:38:32,701:INFO:Importing untrained model
2025-02-20 01:38:32,701:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:38:32,715:INFO:Starting cross validation
2025-02-20 01:38:32,717:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:33,152:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,152:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,152:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,152:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,152:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,163:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,179:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,195:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,226:INFO:Calculating mean and std
2025-02-20 01:38:33,226:INFO:Creating metrics dataframe
2025-02-20 01:38:33,226:INFO:Uploading results into container
2025-02-20 01:38:33,226:INFO:Uploading model into container now
2025-02-20 01:38:33,226:INFO:_master_model_container: 12
2025-02-20 01:38:33,226:INFO:_display_container: 2
2025-02-20 01:38:33,226:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=123, verbose=0,
                     warm_start=False)
2025-02-20 01:38:33,226:INFO:create_model() successfully completed......................................
2025-02-20 01:38:33,412:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:33,412:INFO:Creating metrics dataframe
2025-02-20 01:38:33,422:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:38:33,422:INFO:Total runtime is 0.12216788530349731 minutes
2025-02-20 01:38:33,428:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:33,431:INFO:Initializing create_model()
2025-02-20 01:38:33,431:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:33,431:INFO:Checking exceptions
2025-02-20 01:38:33,431:INFO:Importing libraries
2025-02-20 01:38:33,431:INFO:Copying training dataset
2025-02-20 01:38:33,431:INFO:Defining folds
2025-02-20 01:38:33,439:INFO:Declaring metric variables
2025-02-20 01:38:33,442:INFO:Importing untrained model
2025-02-20 01:38:33,448:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:38:33,450:INFO:Starting cross validation
2025-02-20 01:38:33,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:33,891:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,912:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:33,986:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,032:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,067:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,131:INFO:Calculating mean and std
2025-02-20 01:38:34,133:INFO:Creating metrics dataframe
2025-02-20 01:38:34,141:INFO:Uploading results into container
2025-02-20 01:38:34,141:INFO:Uploading model into container now
2025-02-20 01:38:34,141:INFO:_master_model_container: 13
2025-02-20 01:38:34,141:INFO:_display_container: 2
2025-02-20 01:38:34,141:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=123, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:38:34,141:INFO:create_model() successfully completed......................................
2025-02-20 01:38:34,368:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:34,368:INFO:Creating metrics dataframe
2025-02-20 01:38:34,390:INFO:Initializing Dummy Classifier
2025-02-20 01:38:34,390:INFO:Total runtime is 0.13830350637435912 minutes
2025-02-20 01:38:34,396:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:34,396:INFO:Initializing create_model()
2025-02-20 01:38:34,396:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002C798087910>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:34,396:INFO:Checking exceptions
2025-02-20 01:38:34,396:INFO:Importing libraries
2025-02-20 01:38:34,396:INFO:Copying training dataset
2025-02-20 01:38:34,408:INFO:Defining folds
2025-02-20 01:38:34,408:INFO:Declaring metric variables
2025-02-20 01:38:34,411:INFO:Importing untrained model
2025-02-20 01:38:34,417:INFO:Dummy Classifier Imported successfully
2025-02-20 01:38:34,417:INFO:Starting cross validation
2025-02-20 01:38:34,417:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:34,547:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,553:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,577:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,577:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 due to no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:38:34,589:INFO:Calculating mean and std
2025-02-20 01:38:34,589:INFO:Creating metrics dataframe
2025-02-20 01:38:34,593:INFO:Uploading results into container
2025-02-20 01:38:34,593:INFO:Uploading model into container now
2025-02-20 01:38:34,593:INFO:_master_model_container: 14
2025-02-20 01:38:34,596:INFO:_display_container: 2
2025-02-20 01:38:34,596:INFO:DummyClassifier(constant=None, random_state=123, strategy='prior')
2025-02-20 01:38:34,596:INFO:create_model() successfully completed......................................
2025-02-20 01:38:34,804:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:34,804:INFO:Creating metrics dataframe
2025-02-20 01:38:34,818:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:38:34,824:INFO:Initializing create_model()
2025-02-20 01:38:34,824:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:34,824:INFO:Checking exceptions
2025-02-20 01:38:34,832:INFO:Importing libraries
2025-02-20 01:38:34,832:INFO:Copying training dataset
2025-02-20 01:38:34,833:INFO:Defining folds
2025-02-20 01:38:34,833:INFO:Declaring metric variables
2025-02-20 01:38:34,833:INFO:Importing untrained model
2025-02-20 01:38:34,833:INFO:Declaring custom model
2025-02-20 01:38:34,833:INFO:Logistic Regression Imported successfully
2025-02-20 01:38:34,833:INFO:Cross validation set to False
2025-02-20 01:38:34,833:INFO:Fitting Model
2025-02-20 01:38:35,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:35,787:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:38:35,787:INFO:create_model() successfully completed......................................
2025-02-20 01:38:36,024:INFO:_master_model_container: 14
2025-02-20 01:38:36,024:INFO:_display_container: 2
2025-02-20 01:38:36,024:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:38:36,024:INFO:compare_models() successfully completed......................................
2025-02-20 01:38:36,024:INFO:Initializing finalize_model()
2025-02-20 01:38:36,024:INFO:finalize_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fit_kwargs=None, groups=None, model_only=False, experiment_custom_tags=None)
2025-02-20 01:38:36,030:INFO:Finalizing LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:38:36,037:INFO:Initializing create_model()
2025-02-20 01:38:36,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=123, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=None, round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=False, metrics=None, display=None, model_only=False, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:36,037:INFO:Checking exceptions
2025-02-20 01:38:36,037:INFO:Importing libraries
2025-02-20 01:38:36,037:INFO:Copying training dataset
2025-02-20 01:38:36,037:INFO:Defining folds
2025-02-20 01:38:36,037:INFO:Declaring metric variables
2025-02-20 01:38:36,037:INFO:Importing untrained model
2025-02-20 01:38:36,037:INFO:Declaring custom model
2025-02-20 01:38:36,037:INFO:Logistic Regression Imported successfully
2025-02-20 01:38:36,037:INFO:Cross validation set to False
2025-02-20 01:38:36,037:INFO:Fitting Model
2025-02-20 01:38:36,852:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:38:36,852:INFO:create_model() successfully completed......................................
2025-02-20 01:38:37,064:INFO:_master_model_container: 14
2025-02-20 01:38:37,064:INFO:_display_container: 2
2025-02-20 01:38:37,077:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:38:37,077:INFO:finalize_model() successfully completed......................................
2025-02-20 01:38:37,312:INFO:Initializing save_model()
2025-02-20 01:38:37,312:INFO:save_model(model=Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), model_name=best_churn_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('rest_encoding',
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:38:37,312:INFO:Adding model into prep_pipe
2025-02-20 01:38:37,312:WARNING:Only Model saved as it was a pipeline.
2025-02-20 01:38:37,329:INFO:best_churn_model.pkl saved in current working directory
2025-02-20 01:38:37,337:INFO:Pipeline(memory=Memory(location=None),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              missing_values=nan,
                                                              strategy='mean'))),
                ('c...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 01:38:37,337:INFO:save_model() successfully completed......................................
2025-02-20 01:38:37,633:INFO:Initializing load_model()
2025-02-20 01:38:37,633:INFO:load_model(model_name=best_churn_model, platform=None, authentication=None, verbose=True)
2025-02-20 01:38:37,672:INFO:Initializing predict_model()
2025-02-20 01:38:37,672:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002C79586F3A0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['tenure', 'PhoneService',
                                             'Contract', 'PaymentMethod',
                                             'MonthlyCharges', 'TotalCharges',
                                             'charge_per_tenure'],
                                    transformer=SimpleImputer(add_indicator=False,
                                                              copy=True,
                                                              fill_value=None,
                                                              keep_empty_features=False,
                                                              m...
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('actual_estimator',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=123,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002C797FBB7F0>)
2025-02-20 01:38:37,672:INFO:Checking exceptions
2025-02-20 01:38:37,672:INFO:Preloading libraries
2025-02-20 01:38:37,672:INFO:Set up data.
2025-02-20 01:38:37,683:INFO:Set up index.
2025-02-20 01:38:37,975:INFO:Initializing load_model()
2025-02-20 01:38:37,975:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:38:52,800:INFO:PyCaret ClassificationExperiment
2025-02-20 01:38:52,800:INFO:Logging name: clf-default-name
2025-02-20 01:38:52,800:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:38:52,800:INFO:version 3.3.2
2025-02-20 01:38:52,800:INFO:Initializing setup()
2025-02-20 01:38:52,800:INFO:self.USI: 38b2
2025-02-20 01:38:52,800:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 01:38:52,800:INFO:Checking environment
2025-02-20 01:38:52,800:INFO:python_version: 3.10.14
2025-02-20 01:38:52,800:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:38:52,800:INFO:machine: AMD64
2025-02-20 01:38:52,807:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:38:52,816:INFO:Memory: svmem(total=16423702528, available=2116427776, percent=87.1, used=14307274752, free=2116427776)
2025-02-20 01:38:52,816:INFO:Physical Core: 8
2025-02-20 01:38:52,816:INFO:Logical Core: 16
2025-02-20 01:38:52,816:INFO:Checking libraries
2025-02-20 01:38:52,816:INFO:System:
2025-02-20 01:38:52,816:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:38:52,816:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:38:52,816:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:38:52,816:INFO:PyCaret required dependencies:
2025-02-20 01:38:52,819:INFO:                 pip: 25.0
2025-02-20 01:38:52,819:INFO:          setuptools: 75.8.0
2025-02-20 01:38:52,819:INFO:             pycaret: 3.3.2
2025-02-20 01:38:52,819:INFO:             IPython: 8.32.0
2025-02-20 01:38:52,819:INFO:          ipywidgets: 8.1.5
2025-02-20 01:38:52,820:INFO:                tqdm: 4.67.1
2025-02-20 01:38:52,820:INFO:               numpy: 1.26.4
2025-02-20 01:38:52,820:INFO:              pandas: 2.1.4
2025-02-20 01:38:52,820:INFO:              jinja2: 3.1.5
2025-02-20 01:38:52,820:INFO:               scipy: 1.11.4
2025-02-20 01:38:52,820:INFO:              joblib: 1.3.2
2025-02-20 01:38:52,820:INFO:             sklearn: 1.4.2
2025-02-20 01:38:52,820:INFO:                pyod: 2.0.3
2025-02-20 01:38:52,820:INFO:            imblearn: 0.13.0
2025-02-20 01:38:52,820:INFO:   category_encoders: 2.7.0
2025-02-20 01:38:52,820:INFO:            lightgbm: 4.6.0
2025-02-20 01:38:52,820:INFO:               numba: 0.61.0
2025-02-20 01:38:52,820:INFO:            requests: 2.32.3
2025-02-20 01:38:52,820:INFO:          matplotlib: 3.7.5
2025-02-20 01:38:52,820:INFO:          scikitplot: 0.3.7
2025-02-20 01:38:52,820:INFO:         yellowbrick: 1.5
2025-02-20 01:38:52,820:INFO:              plotly: 5.24.1
2025-02-20 01:38:52,820:INFO:    plotly-resampler: Not installed
2025-02-20 01:38:52,820:INFO:             kaleido: 0.2.1
2025-02-20 01:38:52,820:INFO:           schemdraw: 0.15
2025-02-20 01:38:52,820:INFO:         statsmodels: 0.14.4
2025-02-20 01:38:52,820:INFO:              sktime: 0.26.0
2025-02-20 01:38:52,820:INFO:               tbats: 1.1.3
2025-02-20 01:38:52,820:INFO:            pmdarima: 2.0.4
2025-02-20 01:38:52,820:INFO:              psutil: 7.0.0
2025-02-20 01:38:52,820:INFO:          markupsafe: 3.0.2
2025-02-20 01:38:52,820:INFO:             pickle5: Not installed
2025-02-20 01:38:52,820:INFO:         cloudpickle: 3.1.1
2025-02-20 01:38:52,820:INFO:         deprecation: 2.1.0
2025-02-20 01:38:52,820:INFO:              xxhash: 3.5.0
2025-02-20 01:38:52,820:INFO:           wurlitzer: Not installed
2025-02-20 01:38:52,820:INFO:PyCaret optional dependencies:
2025-02-20 01:38:52,820:INFO:                shap: Not installed
2025-02-20 01:38:52,820:INFO:           interpret: Not installed
2025-02-20 01:38:52,820:INFO:                umap: Not installed
2025-02-20 01:38:52,820:INFO:     ydata_profiling: Not installed
2025-02-20 01:38:52,820:INFO:  explainerdashboard: Not installed
2025-02-20 01:38:52,820:INFO:             autoviz: Not installed
2025-02-20 01:38:52,820:INFO:           fairlearn: Not installed
2025-02-20 01:38:52,820:INFO:          deepchecks: Not installed
2025-02-20 01:38:52,820:INFO:             xgboost: Not installed
2025-02-20 01:38:52,820:INFO:            catboost: Not installed
2025-02-20 01:38:52,820:INFO:              kmodes: Not installed
2025-02-20 01:38:52,820:INFO:             mlxtend: Not installed
2025-02-20 01:38:52,820:INFO:       statsforecast: Not installed
2025-02-20 01:38:52,820:INFO:        tune_sklearn: Not installed
2025-02-20 01:38:52,820:INFO:                 ray: Not installed
2025-02-20 01:38:52,820:INFO:            hyperopt: Not installed
2025-02-20 01:38:52,820:INFO:              optuna: Not installed
2025-02-20 01:38:52,820:INFO:               skopt: Not installed
2025-02-20 01:38:52,820:INFO:              mlflow: Not installed
2025-02-20 01:38:52,820:INFO:              gradio: Not installed
2025-02-20 01:38:52,820:INFO:             fastapi: Not installed
2025-02-20 01:38:52,820:INFO:             uvicorn: Not installed
2025-02-20 01:38:52,820:INFO:              m2cgen: Not installed
2025-02-20 01:38:52,820:INFO:           evidently: Not installed
2025-02-20 01:38:52,820:INFO:               fugue: Not installed
2025-02-20 01:38:52,820:INFO:           streamlit: Not installed
2025-02-20 01:38:52,820:INFO:             prophet: Not installed
2025-02-20 01:38:52,820:INFO:None
2025-02-20 01:38:52,820:INFO:Set up data.
2025-02-20 01:38:52,850:INFO:Set up folding strategy.
2025-02-20 01:38:52,850:INFO:Set up train/test split.
2025-02-20 01:38:52,880:INFO:Set up index.
2025-02-20 01:38:52,880:INFO:Assigning column types.
2025-02-20 01:38:52,880:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:38:52,943:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:52,943:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:53,000:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,000:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,046:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:38:53,046:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:53,101:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,101:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,101:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:38:53,162:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:53,209:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,209:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,271:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:38:53,318:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,318:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,318:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:38:53,412:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,428:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,506:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,506:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:53,506:INFO:Preparing preprocessing pipeline...
2025-02-20 01:38:53,522:INFO:Set up label encoding.
2025-02-20 01:38:53,522:INFO:Set up simple imputation.
2025-02-20 01:38:53,522:INFO:Set up encoding of categorical features.
2025-02-20 01:38:53,522:INFO:Set up column name cleaning.
2025-02-20 01:38:53,694:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:38:53,710:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:38:53,737:INFO:Creating final display dataframe.
2025-02-20 01:38:54,188:INFO:Setup _display_container:                     Description             Value
0                    Session id              6044
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              38b2
2025-02-20 01:38:54,327:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:54,327:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:54,448:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:54,448:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:38:54,448:INFO:setup() successfully completed in 1.67s...............
2025-02-20 01:38:54,473:INFO:Initializing compare_models()
2025-02-20 01:38:54,473:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:38:54,473:INFO:Checking exceptions
2025-02-20 01:38:54,478:INFO:Preparing display monitor
2025-02-20 01:38:54,507:INFO:Initializing Logistic Regression
2025-02-20 01:38:54,507:INFO:Total runtime is 0.0 minutes
2025-02-20 01:38:54,515:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:54,515:INFO:Initializing create_model()
2025-02-20 01:38:54,515:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:54,515:INFO:Checking exceptions
2025-02-20 01:38:54,515:INFO:Importing libraries
2025-02-20 01:38:54,515:INFO:Copying training dataset
2025-02-20 01:38:54,522:INFO:Defining folds
2025-02-20 01:38:54,522:INFO:Declaring metric variables
2025-02-20 01:38:54,522:INFO:Importing untrained model
2025-02-20 01:38:54,532:INFO:Logistic Regression Imported successfully
2025-02-20 01:38:54,539:INFO:Starting cross validation
2025-02-20 01:38:54,539:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:58,765:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,813:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,815:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:58,936:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:38:59,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,032:INFO:Calculating mean and std
2025-02-20 01:38:59,034:INFO:Creating metrics dataframe
2025-02-20 01:38:59,037:INFO:Uploading results into container
2025-02-20 01:38:59,038:INFO:Uploading model into container now
2025-02-20 01:38:59,039:INFO:_master_model_container: 1
2025-02-20 01:38:59,039:INFO:_display_container: 2
2025-02-20 01:38:59,039:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6044, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:38:59,039:INFO:create_model() successfully completed......................................
2025-02-20 01:38:59,572:INFO:SubProcess create_model() end ==================================
2025-02-20 01:38:59,572:INFO:Creating metrics dataframe
2025-02-20 01:38:59,588:INFO:Initializing K Neighbors Classifier
2025-02-20 01:38:59,588:INFO:Total runtime is 0.08467813332875569 minutes
2025-02-20 01:38:59,588:INFO:SubProcess create_model() called ==================================
2025-02-20 01:38:59,588:INFO:Initializing create_model()
2025-02-20 01:38:59,588:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:38:59,588:INFO:Checking exceptions
2025-02-20 01:38:59,588:INFO:Importing libraries
2025-02-20 01:38:59,588:INFO:Copying training dataset
2025-02-20 01:38:59,603:INFO:Defining folds
2025-02-20 01:38:59,603:INFO:Declaring metric variables
2025-02-20 01:38:59,603:INFO:Importing untrained model
2025-02-20 01:38:59,603:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:38:59,619:INFO:Starting cross validation
2025-02-20 01:38:59,619:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:38:59,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,915:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,931:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,931:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:38:59,962:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,527:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,543:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,543:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,543:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,543:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,558:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,589:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,605:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,621:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:02,652:INFO:Calculating mean and std
2025-02-20 01:39:02,652:INFO:Creating metrics dataframe
2025-02-20 01:39:02,652:INFO:Uploading results into container
2025-02-20 01:39:02,652:INFO:Uploading model into container now
2025-02-20 01:39:02,652:INFO:_master_model_container: 2
2025-02-20 01:39:02,652:INFO:_display_container: 2
2025-02-20 01:39:02,652:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:39:02,652:INFO:create_model() successfully completed......................................
2025-02-20 01:39:02,848:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:02,848:INFO:Creating metrics dataframe
2025-02-20 01:39:02,864:INFO:Initializing Naive Bayes
2025-02-20 01:39:02,864:INFO:Total runtime is 0.13928252458572388 minutes
2025-02-20 01:39:02,864:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:02,864:INFO:Initializing create_model()
2025-02-20 01:39:02,864:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:02,864:INFO:Checking exceptions
2025-02-20 01:39:02,864:INFO:Importing libraries
2025-02-20 01:39:02,864:INFO:Copying training dataset
2025-02-20 01:39:02,879:INFO:Defining folds
2025-02-20 01:39:02,879:INFO:Declaring metric variables
2025-02-20 01:39:02,879:INFO:Importing untrained model
2025-02-20 01:39:02,895:INFO:Naive Bayes Imported successfully
2025-02-20 01:39:02,895:INFO:Starting cross validation
2025-02-20 01:39:02,895:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:03,069:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,069:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,084:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,099:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,135:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,146:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,146:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,162:INFO:Calculating mean and std
2025-02-20 01:39:03,162:INFO:Creating metrics dataframe
2025-02-20 01:39:03,162:INFO:Uploading results into container
2025-02-20 01:39:03,162:INFO:Uploading model into container now
2025-02-20 01:39:03,162:INFO:_master_model_container: 3
2025-02-20 01:39:03,162:INFO:_display_container: 2
2025-02-20 01:39:03,162:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:39:03,162:INFO:create_model() successfully completed......................................
2025-02-20 01:39:03,350:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:03,350:INFO:Creating metrics dataframe
2025-02-20 01:39:03,365:INFO:Initializing Decision Tree Classifier
2025-02-20 01:39:03,365:INFO:Total runtime is 0.14763853152592976 minutes
2025-02-20 01:39:03,365:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:03,365:INFO:Initializing create_model()
2025-02-20 01:39:03,365:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:03,365:INFO:Checking exceptions
2025-02-20 01:39:03,365:INFO:Importing libraries
2025-02-20 01:39:03,365:INFO:Copying training dataset
2025-02-20 01:39:03,381:INFO:Defining folds
2025-02-20 01:39:03,381:INFO:Declaring metric variables
2025-02-20 01:39:03,381:INFO:Importing untrained model
2025-02-20 01:39:03,381:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:39:03,396:INFO:Starting cross validation
2025-02-20 01:39:03,396:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:03,553:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,569:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,584:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:03,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:03,631:INFO:Calculating mean and std
2025-02-20 01:39:03,631:INFO:Creating metrics dataframe
2025-02-20 01:39:03,631:INFO:Uploading results into container
2025-02-20 01:39:03,631:INFO:Uploading model into container now
2025-02-20 01:39:03,631:INFO:_master_model_container: 4
2025-02-20 01:39:03,631:INFO:_display_container: 2
2025-02-20 01:39:03,631:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=6044, splitter='best')
2025-02-20 01:39:03,631:INFO:create_model() successfully completed......................................
2025-02-20 01:39:03,841:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:03,841:INFO:Creating metrics dataframe
2025-02-20 01:39:03,851:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:39:03,851:INFO:Total runtime is 0.15573150316874185 minutes
2025-02-20 01:39:03,851:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:03,851:INFO:Initializing create_model()
2025-02-20 01:39:03,851:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:03,851:INFO:Checking exceptions
2025-02-20 01:39:03,851:INFO:Importing libraries
2025-02-20 01:39:03,851:INFO:Copying training dataset
2025-02-20 01:39:03,866:INFO:Defining folds
2025-02-20 01:39:03,866:INFO:Declaring metric variables
2025-02-20 01:39:03,866:INFO:Importing untrained model
2025-02-20 01:39:03,866:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:39:03,882:INFO:Starting cross validation
2025-02-20 01:39:03,882:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:04,102:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,118:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,119:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,121:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,122:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,126:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,126:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,127:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,129:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,129:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,132:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,133:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,134:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,149:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,149:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,149:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,165:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,180:INFO:Calculating mean and std
2025-02-20 01:39:04,180:INFO:Creating metrics dataframe
2025-02-20 01:39:04,180:INFO:Uploading results into container
2025-02-20 01:39:04,180:INFO:Uploading model into container now
2025-02-20 01:39:04,180:INFO:_master_model_container: 5
2025-02-20 01:39:04,180:INFO:_display_container: 2
2025-02-20 01:39:04,180:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=6044, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:39:04,180:INFO:create_model() successfully completed......................................
2025-02-20 01:39:04,365:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:04,365:INFO:Creating metrics dataframe
2025-02-20 01:39:04,381:INFO:Initializing Ridge Classifier
2025-02-20 01:39:04,381:INFO:Total runtime is 0.16456656853357948 minutes
2025-02-20 01:39:04,381:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:04,381:INFO:Initializing create_model()
2025-02-20 01:39:04,381:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:04,381:INFO:Checking exceptions
2025-02-20 01:39:04,381:INFO:Importing libraries
2025-02-20 01:39:04,381:INFO:Copying training dataset
2025-02-20 01:39:04,396:INFO:Defining folds
2025-02-20 01:39:04,396:INFO:Declaring metric variables
2025-02-20 01:39:04,396:INFO:Importing untrained model
2025-02-20 01:39:04,412:INFO:Ridge Classifier Imported successfully
2025-02-20 01:39:04,412:INFO:Starting cross validation
2025-02-20 01:39:04,412:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:04,585:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,616:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,618:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,648:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,648:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:04,648:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:04,679:INFO:Calculating mean and std
2025-02-20 01:39:04,679:INFO:Creating metrics dataframe
2025-02-20 01:39:04,683:INFO:Uploading results into container
2025-02-20 01:39:04,683:INFO:Uploading model into container now
2025-02-20 01:39:04,683:INFO:_master_model_container: 6
2025-02-20 01:39:04,683:INFO:_display_container: 2
2025-02-20 01:39:04,683:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6044, solver='auto',
                tol=0.0001)
2025-02-20 01:39:04,683:INFO:create_model() successfully completed......................................
2025-02-20 01:39:04,877:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:04,877:INFO:Creating metrics dataframe
2025-02-20 01:39:04,884:INFO:Initializing Random Forest Classifier
2025-02-20 01:39:04,884:INFO:Total runtime is 0.17294845581054685 minutes
2025-02-20 01:39:04,893:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:04,893:INFO:Initializing create_model()
2025-02-20 01:39:04,893:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:04,893:INFO:Checking exceptions
2025-02-20 01:39:04,893:INFO:Importing libraries
2025-02-20 01:39:04,893:INFO:Copying training dataset
2025-02-20 01:39:04,900:INFO:Defining folds
2025-02-20 01:39:04,900:INFO:Declaring metric variables
2025-02-20 01:39:04,900:INFO:Importing untrained model
2025-02-20 01:39:04,909:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:39:04,917:INFO:Starting cross validation
2025-02-20 01:39:04,917:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:05,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,545:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,549:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,561:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,566:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,566:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,570:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,570:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,570:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,570:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,570:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,578:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,600:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,617:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,761:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:05,761:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:05,777:INFO:Calculating mean and std
2025-02-20 01:39:05,777:INFO:Creating metrics dataframe
2025-02-20 01:39:05,782:INFO:Uploading results into container
2025-02-20 01:39:05,783:INFO:Uploading model into container now
2025-02-20 01:39:05,783:INFO:_master_model_container: 7
2025-02-20 01:39:05,783:INFO:_display_container: 2
2025-02-20 01:39:05,784:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6044, verbose=0,
                       warm_start=False)
2025-02-20 01:39:05,784:INFO:create_model() successfully completed......................................
2025-02-20 01:39:05,976:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:05,976:INFO:Creating metrics dataframe
2025-02-20 01:39:05,992:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:39:05,992:INFO:Total runtime is 0.19141897360483803 minutes
2025-02-20 01:39:05,992:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:05,992:INFO:Initializing create_model()
2025-02-20 01:39:05,992:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:05,992:INFO:Checking exceptions
2025-02-20 01:39:05,992:INFO:Importing libraries
2025-02-20 01:39:05,992:INFO:Copying training dataset
2025-02-20 01:39:06,004:INFO:Defining folds
2025-02-20 01:39:06,004:INFO:Declaring metric variables
2025-02-20 01:39:06,008:INFO:Importing untrained model
2025-02-20 01:39:06,008:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:39:06,017:INFO:Starting cross validation
2025-02-20 01:39:06,017:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:06,150:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,159:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,166:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,175:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:39:06,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,215:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,232:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,247:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,263:INFO:Calculating mean and std
2025-02-20 01:39:06,263:INFO:Creating metrics dataframe
2025-02-20 01:39:06,266:INFO:Uploading results into container
2025-02-20 01:39:06,266:INFO:Uploading model into container now
2025-02-20 01:39:06,266:INFO:_master_model_container: 8
2025-02-20 01:39:06,266:INFO:_display_container: 2
2025-02-20 01:39:06,266:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:39:06,266:INFO:create_model() successfully completed......................................
2025-02-20 01:39:06,450:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:06,450:INFO:Creating metrics dataframe
2025-02-20 01:39:06,470:INFO:Initializing Ada Boost Classifier
2025-02-20 01:39:06,470:INFO:Total runtime is 0.19939136107762653 minutes
2025-02-20 01:39:06,470:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:06,470:INFO:Initializing create_model()
2025-02-20 01:39:06,470:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:06,470:INFO:Checking exceptions
2025-02-20 01:39:06,470:INFO:Importing libraries
2025-02-20 01:39:06,470:INFO:Copying training dataset
2025-02-20 01:39:06,483:INFO:Defining folds
2025-02-20 01:39:06,483:INFO:Declaring metric variables
2025-02-20 01:39:06,483:INFO:Importing untrained model
2025-02-20 01:39:06,495:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:39:06,500:INFO:Starting cross validation
2025-02-20 01:39:06,505:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:06,633:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,633:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,633:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,662:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,666:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,670:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,684:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:39:06,694:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,700:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,710:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,726:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:06,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:06,774:INFO:Calculating mean and std
2025-02-20 01:39:06,774:INFO:Creating metrics dataframe
2025-02-20 01:39:06,774:INFO:Uploading results into container
2025-02-20 01:39:06,774:INFO:Uploading model into container now
2025-02-20 01:39:06,774:INFO:_master_model_container: 9
2025-02-20 01:39:06,774:INFO:_display_container: 2
2025-02-20 01:39:06,774:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=6044)
2025-02-20 01:39:06,774:INFO:create_model() successfully completed......................................
2025-02-20 01:39:06,966:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:06,966:INFO:Creating metrics dataframe
2025-02-20 01:39:06,973:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:39:06,973:INFO:Total runtime is 0.207776403427124 minutes
2025-02-20 01:39:06,983:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:06,983:INFO:Initializing create_model()
2025-02-20 01:39:06,983:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:06,983:INFO:Checking exceptions
2025-02-20 01:39:06,983:INFO:Importing libraries
2025-02-20 01:39:06,983:INFO:Copying training dataset
2025-02-20 01:39:06,983:INFO:Defining folds
2025-02-20 01:39:06,983:INFO:Declaring metric variables
2025-02-20 01:39:06,983:INFO:Importing untrained model
2025-02-20 01:39:07,000:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:39:07,005:INFO:Starting cross validation
2025-02-20 01:39:07,005:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:07,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,817:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,850:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,858:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,866:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,866:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,874:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:07,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:07,899:INFO:Calculating mean and std
2025-02-20 01:39:07,900:INFO:Creating metrics dataframe
2025-02-20 01:39:07,900:INFO:Uploading results into container
2025-02-20 01:39:07,900:INFO:Uploading model into container now
2025-02-20 01:39:07,900:INFO:_master_model_container: 10
2025-02-20 01:39:07,900:INFO:_display_container: 2
2025-02-20 01:39:07,900:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=6044, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:39:07,900:INFO:create_model() successfully completed......................................
2025-02-20 01:39:08,100:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:08,100:INFO:Creating metrics dataframe
2025-02-20 01:39:08,117:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:39:08,117:INFO:Total runtime is 0.22682891686757403 minutes
2025-02-20 01:39:08,117:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:08,117:INFO:Initializing create_model()
2025-02-20 01:39:08,117:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:08,117:INFO:Checking exceptions
2025-02-20 01:39:08,117:INFO:Importing libraries
2025-02-20 01:39:08,117:INFO:Copying training dataset
2025-02-20 01:39:08,134:INFO:Defining folds
2025-02-20 01:39:08,134:INFO:Declaring metric variables
2025-02-20 01:39:08,134:INFO:Importing untrained model
2025-02-20 01:39:08,145:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:39:08,150:INFO:Starting cross validation
2025-02-20 01:39:08,150:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,334:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,345:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,345:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,345:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,345:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,349:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,350:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,366:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,366:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,369:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:08,394:INFO:Calculating mean and std
2025-02-20 01:39:08,394:INFO:Creating metrics dataframe
2025-02-20 01:39:08,394:INFO:Uploading results into container
2025-02-20 01:39:08,394:INFO:Uploading model into container now
2025-02-20 01:39:08,394:INFO:_master_model_container: 11
2025-02-20 01:39:08,394:INFO:_display_container: 2
2025-02-20 01:39:08,399:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:39:08,399:INFO:create_model() successfully completed......................................
2025-02-20 01:39:08,590:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:08,590:INFO:Creating metrics dataframe
2025-02-20 01:39:08,600:INFO:Initializing Extra Trees Classifier
2025-02-20 01:39:08,600:INFO:Total runtime is 0.23489073117574052 minutes
2025-02-20 01:39:08,611:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:08,611:INFO:Initializing create_model()
2025-02-20 01:39:08,611:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:08,611:INFO:Checking exceptions
2025-02-20 01:39:08,611:INFO:Importing libraries
2025-02-20 01:39:08,611:INFO:Copying training dataset
2025-02-20 01:39:08,617:INFO:Defining folds
2025-02-20 01:39:08,617:INFO:Declaring metric variables
2025-02-20 01:39:08,617:INFO:Importing untrained model
2025-02-20 01:39:08,627:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:39:08,633:INFO:Starting cross validation
2025-02-20 01:39:08,633:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:09,150:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,170:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,170:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,170:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,182:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,194:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,230:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,233:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,238:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,243:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:09,250:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:09,281:INFO:Calculating mean and std
2025-02-20 01:39:09,283:INFO:Creating metrics dataframe
2025-02-20 01:39:09,283:INFO:Uploading results into container
2025-02-20 01:39:09,283:INFO:Uploading model into container now
2025-02-20 01:39:09,283:INFO:_master_model_container: 12
2025-02-20 01:39:09,283:INFO:_display_container: 2
2025-02-20 01:39:09,283:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6044, verbose=0,
                     warm_start=False)
2025-02-20 01:39:09,283:INFO:create_model() successfully completed......................................
2025-02-20 01:39:09,513:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:09,513:INFO:Creating metrics dataframe
2025-02-20 01:39:09,517:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:39:09,517:INFO:Total runtime is 0.250165045261383 minutes
2025-02-20 01:39:09,533:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:09,534:INFO:Initializing create_model()
2025-02-20 01:39:09,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:09,534:INFO:Checking exceptions
2025-02-20 01:39:09,534:INFO:Importing libraries
2025-02-20 01:39:09,534:INFO:Copying training dataset
2025-02-20 01:39:09,534:INFO:Defining folds
2025-02-20 01:39:09,534:INFO:Declaring metric variables
2025-02-20 01:39:09,545:INFO:Importing untrained model
2025-02-20 01:39:09,550:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:39:09,550:INFO:Starting cross validation
2025-02-20 01:39:09,560:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:10,150:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,150:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,150:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,166:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,197:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,197:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,200:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,217:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,283:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,300:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,309:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,317:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,326:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,373:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,417:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,445:INFO:Calculating mean and std
2025-02-20 01:39:10,445:INFO:Creating metrics dataframe
2025-02-20 01:39:10,450:INFO:Uploading results into container
2025-02-20 01:39:10,450:INFO:Uploading model into container now
2025-02-20 01:39:10,450:INFO:_master_model_container: 13
2025-02-20 01:39:10,450:INFO:_display_container: 2
2025-02-20 01:39:10,450:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=6044, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:39:10,450:INFO:create_model() successfully completed......................................
2025-02-20 01:39:10,660:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:10,660:INFO:Creating metrics dataframe
2025-02-20 01:39:10,669:INFO:Initializing Dummy Classifier
2025-02-20 01:39:10,669:INFO:Total runtime is 0.26937045653661085 minutes
2025-02-20 01:39:10,677:INFO:SubProcess create_model() called ==================================
2025-02-20 01:39:10,677:INFO:Initializing create_model()
2025-02-20 01:39:10,677:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB0C9F010>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:10,677:INFO:Checking exceptions
2025-02-20 01:39:10,677:INFO:Importing libraries
2025-02-20 01:39:10,677:INFO:Copying training dataset
2025-02-20 01:39:10,684:INFO:Defining folds
2025-02-20 01:39:10,684:INFO:Declaring metric variables
2025-02-20 01:39:10,693:INFO:Importing untrained model
2025-02-20 01:39:10,700:INFO:Dummy Classifier Imported successfully
2025-02-20 01:39:10,710:INFO:Starting cross validation
2025-02-20 01:39:10,711:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:39:10,884:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,893:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,909:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,909:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,909:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,909:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,916:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,917:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,924:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,933:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:10,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:10,965:INFO:Calculating mean and std
2025-02-20 01:39:10,967:INFO:Creating metrics dataframe
2025-02-20 01:39:10,969:INFO:Uploading results into container
2025-02-20 01:39:10,969:INFO:Uploading model into container now
2025-02-20 01:39:10,969:INFO:_master_model_container: 14
2025-02-20 01:39:10,969:INFO:_display_container: 2
2025-02-20 01:39:10,969:INFO:DummyClassifier(constant=None, random_state=6044, strategy='prior')
2025-02-20 01:39:10,969:INFO:create_model() successfully completed......................................
2025-02-20 01:39:11,164:INFO:SubProcess create_model() end ==================================
2025-02-20 01:39:11,164:INFO:Creating metrics dataframe
2025-02-20 01:39:11,184:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:39:11,184:INFO:Initializing create_model()
2025-02-20 01:39:11,184:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:39:11,184:INFO:Checking exceptions
2025-02-20 01:39:11,184:INFO:Importing libraries
2025-02-20 01:39:11,184:INFO:Copying training dataset
2025-02-20 01:39:11,200:INFO:Defining folds
2025-02-20 01:39:11,200:INFO:Declaring metric variables
2025-02-20 01:39:11,200:INFO:Importing untrained model
2025-02-20 01:39:11,200:INFO:Declaring custom model
2025-02-20 01:39:11,200:INFO:Naive Bayes Imported successfully
2025-02-20 01:39:11,200:INFO:Cross validation set to False
2025-02-20 01:39:11,200:INFO:Fitting Model
2025-02-20 01:39:11,284:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:39:11,284:INFO:create_model() successfully completed......................................
2025-02-20 01:39:11,509:INFO:_master_model_container: 14
2025-02-20 01:39:11,509:INFO:_display_container: 2
2025-02-20 01:39:11,509:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:39:11,509:INFO:compare_models() successfully completed......................................
2025-02-20 01:39:11,580:INFO:Initializing predict_model()
2025-02-20 01:39:11,580:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB374A830>)
2025-02-20 01:39:11,580:INFO:Checking exceptions
2025-02-20 01:39:11,580:INFO:Preloading libraries
2025-02-20 01:39:11,583:INFO:Set up data.
2025-02-20 01:39:11,583:INFO:Set up index.
2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:39:11,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:39:11,919:INFO:Initializing save_model()
2025-02-20 01:39:11,919:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=LDA, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:39:11,919:INFO:Adding model into prep_pipe
2025-02-20 01:39:11,944:INFO:LDA.pkl saved in current working directory
2025-02-20 01:39:11,951:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 01:39:11,957:INFO:save_model() successfully completed......................................
2025-02-20 01:39:12,200:INFO:Initializing load_model()
2025-02-20 01:39:12,200:INFO:load_model(model_name=LDA, platform=None, authentication=None, verbose=True)
2025-02-20 01:39:12,350:INFO:Initializing predict_model()
2025-02-20 01:39:12,350:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB2DDB340>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB2D88940>)
2025-02-20 01:39:12,350:INFO:Checking exceptions
2025-02-20 01:39:12,350:INFO:Preloading libraries
2025-02-20 01:39:12,359:INFO:Set up data.
2025-02-20 01:39:12,366:INFO:Set up index.
2025-02-20 01:41:16,405:INFO:Initializing load_model()
2025-02-20 01:41:16,412:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:42:03,189:INFO:Initializing load_model()
2025-02-20 01:42:03,190:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:42:20,556:INFO:Initializing load_model()
2025-02-20 01:42:20,556:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:43:37,207:INFO:PyCaret ClassificationExperiment
2025-02-20 01:43:37,215:INFO:Logging name: clf-default-name
2025-02-20 01:43:37,215:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:43:37,215:INFO:version 3.3.2
2025-02-20 01:43:37,215:INFO:Initializing setup()
2025-02-20 01:43:37,215:INFO:self.USI: ff35
2025-02-20 01:43:37,215:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 01:43:37,218:INFO:Checking environment
2025-02-20 01:43:37,218:INFO:python_version: 3.10.14
2025-02-20 01:43:37,218:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:43:37,218:INFO:machine: AMD64
2025-02-20 01:43:37,218:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:43:37,226:INFO:Memory: svmem(total=16423702528, available=1323847680, percent=91.9, used=15099854848, free=1323847680)
2025-02-20 01:43:37,226:INFO:Physical Core: 8
2025-02-20 01:43:37,226:INFO:Logical Core: 16
2025-02-20 01:43:37,226:INFO:Checking libraries
2025-02-20 01:43:37,226:INFO:System:
2025-02-20 01:43:37,226:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:43:37,226:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:43:37,226:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:43:37,226:INFO:PyCaret required dependencies:
2025-02-20 01:43:37,226:INFO:                 pip: 25.0
2025-02-20 01:43:37,226:INFO:          setuptools: 75.8.0
2025-02-20 01:43:37,226:INFO:             pycaret: 3.3.2
2025-02-20 01:43:37,226:INFO:             IPython: 8.32.0
2025-02-20 01:43:37,226:INFO:          ipywidgets: 8.1.5
2025-02-20 01:43:37,226:INFO:                tqdm: 4.67.1
2025-02-20 01:43:37,226:INFO:               numpy: 1.26.4
2025-02-20 01:43:37,226:INFO:              pandas: 2.1.4
2025-02-20 01:43:37,226:INFO:              jinja2: 3.1.5
2025-02-20 01:43:37,226:INFO:               scipy: 1.11.4
2025-02-20 01:43:37,226:INFO:              joblib: 1.3.2
2025-02-20 01:43:37,226:INFO:             sklearn: 1.4.2
2025-02-20 01:43:37,226:INFO:                pyod: 2.0.3
2025-02-20 01:43:37,226:INFO:            imblearn: 0.13.0
2025-02-20 01:43:37,226:INFO:   category_encoders: 2.7.0
2025-02-20 01:43:37,226:INFO:            lightgbm: 4.6.0
2025-02-20 01:43:37,226:INFO:               numba: 0.61.0
2025-02-20 01:43:37,226:INFO:            requests: 2.32.3
2025-02-20 01:43:37,226:INFO:          matplotlib: 3.7.5
2025-02-20 01:43:37,226:INFO:          scikitplot: 0.3.7
2025-02-20 01:43:37,226:INFO:         yellowbrick: 1.5
2025-02-20 01:43:37,226:INFO:              plotly: 5.24.1
2025-02-20 01:43:37,226:INFO:    plotly-resampler: Not installed
2025-02-20 01:43:37,226:INFO:             kaleido: 0.2.1
2025-02-20 01:43:37,226:INFO:           schemdraw: 0.15
2025-02-20 01:43:37,226:INFO:         statsmodels: 0.14.4
2025-02-20 01:43:37,226:INFO:              sktime: 0.26.0
2025-02-20 01:43:37,226:INFO:               tbats: 1.1.3
2025-02-20 01:43:37,226:INFO:            pmdarima: 2.0.4
2025-02-20 01:43:37,226:INFO:              psutil: 7.0.0
2025-02-20 01:43:37,226:INFO:          markupsafe: 3.0.2
2025-02-20 01:43:37,226:INFO:             pickle5: Not installed
2025-02-20 01:43:37,232:INFO:         cloudpickle: 3.1.1
2025-02-20 01:43:37,232:INFO:         deprecation: 2.1.0
2025-02-20 01:43:37,232:INFO:              xxhash: 3.5.0
2025-02-20 01:43:37,232:INFO:           wurlitzer: Not installed
2025-02-20 01:43:37,232:INFO:PyCaret optional dependencies:
2025-02-20 01:43:37,232:INFO:                shap: Not installed
2025-02-20 01:43:37,232:INFO:           interpret: Not installed
2025-02-20 01:43:37,232:INFO:                umap: Not installed
2025-02-20 01:43:37,232:INFO:     ydata_profiling: Not installed
2025-02-20 01:43:37,232:INFO:  explainerdashboard: Not installed
2025-02-20 01:43:37,232:INFO:             autoviz: Not installed
2025-02-20 01:43:37,232:INFO:           fairlearn: Not installed
2025-02-20 01:43:37,232:INFO:          deepchecks: Not installed
2025-02-20 01:43:37,233:INFO:             xgboost: Not installed
2025-02-20 01:43:37,233:INFO:            catboost: Not installed
2025-02-20 01:43:37,233:INFO:              kmodes: Not installed
2025-02-20 01:43:37,233:INFO:             mlxtend: Not installed
2025-02-20 01:43:37,233:INFO:       statsforecast: Not installed
2025-02-20 01:43:37,233:INFO:        tune_sklearn: Not installed
2025-02-20 01:43:37,233:INFO:                 ray: Not installed
2025-02-20 01:43:37,233:INFO:            hyperopt: Not installed
2025-02-20 01:43:37,233:INFO:              optuna: Not installed
2025-02-20 01:43:37,233:INFO:               skopt: Not installed
2025-02-20 01:43:37,233:INFO:              mlflow: Not installed
2025-02-20 01:43:37,233:INFO:              gradio: Not installed
2025-02-20 01:43:37,233:INFO:             fastapi: Not installed
2025-02-20 01:43:37,233:INFO:             uvicorn: Not installed
2025-02-20 01:43:37,233:INFO:              m2cgen: Not installed
2025-02-20 01:43:37,233:INFO:           evidently: Not installed
2025-02-20 01:43:37,233:INFO:               fugue: Not installed
2025-02-20 01:43:37,233:INFO:           streamlit: Not installed
2025-02-20 01:43:37,233:INFO:             prophet: Not installed
2025-02-20 01:43:37,233:INFO:None
2025-02-20 01:43:37,233:INFO:Set up data.
2025-02-20 01:43:37,247:INFO:Set up folding strategy.
2025-02-20 01:43:37,247:INFO:Set up train/test split.
2025-02-20 01:43:37,267:INFO:Set up index.
2025-02-20 01:43:37,267:INFO:Assigning column types.
2025-02-20 01:43:37,275:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:43:37,338:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,338:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,369:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,369:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,442:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,442:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,489:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,489:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,489:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:43:37,565:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,590:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,590:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,653:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:43:37,684:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,684:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,684:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:43:37,794:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,796:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,869:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,869:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:37,869:INFO:Preparing preprocessing pipeline...
2025-02-20 01:43:37,869:INFO:Set up label encoding.
2025-02-20 01:43:37,869:INFO:Set up simple imputation.
2025-02-20 01:43:37,885:INFO:Set up encoding of categorical features.
2025-02-20 01:43:37,885:INFO:Set up column name cleaning.
2025-02-20 01:43:38,073:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:43:38,073:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:43:38,106:INFO:Creating final display dataframe.
2025-02-20 01:43:38,574:INFO:Setup _display_container:                     Description             Value
0                    Session id              4468
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 11)
5        Transformed data shape        (7032, 14)
6   Transformed train set shape        (4922, 14)
7    Transformed test set shape        (2110, 14)
8              Numeric features                 8
9          Categorical features                 2
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              ff35
2025-02-20 01:43:38,668:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:38,668:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:38,763:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:38,763:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:43:38,763:INFO:setup() successfully completed in 1.56s...............
2025-02-20 01:43:38,778:INFO:Initializing compare_models()
2025-02-20 01:43:38,778:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:43:38,778:INFO:Checking exceptions
2025-02-20 01:43:38,810:INFO:Preparing display monitor
2025-02-20 01:43:38,849:INFO:Initializing Logistic Regression
2025-02-20 01:43:38,849:INFO:Total runtime is 0.0 minutes
2025-02-20 01:43:38,852:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:38,852:INFO:Initializing create_model()
2025-02-20 01:43:38,852:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:38,852:INFO:Checking exceptions
2025-02-20 01:43:38,852:INFO:Importing libraries
2025-02-20 01:43:38,852:INFO:Copying training dataset
2025-02-20 01:43:38,868:INFO:Defining folds
2025-02-20 01:43:38,868:INFO:Declaring metric variables
2025-02-20 01:43:38,868:INFO:Importing untrained model
2025-02-20 01:43:38,876:INFO:Logistic Regression Imported successfully
2025-02-20 01:43:38,884:INFO:Starting cross validation
2025-02-20 01:43:38,893:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:39,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,572:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,576:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,590:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,614:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,628:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,629:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:43:39,633:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,640:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,647:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,647:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,647:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,647:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,654:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,654:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,663:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,680:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,680:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,684:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,685:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,693:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:39,725:INFO:Calculating mean and std
2025-02-20 01:43:39,727:INFO:Creating metrics dataframe
2025-02-20 01:43:39,728:INFO:Uploading results into container
2025-02-20 01:43:39,728:INFO:Uploading model into container now
2025-02-20 01:43:39,728:INFO:_master_model_container: 1
2025-02-20 01:43:39,728:INFO:_display_container: 2
2025-02-20 01:43:39,728:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=4468, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:43:39,728:INFO:create_model() successfully completed......................................
2025-02-20 01:43:39,962:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:39,962:INFO:Creating metrics dataframe
2025-02-20 01:43:39,977:INFO:Initializing K Neighbors Classifier
2025-02-20 01:43:39,977:INFO:Total runtime is 0.018806048234303794 minutes
2025-02-20 01:43:39,980:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:39,980:INFO:Initializing create_model()
2025-02-20 01:43:39,980:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:39,980:INFO:Checking exceptions
2025-02-20 01:43:39,980:INFO:Importing libraries
2025-02-20 01:43:39,980:INFO:Copying training dataset
2025-02-20 01:43:39,990:INFO:Defining folds
2025-02-20 01:43:39,990:INFO:Declaring metric variables
2025-02-20 01:43:39,994:INFO:Importing untrained model
2025-02-20 01:43:39,994:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:43:40,006:INFO:Starting cross validation
2025-02-20 01:43:40,006:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:40,281:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,281:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,297:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,312:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,328:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,343:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,359:INFO:Calculating mean and std
2025-02-20 01:43:40,359:INFO:Creating metrics dataframe
2025-02-20 01:43:40,359:INFO:Uploading results into container
2025-02-20 01:43:40,359:INFO:Uploading model into container now
2025-02-20 01:43:40,359:INFO:_master_model_container: 2
2025-02-20 01:43:40,359:INFO:_display_container: 2
2025-02-20 01:43:40,359:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:43:40,359:INFO:create_model() successfully completed......................................
2025-02-20 01:43:40,579:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:40,579:INFO:Creating metrics dataframe
2025-02-20 01:43:40,579:INFO:Initializing Naive Bayes
2025-02-20 01:43:40,595:INFO:Total runtime is 0.029102218151092533 minutes
2025-02-20 01:43:40,595:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:40,595:INFO:Initializing create_model()
2025-02-20 01:43:40,595:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:40,595:INFO:Checking exceptions
2025-02-20 01:43:40,595:INFO:Importing libraries
2025-02-20 01:43:40,595:INFO:Copying training dataset
2025-02-20 01:43:40,595:INFO:Defining folds
2025-02-20 01:43:40,595:INFO:Declaring metric variables
2025-02-20 01:43:40,611:INFO:Importing untrained model
2025-02-20 01:43:40,611:INFO:Naive Bayes Imported successfully
2025-02-20 01:43:40,626:INFO:Starting cross validation
2025-02-20 01:43:40,626:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:40,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,829:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:40,892:INFO:Calculating mean and std
2025-02-20 01:43:40,892:INFO:Creating metrics dataframe
2025-02-20 01:43:40,892:INFO:Uploading results into container
2025-02-20 01:43:40,892:INFO:Uploading model into container now
2025-02-20 01:43:40,892:INFO:_master_model_container: 3
2025-02-20 01:43:40,892:INFO:_display_container: 2
2025-02-20 01:43:40,892:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:43:40,892:INFO:create_model() successfully completed......................................
2025-02-20 01:43:41,104:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:41,104:INFO:Creating metrics dataframe
2025-02-20 01:43:41,119:INFO:Initializing Decision Tree Classifier
2025-02-20 01:43:41,119:INFO:Total runtime is 0.03784358501434326 minutes
2025-02-20 01:43:41,119:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:41,119:INFO:Initializing create_model()
2025-02-20 01:43:41,119:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:41,119:INFO:Checking exceptions
2025-02-20 01:43:41,119:INFO:Importing libraries
2025-02-20 01:43:41,119:INFO:Copying training dataset
2025-02-20 01:43:41,135:INFO:Defining folds
2025-02-20 01:43:41,135:INFO:Declaring metric variables
2025-02-20 01:43:41,144:INFO:Importing untrained model
2025-02-20 01:43:41,144:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:43:41,159:INFO:Starting cross validation
2025-02-20 01:43:41,159:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:41,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,386:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,390:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,397:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,426:INFO:Calculating mean and std
2025-02-20 01:43:41,426:INFO:Creating metrics dataframe
2025-02-20 01:43:41,426:INFO:Uploading results into container
2025-02-20 01:43:41,426:INFO:Uploading model into container now
2025-02-20 01:43:41,426:INFO:_master_model_container: 4
2025-02-20 01:43:41,426:INFO:_display_container: 2
2025-02-20 01:43:41,426:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=4468, splitter='best')
2025-02-20 01:43:41,426:INFO:create_model() successfully completed......................................
2025-02-20 01:43:41,637:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:41,637:INFO:Creating metrics dataframe
2025-02-20 01:43:41,653:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:43:41,653:INFO:Total runtime is 0.04673048257827759 minutes
2025-02-20 01:43:41,653:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:41,653:INFO:Initializing create_model()
2025-02-20 01:43:41,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:41,653:INFO:Checking exceptions
2025-02-20 01:43:41,653:INFO:Importing libraries
2025-02-20 01:43:41,653:INFO:Copying training dataset
2025-02-20 01:43:41,653:INFO:Defining folds
2025-02-20 01:43:41,653:INFO:Declaring metric variables
2025-02-20 01:43:41,668:INFO:Importing untrained model
2025-02-20 01:43:41,668:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:43:41,684:INFO:Starting cross validation
2025-02-20 01:43:41,684:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:41,887:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,887:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,903:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,919:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,934:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,950:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:41,966:INFO:Calculating mean and std
2025-02-20 01:43:41,966:INFO:Creating metrics dataframe
2025-02-20 01:43:41,966:INFO:Uploading results into container
2025-02-20 01:43:41,966:INFO:Uploading model into container now
2025-02-20 01:43:41,966:INFO:_master_model_container: 5
2025-02-20 01:43:41,966:INFO:_display_container: 2
2025-02-20 01:43:41,966:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=4468, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:43:41,966:INFO:create_model() successfully completed......................................
2025-02-20 01:43:42,169:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:42,169:INFO:Creating metrics dataframe
2025-02-20 01:43:42,184:INFO:Initializing Ridge Classifier
2025-02-20 01:43:42,184:INFO:Total runtime is 0.05559412240982056 minutes
2025-02-20 01:43:42,184:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:42,184:INFO:Initializing create_model()
2025-02-20 01:43:42,184:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:42,184:INFO:Checking exceptions
2025-02-20 01:43:42,184:INFO:Importing libraries
2025-02-20 01:43:42,184:INFO:Copying training dataset
2025-02-20 01:43:42,184:INFO:Defining folds
2025-02-20 01:43:42,184:INFO:Declaring metric variables
2025-02-20 01:43:42,200:INFO:Importing untrained model
2025-02-20 01:43:42,200:INFO:Ridge Classifier Imported successfully
2025-02-20 01:43:42,216:INFO:Starting cross validation
2025-02-20 01:43:42,216:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:42,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,400:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,415:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,431:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,447:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:42,478:INFO:Calculating mean and std
2025-02-20 01:43:42,478:INFO:Creating metrics dataframe
2025-02-20 01:43:42,478:INFO:Uploading results into container
2025-02-20 01:43:42,478:INFO:Uploading model into container now
2025-02-20 01:43:42,478:INFO:_master_model_container: 6
2025-02-20 01:43:42,478:INFO:_display_container: 2
2025-02-20 01:43:42,478:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=4468, solver='auto',
                tol=0.0001)
2025-02-20 01:43:42,478:INFO:create_model() successfully completed......................................
2025-02-20 01:43:42,694:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:42,694:INFO:Creating metrics dataframe
2025-02-20 01:43:42,698:INFO:Initializing Random Forest Classifier
2025-02-20 01:43:42,698:INFO:Total runtime is 0.06414892673492432 minutes
2025-02-20 01:43:42,710:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:42,710:INFO:Initializing create_model()
2025-02-20 01:43:42,710:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:42,710:INFO:Checking exceptions
2025-02-20 01:43:42,710:INFO:Importing libraries
2025-02-20 01:43:42,710:INFO:Copying training dataset
2025-02-20 01:43:42,710:INFO:Defining folds
2025-02-20 01:43:42,710:INFO:Declaring metric variables
2025-02-20 01:43:42,720:INFO:Importing untrained model
2025-02-20 01:43:42,726:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:43:42,726:INFO:Starting cross validation
2025-02-20 01:43:42,726:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:43,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,361:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,393:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,455:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,455:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,502:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,533:INFO:Calculating mean and std
2025-02-20 01:43:43,533:INFO:Creating metrics dataframe
2025-02-20 01:43:43,533:INFO:Uploading results into container
2025-02-20 01:43:43,533:INFO:Uploading model into container now
2025-02-20 01:43:43,533:INFO:_master_model_container: 7
2025-02-20 01:43:43,533:INFO:_display_container: 2
2025-02-20 01:43:43,533:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=4468, verbose=0,
                       warm_start=False)
2025-02-20 01:43:43,533:INFO:create_model() successfully completed......................................
2025-02-20 01:43:43,734:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:43,734:INFO:Creating metrics dataframe
2025-02-20 01:43:43,749:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:43:43,749:INFO:Total runtime is 0.08167277177174886 minutes
2025-02-20 01:43:43,749:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:43,749:INFO:Initializing create_model()
2025-02-20 01:43:43,749:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:43,749:INFO:Checking exceptions
2025-02-20 01:43:43,749:INFO:Importing libraries
2025-02-20 01:43:43,749:INFO:Copying training dataset
2025-02-20 01:43:43,772:INFO:Defining folds
2025-02-20 01:43:43,773:INFO:Declaring metric variables
2025-02-20 01:43:43,778:INFO:Importing untrained model
2025-02-20 01:43:43,783:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:43:43,790:INFO:Starting cross validation
2025-02-20 01:43:43,791:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:43,904:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,932:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,947:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:43:43,951:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,967:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:43,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,043:INFO:Calculating mean and std
2025-02-20 01:43:44,043:INFO:Creating metrics dataframe
2025-02-20 01:43:44,043:INFO:Uploading results into container
2025-02-20 01:43:44,043:INFO:Uploading model into container now
2025-02-20 01:43:44,043:INFO:_master_model_container: 8
2025-02-20 01:43:44,043:INFO:_display_container: 2
2025-02-20 01:43:44,043:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:43:44,043:INFO:create_model() successfully completed......................................
2025-02-20 01:43:44,240:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:44,240:INFO:Creating metrics dataframe
2025-02-20 01:43:44,256:INFO:Initializing Ada Boost Classifier
2025-02-20 01:43:44,256:INFO:Total runtime is 0.0901166836420695 minutes
2025-02-20 01:43:44,256:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:44,256:INFO:Initializing create_model()
2025-02-20 01:43:44,256:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:44,256:INFO:Checking exceptions
2025-02-20 01:43:44,256:INFO:Importing libraries
2025-02-20 01:43:44,256:INFO:Copying training dataset
2025-02-20 01:43:44,271:INFO:Defining folds
2025-02-20 01:43:44,271:INFO:Declaring metric variables
2025-02-20 01:43:44,271:INFO:Importing untrained model
2025-02-20 01:43:44,287:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:43:44,287:INFO:Starting cross validation
2025-02-20 01:43:44,287:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:44,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,440:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,441:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,450:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,453:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:43:44,460:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,460:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,475:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,491:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,506:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:44,522:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,522:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,522:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:44,538:INFO:Calculating mean and std
2025-02-20 01:43:44,538:INFO:Creating metrics dataframe
2025-02-20 01:43:44,538:INFO:Uploading results into container
2025-02-20 01:43:44,538:INFO:Uploading model into container now
2025-02-20 01:43:44,538:INFO:_master_model_container: 9
2025-02-20 01:43:44,538:INFO:_display_container: 2
2025-02-20 01:43:44,538:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=4468)
2025-02-20 01:43:44,538:INFO:create_model() successfully completed......................................
2025-02-20 01:43:44,743:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:44,743:INFO:Creating metrics dataframe
2025-02-20 01:43:44,743:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:43:44,743:INFO:Total runtime is 0.09822894732157389 minutes
2025-02-20 01:43:44,758:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:44,758:INFO:Initializing create_model()
2025-02-20 01:43:44,758:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:44,758:INFO:Checking exceptions
2025-02-20 01:43:44,758:INFO:Importing libraries
2025-02-20 01:43:44,758:INFO:Copying training dataset
2025-02-20 01:43:44,758:INFO:Defining folds
2025-02-20 01:43:44,758:INFO:Declaring metric variables
2025-02-20 01:43:44,758:INFO:Importing untrained model
2025-02-20 01:43:44,774:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:43:44,774:INFO:Starting cross validation
2025-02-20 01:43:44,774:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,643:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,659:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:45,706:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:45,721:INFO:Calculating mean and std
2025-02-20 01:43:45,722:INFO:Creating metrics dataframe
2025-02-20 01:43:45,722:INFO:Uploading results into container
2025-02-20 01:43:45,722:INFO:Uploading model into container now
2025-02-20 01:43:45,722:INFO:_master_model_container: 10
2025-02-20 01:43:45,722:INFO:_display_container: 2
2025-02-20 01:43:45,722:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=4468, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:43:45,722:INFO:create_model() successfully completed......................................
2025-02-20 01:43:45,932:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:45,932:INFO:Creating metrics dataframe
2025-02-20 01:43:45,971:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:43:45,971:INFO:Total runtime is 0.11869737307230631 minutes
2025-02-20 01:43:45,971:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:45,971:INFO:Initializing create_model()
2025-02-20 01:43:45,971:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:45,971:INFO:Checking exceptions
2025-02-20 01:43:45,971:INFO:Importing libraries
2025-02-20 01:43:45,971:INFO:Copying training dataset
2025-02-20 01:43:45,980:INFO:Defining folds
2025-02-20 01:43:45,980:INFO:Declaring metric variables
2025-02-20 01:43:45,980:INFO:Importing untrained model
2025-02-20 01:43:45,980:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:43:45,995:INFO:Starting cross validation
2025-02-20 01:43:45,995:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:46,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,183:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,199:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,222:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,246:INFO:Calculating mean and std
2025-02-20 01:43:46,246:INFO:Creating metrics dataframe
2025-02-20 01:43:46,246:INFO:Uploading results into container
2025-02-20 01:43:46,246:INFO:Uploading model into container now
2025-02-20 01:43:46,246:INFO:_master_model_container: 11
2025-02-20 01:43:46,246:INFO:_display_container: 2
2025-02-20 01:43:46,246:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:43:46,246:INFO:create_model() successfully completed......................................
2025-02-20 01:43:46,460:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:46,460:INFO:Creating metrics dataframe
2025-02-20 01:43:46,476:INFO:Initializing Extra Trees Classifier
2025-02-20 01:43:46,476:INFO:Total runtime is 0.12711124420166015 minutes
2025-02-20 01:43:46,491:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:46,491:INFO:Initializing create_model()
2025-02-20 01:43:46,491:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:46,491:INFO:Checking exceptions
2025-02-20 01:43:46,491:INFO:Importing libraries
2025-02-20 01:43:46,491:INFO:Copying training dataset
2025-02-20 01:43:46,491:INFO:Defining folds
2025-02-20 01:43:46,491:INFO:Declaring metric variables
2025-02-20 01:43:46,491:INFO:Importing untrained model
2025-02-20 01:43:46,511:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:43:46,511:INFO:Starting cross validation
2025-02-20 01:43:46,523:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:46,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,982:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:46,998:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,014:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,063:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,076:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,132:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,137:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,143:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,154:INFO:Calculating mean and std
2025-02-20 01:43:47,154:INFO:Creating metrics dataframe
2025-02-20 01:43:47,154:INFO:Uploading results into container
2025-02-20 01:43:47,154:INFO:Uploading model into container now
2025-02-20 01:43:47,154:INFO:_master_model_container: 12
2025-02-20 01:43:47,154:INFO:_display_container: 2
2025-02-20 01:43:47,154:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=4468, verbose=0,
                     warm_start=False)
2025-02-20 01:43:47,154:INFO:create_model() successfully completed......................................
2025-02-20 01:43:47,359:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:47,359:INFO:Creating metrics dataframe
2025-02-20 01:43:47,374:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:43:47,374:INFO:Total runtime is 0.14208916028340657 minutes
2025-02-20 01:43:47,374:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:47,374:INFO:Initializing create_model()
2025-02-20 01:43:47,374:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:47,374:INFO:Checking exceptions
2025-02-20 01:43:47,374:INFO:Importing libraries
2025-02-20 01:43:47,386:INFO:Copying training dataset
2025-02-20 01:43:47,393:INFO:Defining folds
2025-02-20 01:43:47,393:INFO:Declaring metric variables
2025-02-20 01:43:47,397:INFO:Importing untrained model
2025-02-20 01:43:47,403:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:43:47,405:INFO:Starting cross validation
2025-02-20 01:43:47,405:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:47,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,905:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,905:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,905:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,905:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,076:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,076:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,092:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,139:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,154:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,154:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,154:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,154:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,186:INFO:Calculating mean and std
2025-02-20 01:43:48,188:INFO:Creating metrics dataframe
2025-02-20 01:43:48,191:INFO:Uploading results into container
2025-02-20 01:43:48,191:INFO:Uploading model into container now
2025-02-20 01:43:48,191:INFO:_master_model_container: 13
2025-02-20 01:43:48,191:INFO:_display_container: 2
2025-02-20 01:43:48,191:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=4468, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:43:48,191:INFO:create_model() successfully completed......................................
2025-02-20 01:43:48,406:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:48,406:INFO:Creating metrics dataframe
2025-02-20 01:43:48,406:INFO:Initializing Dummy Classifier
2025-02-20 01:43:48,406:INFO:Total runtime is 0.15928520361582438 minutes
2025-02-20 01:43:48,422:INFO:SubProcess create_model() called ==================================
2025-02-20 01:43:48,422:INFO:Initializing create_model()
2025-02-20 01:43:48,422:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB4E7DD80>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:48,422:INFO:Checking exceptions
2025-02-20 01:43:48,422:INFO:Importing libraries
2025-02-20 01:43:48,422:INFO:Copying training dataset
2025-02-20 01:43:48,432:INFO:Defining folds
2025-02-20 01:43:48,432:INFO:Declaring metric variables
2025-02-20 01:43:48,436:INFO:Importing untrained model
2025-02-20 01:43:48,440:INFO:Dummy Classifier Imported successfully
2025-02-20 01:43:48,448:INFO:Starting cross validation
2025-02-20 01:43:48,450:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:43:48,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:48,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,671:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:48,686:INFO:Calculating mean and std
2025-02-20 01:43:48,686:INFO:Creating metrics dataframe
2025-02-20 01:43:48,686:INFO:Uploading results into container
2025-02-20 01:43:48,686:INFO:Uploading model into container now
2025-02-20 01:43:48,693:INFO:_master_model_container: 14
2025-02-20 01:43:48,693:INFO:_display_container: 2
2025-02-20 01:43:48,694:INFO:DummyClassifier(constant=None, random_state=4468, strategy='prior')
2025-02-20 01:43:48,694:INFO:create_model() successfully completed......................................
2025-02-20 01:43:48,890:INFO:SubProcess create_model() end ==================================
2025-02-20 01:43:48,890:INFO:Creating metrics dataframe
2025-02-20 01:43:48,910:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:43:48,922:INFO:Initializing create_model()
2025-02-20 01:43:48,922:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:43:48,922:INFO:Checking exceptions
2025-02-20 01:43:48,924:INFO:Importing libraries
2025-02-20 01:43:48,924:INFO:Copying training dataset
2025-02-20 01:43:48,931:INFO:Defining folds
2025-02-20 01:43:48,932:INFO:Declaring metric variables
2025-02-20 01:43:48,932:INFO:Importing untrained model
2025-02-20 01:43:48,932:INFO:Declaring custom model
2025-02-20 01:43:48,932:INFO:Naive Bayes Imported successfully
2025-02-20 01:43:48,934:INFO:Cross validation set to False
2025-02-20 01:43:48,934:INFO:Fitting Model
2025-02-20 01:43:48,984:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:43:48,984:INFO:create_model() successfully completed......................................
2025-02-20 01:43:49,227:INFO:_master_model_container: 14
2025-02-20 01:43:49,227:INFO:_display_container: 2
2025-02-20 01:43:49,227:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:43:49,227:INFO:compare_models() successfully completed......................................
2025-02-20 01:43:49,280:INFO:Initializing predict_model()
2025-02-20 01:43:49,280:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=GaussianNB(priors=None, var_smoothing=1e-09), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB4F7CD30>)
2025-02-20 01:43:49,280:INFO:Checking exceptions
2025-02-20 01:43:49,280:INFO:Preloading libraries
2025-02-20 01:43:49,290:INFO:Set up data.
2025-02-20 01:43:49,301:INFO:Set up index.
2025-02-20 01:43:49,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 01:43:49,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 01:43:49,647:INFO:Initializing save_model()
2025-02-20 01:43:49,647:INFO:save_model(model=GaussianNB(priors=None, var_smoothing=1e-09), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['customerID'],
                                    transformer=TargetEncoder(cols=['customerID'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:43:49,647:INFO:Adding model into prep_pipe
2025-02-20 01:43:49,680:INFO:GBC.pkl saved in current working directory
2025-02-20 01:43:49,693:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False)
2025-02-20 01:43:49,693:INFO:save_model() successfully completed......................................
2025-02-20 01:43:49,976:INFO:Initializing load_model()
2025-02-20 01:43:49,976:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:43:50,095:INFO:Initializing predict_model()
2025-02-20 01:43:50,095:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB4F7D2D0>)
2025-02-20 01:43:50,095:INFO:Checking exceptions
2025-02-20 01:43:50,095:INFO:Preloading libraries
2025-02-20 01:43:50,103:INFO:Set up data.
2025-02-20 01:43:50,107:INFO:Set up index.
2025-02-20 01:43:50,444:INFO:Initializing load_model()
2025-02-20 01:43:50,444:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:45:41,936:INFO:Initializing load_model()
2025-02-20 01:45:41,957:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:45:41,989:INFO:Initializing predict_model()
2025-02-20 01:45:41,989:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB52D15A0>)
2025-02-20 01:45:41,989:INFO:Checking exceptions
2025-02-20 01:45:41,989:INFO:Preloading libraries
2025-02-20 01:45:41,999:INFO:Set up data.
2025-02-20 01:45:41,999:INFO:Set up index.
2025-02-20 01:48:44,038:INFO:Initializing load_model()
2025-02-20 01:48:44,039:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:48:44,088:INFO:Initializing predict_model()
2025-02-20 01:48:44,088:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB20BDC90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              hierarchy=None,
                                                              min_samples_leaf=20,
                                                              return_df=True,
                                                              smoothing=10,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 GaussianNB(priors=None, var_smoothing=1e-09))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB55D9360>)
2025-02-20 01:48:44,088:INFO:Checking exceptions
2025-02-20 01:48:44,088:INFO:Preloading libraries
2025-02-20 01:48:44,096:INFO:Set up data.
2025-02-20 01:48:44,106:INFO:Set up index.
2025-02-20 01:49:39,743:INFO:PyCaret ClassificationExperiment
2025-02-20 01:49:39,755:INFO:Logging name: clf-default-name
2025-02-20 01:49:39,755:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 01:49:39,755:INFO:version 3.3.2
2025-02-20 01:49:39,757:INFO:Initializing setup()
2025-02-20 01:49:39,757:INFO:self.USI: ce2b
2025-02-20 01:49:39,757:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 01:49:39,757:INFO:Checking environment
2025-02-20 01:49:39,757:INFO:python_version: 3.10.14
2025-02-20 01:49:39,757:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 01:49:39,757:INFO:machine: AMD64
2025-02-20 01:49:39,757:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 01:49:39,772:INFO:Memory: svmem(total=16423702528, available=3957690368, percent=75.9, used=12466012160, free=3957690368)
2025-02-20 01:49:39,780:INFO:Physical Core: 8
2025-02-20 01:49:39,780:INFO:Logical Core: 16
2025-02-20 01:49:39,780:INFO:Checking libraries
2025-02-20 01:49:39,780:INFO:System:
2025-02-20 01:49:39,780:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 01:49:39,780:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 01:49:39,780:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 01:49:39,780:INFO:PyCaret required dependencies:
2025-02-20 01:49:39,780:INFO:                 pip: 25.0
2025-02-20 01:49:39,780:INFO:          setuptools: 75.8.0
2025-02-20 01:49:39,780:INFO:             pycaret: 3.3.2
2025-02-20 01:49:39,780:INFO:             IPython: 8.32.0
2025-02-20 01:49:39,780:INFO:          ipywidgets: 8.1.5
2025-02-20 01:49:39,780:INFO:                tqdm: 4.67.1
2025-02-20 01:49:39,780:INFO:               numpy: 1.26.4
2025-02-20 01:49:39,780:INFO:              pandas: 2.1.4
2025-02-20 01:49:39,780:INFO:              jinja2: 3.1.5
2025-02-20 01:49:39,780:INFO:               scipy: 1.11.4
2025-02-20 01:49:39,780:INFO:              joblib: 1.3.2
2025-02-20 01:49:39,780:INFO:             sklearn: 1.4.2
2025-02-20 01:49:39,780:INFO:                pyod: 2.0.3
2025-02-20 01:49:39,780:INFO:            imblearn: 0.13.0
2025-02-20 01:49:39,780:INFO:   category_encoders: 2.7.0
2025-02-20 01:49:39,780:INFO:            lightgbm: 4.6.0
2025-02-20 01:49:39,780:INFO:               numba: 0.61.0
2025-02-20 01:49:39,780:INFO:            requests: 2.32.3
2025-02-20 01:49:39,780:INFO:          matplotlib: 3.7.5
2025-02-20 01:49:39,780:INFO:          scikitplot: 0.3.7
2025-02-20 01:49:39,780:INFO:         yellowbrick: 1.5
2025-02-20 01:49:39,780:INFO:              plotly: 5.24.1
2025-02-20 01:49:39,780:INFO:    plotly-resampler: Not installed
2025-02-20 01:49:39,780:INFO:             kaleido: 0.2.1
2025-02-20 01:49:39,780:INFO:           schemdraw: 0.15
2025-02-20 01:49:39,780:INFO:         statsmodels: 0.14.4
2025-02-20 01:49:39,780:INFO:              sktime: 0.26.0
2025-02-20 01:49:39,780:INFO:               tbats: 1.1.3
2025-02-20 01:49:39,780:INFO:            pmdarima: 2.0.4
2025-02-20 01:49:39,780:INFO:              psutil: 7.0.0
2025-02-20 01:49:39,780:INFO:          markupsafe: 3.0.2
2025-02-20 01:49:39,780:INFO:             pickle5: Not installed
2025-02-20 01:49:39,780:INFO:         cloudpickle: 3.1.1
2025-02-20 01:49:39,780:INFO:         deprecation: 2.1.0
2025-02-20 01:49:39,780:INFO:              xxhash: 3.5.0
2025-02-20 01:49:39,780:INFO:           wurlitzer: Not installed
2025-02-20 01:49:39,780:INFO:PyCaret optional dependencies:
2025-02-20 01:49:39,780:INFO:                shap: Not installed
2025-02-20 01:49:39,788:INFO:           interpret: Not installed
2025-02-20 01:49:39,788:INFO:                umap: Not installed
2025-02-20 01:49:39,788:INFO:     ydata_profiling: Not installed
2025-02-20 01:49:39,788:INFO:  explainerdashboard: Not installed
2025-02-20 01:49:39,788:INFO:             autoviz: Not installed
2025-02-20 01:49:39,788:INFO:           fairlearn: Not installed
2025-02-20 01:49:39,788:INFO:          deepchecks: Not installed
2025-02-20 01:49:39,788:INFO:             xgboost: Not installed
2025-02-20 01:49:39,788:INFO:            catboost: Not installed
2025-02-20 01:49:39,788:INFO:              kmodes: Not installed
2025-02-20 01:49:39,788:INFO:             mlxtend: Not installed
2025-02-20 01:49:39,788:INFO:       statsforecast: Not installed
2025-02-20 01:49:39,788:INFO:        tune_sklearn: Not installed
2025-02-20 01:49:39,788:INFO:                 ray: Not installed
2025-02-20 01:49:39,788:INFO:            hyperopt: Not installed
2025-02-20 01:49:39,788:INFO:              optuna: Not installed
2025-02-20 01:49:39,788:INFO:               skopt: Not installed
2025-02-20 01:49:39,788:INFO:              mlflow: Not installed
2025-02-20 01:49:39,788:INFO:              gradio: Not installed
2025-02-20 01:49:39,788:INFO:             fastapi: Not installed
2025-02-20 01:49:39,788:INFO:             uvicorn: Not installed
2025-02-20 01:49:39,788:INFO:              m2cgen: Not installed
2025-02-20 01:49:39,788:INFO:           evidently: Not installed
2025-02-20 01:49:39,788:INFO:               fugue: Not installed
2025-02-20 01:49:39,788:INFO:           streamlit: Not installed
2025-02-20 01:49:39,788:INFO:             prophet: Not installed
2025-02-20 01:49:39,788:INFO:None
2025-02-20 01:49:39,788:INFO:Set up data.
2025-02-20 01:49:39,807:INFO:Set up folding strategy.
2025-02-20 01:49:39,807:INFO:Set up train/test split.
2025-02-20 01:49:39,815:INFO:Set up index.
2025-02-20 01:49:39,823:INFO:Assigning column types.
2025-02-20 01:49:39,823:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 01:49:39,882:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:49:39,882:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:49:39,921:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:39,921:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:39,970:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 01:49:39,970:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:49:40,014:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,014:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,014:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 01:49:40,077:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:49:40,116:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,116:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,176:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 01:49:40,218:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,218:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,218:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 01:49:40,316:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,316:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,410:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,410:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:40,412:INFO:Preparing preprocessing pipeline...
2025-02-20 01:49:40,412:INFO:Set up label encoding.
2025-02-20 01:49:40,412:INFO:Set up simple imputation.
2025-02-20 01:49:40,412:INFO:Set up encoding of categorical features.
2025-02-20 01:49:40,412:INFO:Set up column name cleaning.
2025-02-20 01:49:40,559:INFO:Finished creating preprocessing pipeline.
2025-02-20 01:49:40,576:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 01:49:40,576:INFO:Creating final display dataframe.
2025-02-20 01:49:40,954:INFO:Setup _display_container:                     Description             Value
0                    Session id              3937
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 13)
6   Transformed train set shape        (4922, 13)
7    Transformed test set shape        (2110, 13)
8              Numeric features                 8
9          Categorical features                 1
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              ce2b
2025-02-20 01:49:41,049:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:41,049:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:41,147:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:41,147:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 01:49:41,147:INFO:setup() successfully completed in 1.4s...............
2025-02-20 01:49:41,174:INFO:Initializing compare_models()
2025-02-20 01:49:41,174:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 01:49:41,174:INFO:Checking exceptions
2025-02-20 01:49:41,194:INFO:Preparing display monitor
2025-02-20 01:49:41,234:INFO:Initializing Logistic Regression
2025-02-20 01:49:41,234:INFO:Total runtime is 0.0 minutes
2025-02-20 01:49:41,240:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:41,240:INFO:Initializing create_model()
2025-02-20 01:49:41,240:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:41,240:INFO:Checking exceptions
2025-02-20 01:49:41,240:INFO:Importing libraries
2025-02-20 01:49:41,240:INFO:Copying training dataset
2025-02-20 01:49:41,248:INFO:Defining folds
2025-02-20 01:49:41,248:INFO:Declaring metric variables
2025-02-20 01:49:41,256:INFO:Importing untrained model
2025-02-20 01:49:41,256:INFO:Logistic Regression Imported successfully
2025-02-20 01:49:41,264:INFO:Starting cross validation
2025-02-20 01:49:41,272:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:47,019:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,024:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,024:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,035:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,066:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,067:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,074:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,087:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,091:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,103:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,103:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 01:49:47,108:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,108:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,108:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,108:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,120:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,124:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,129:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,129:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,141:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,172:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,204:INFO:Calculating mean and std
2025-02-20 01:49:47,204:INFO:Creating metrics dataframe
2025-02-20 01:49:47,208:INFO:Uploading results into container
2025-02-20 01:49:47,208:INFO:Uploading model into container now
2025-02-20 01:49:47,208:INFO:_master_model_container: 1
2025-02-20 01:49:47,208:INFO:_display_container: 2
2025-02-20 01:49:47,208:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3937, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 01:49:47,208:INFO:create_model() successfully completed......................................
2025-02-20 01:49:47,442:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:47,442:INFO:Creating metrics dataframe
2025-02-20 01:49:47,450:INFO:Initializing K Neighbors Classifier
2025-02-20 01:49:47,450:INFO:Total runtime is 0.10359986225763956 minutes
2025-02-20 01:49:47,450:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:47,450:INFO:Initializing create_model()
2025-02-20 01:49:47,450:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:47,450:INFO:Checking exceptions
2025-02-20 01:49:47,450:INFO:Importing libraries
2025-02-20 01:49:47,450:INFO:Copying training dataset
2025-02-20 01:49:47,458:INFO:Defining folds
2025-02-20 01:49:47,458:INFO:Declaring metric variables
2025-02-20 01:49:47,458:INFO:Importing untrained model
2025-02-20 01:49:47,474:INFO:K Neighbors Classifier Imported successfully
2025-02-20 01:49:47,490:INFO:Starting cross validation
2025-02-20 01:49:47,494:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:47,790:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,790:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,811:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,821:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,821:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,821:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:47,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,592:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,608:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,625:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,632:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,641:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,644:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,655:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,670:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,702:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,717:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,733:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,749:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:50,764:INFO:Calculating mean and std
2025-02-20 01:49:50,764:INFO:Creating metrics dataframe
2025-02-20 01:49:50,764:INFO:Uploading results into container
2025-02-20 01:49:50,764:INFO:Uploading model into container now
2025-02-20 01:49:50,764:INFO:_master_model_container: 2
2025-02-20 01:49:50,764:INFO:_display_container: 2
2025-02-20 01:49:50,764:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 01:49:50,764:INFO:create_model() successfully completed......................................
2025-02-20 01:49:51,020:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:51,020:INFO:Creating metrics dataframe
2025-02-20 01:49:51,037:INFO:Initializing Naive Bayes
2025-02-20 01:49:51,037:INFO:Total runtime is 0.16339235305786132 minutes
2025-02-20 01:49:51,037:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:51,037:INFO:Initializing create_model()
2025-02-20 01:49:51,037:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:51,037:INFO:Checking exceptions
2025-02-20 01:49:51,037:INFO:Importing libraries
2025-02-20 01:49:51,037:INFO:Copying training dataset
2025-02-20 01:49:51,051:INFO:Defining folds
2025-02-20 01:49:51,051:INFO:Declaring metric variables
2025-02-20 01:49:51,067:INFO:Importing untrained model
2025-02-20 01:49:51,072:INFO:Naive Bayes Imported successfully
2025-02-20 01:49:51,077:INFO:Starting cross validation
2025-02-20 01:49:51,085:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:51,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,214:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,229:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,291:INFO:Calculating mean and std
2025-02-20 01:49:51,291:INFO:Creating metrics dataframe
2025-02-20 01:49:51,291:INFO:Uploading results into container
2025-02-20 01:49:51,291:INFO:Uploading model into container now
2025-02-20 01:49:51,291:INFO:_master_model_container: 3
2025-02-20 01:49:51,291:INFO:_display_container: 2
2025-02-20 01:49:51,291:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 01:49:51,291:INFO:create_model() successfully completed......................................
2025-02-20 01:49:51,505:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:51,505:INFO:Creating metrics dataframe
2025-02-20 01:49:51,524:INFO:Initializing Decision Tree Classifier
2025-02-20 01:49:51,524:INFO:Total runtime is 0.1715105930964152 minutes
2025-02-20 01:49:51,528:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:51,528:INFO:Initializing create_model()
2025-02-20 01:49:51,528:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:51,528:INFO:Checking exceptions
2025-02-20 01:49:51,528:INFO:Importing libraries
2025-02-20 01:49:51,528:INFO:Copying training dataset
2025-02-20 01:49:51,539:INFO:Defining folds
2025-02-20 01:49:51,539:INFO:Declaring metric variables
2025-02-20 01:49:51,545:INFO:Importing untrained model
2025-02-20 01:49:51,550:INFO:Decision Tree Classifier Imported successfully
2025-02-20 01:49:51,557:INFO:Starting cross validation
2025-02-20 01:49:51,561:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,744:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,774:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:51,805:INFO:Calculating mean and std
2025-02-20 01:49:51,805:INFO:Creating metrics dataframe
2025-02-20 01:49:51,805:INFO:Uploading results into container
2025-02-20 01:49:51,805:INFO:Uploading model into container now
2025-02-20 01:49:51,805:INFO:_master_model_container: 4
2025-02-20 01:49:51,805:INFO:_display_container: 2
2025-02-20 01:49:51,805:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=3937, splitter='best')
2025-02-20 01:49:51,805:INFO:create_model() successfully completed......................................
2025-02-20 01:49:52,018:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:52,018:INFO:Creating metrics dataframe
2025-02-20 01:49:52,033:INFO:Initializing SVM - Linear Kernel
2025-02-20 01:49:52,033:INFO:Total runtime is 0.17999573548634848 minutes
2025-02-20 01:49:52,038:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:52,038:INFO:Initializing create_model()
2025-02-20 01:49:52,038:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:52,038:INFO:Checking exceptions
2025-02-20 01:49:52,038:INFO:Importing libraries
2025-02-20 01:49:52,038:INFO:Copying training dataset
2025-02-20 01:49:52,050:INFO:Defining folds
2025-02-20 01:49:52,050:INFO:Declaring metric variables
2025-02-20 01:49:52,052:INFO:Importing untrained model
2025-02-20 01:49:52,061:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 01:49:52,067:INFO:Starting cross validation
2025-02-20 01:49:52,067:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:52,224:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,224:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,240:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,261:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,271:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,287:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,303:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,318:INFO:Calculating mean and std
2025-02-20 01:49:52,318:INFO:Creating metrics dataframe
2025-02-20 01:49:52,318:INFO:Uploading results into container
2025-02-20 01:49:52,318:INFO:Uploading model into container now
2025-02-20 01:49:52,318:INFO:_master_model_container: 5
2025-02-20 01:49:52,318:INFO:_display_container: 2
2025-02-20 01:49:52,318:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3937, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 01:49:52,318:INFO:create_model() successfully completed......................................
2025-02-20 01:49:52,541:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:52,541:INFO:Creating metrics dataframe
2025-02-20 01:49:52,541:INFO:Initializing Ridge Classifier
2025-02-20 01:49:52,541:INFO:Total runtime is 0.1884509245554606 minutes
2025-02-20 01:49:52,541:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:52,541:INFO:Initializing create_model()
2025-02-20 01:49:52,541:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:52,541:INFO:Checking exceptions
2025-02-20 01:49:52,541:INFO:Importing libraries
2025-02-20 01:49:52,541:INFO:Copying training dataset
2025-02-20 01:49:52,556:INFO:Defining folds
2025-02-20 01:49:52,556:INFO:Declaring metric variables
2025-02-20 01:49:52,556:INFO:Importing untrained model
2025-02-20 01:49:52,570:INFO:Ridge Classifier Imported successfully
2025-02-20 01:49:52,582:INFO:Starting cross validation
2025-02-20 01:49:52,588:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:52,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,769:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,781:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,784:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,791:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,792:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,792:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:52,824:INFO:Calculating mean and std
2025-02-20 01:49:52,824:INFO:Creating metrics dataframe
2025-02-20 01:49:52,824:INFO:Uploading results into container
2025-02-20 01:49:52,824:INFO:Uploading model into container now
2025-02-20 01:49:52,824:INFO:_master_model_container: 6
2025-02-20 01:49:52,824:INFO:_display_container: 2
2025-02-20 01:49:52,824:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3937, solver='auto',
                tol=0.0001)
2025-02-20 01:49:52,824:INFO:create_model() successfully completed......................................
2025-02-20 01:49:53,058:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:53,058:INFO:Creating metrics dataframe
2025-02-20 01:49:53,073:INFO:Initializing Random Forest Classifier
2025-02-20 01:49:53,073:INFO:Total runtime is 0.19732885758082072 minutes
2025-02-20 01:49:53,073:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:53,073:INFO:Initializing create_model()
2025-02-20 01:49:53,073:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:53,073:INFO:Checking exceptions
2025-02-20 01:49:53,073:INFO:Importing libraries
2025-02-20 01:49:53,073:INFO:Copying training dataset
2025-02-20 01:49:53,089:INFO:Defining folds
2025-02-20 01:49:53,089:INFO:Declaring metric variables
2025-02-20 01:49:53,097:INFO:Importing untrained model
2025-02-20 01:49:53,104:INFO:Random Forest Classifier Imported successfully
2025-02-20 01:49:53,116:INFO:Starting cross validation
2025-02-20 01:49:53,119:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:54,156:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,156:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,156:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,168:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,169:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,169:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,178:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,187:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,243:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,299:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,306:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,311:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,337:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,337:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,352:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,384:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,424:INFO:Calculating mean and std
2025-02-20 01:49:54,424:INFO:Creating metrics dataframe
2025-02-20 01:49:54,424:INFO:Uploading results into container
2025-02-20 01:49:54,424:INFO:Uploading model into container now
2025-02-20 01:49:54,424:INFO:_master_model_container: 7
2025-02-20 01:49:54,424:INFO:_display_container: 2
2025-02-20 01:49:54,424:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=3937, verbose=0,
                       warm_start=False)
2025-02-20 01:49:54,424:INFO:create_model() successfully completed......................................
2025-02-20 01:49:54,643:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:54,643:INFO:Creating metrics dataframe
2025-02-20 01:49:54,645:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 01:49:54,645:INFO:Total runtime is 0.2235293984413147 minutes
2025-02-20 01:49:54,657:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:54,661:INFO:Initializing create_model()
2025-02-20 01:49:54,661:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:54,661:INFO:Checking exceptions
2025-02-20 01:49:54,661:INFO:Importing libraries
2025-02-20 01:49:54,661:INFO:Copying training dataset
2025-02-20 01:49:54,661:INFO:Defining folds
2025-02-20 01:49:54,661:INFO:Declaring metric variables
2025-02-20 01:49:54,672:INFO:Importing untrained model
2025-02-20 01:49:54,680:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 01:49:54,684:INFO:Starting cross validation
2025-02-20 01:49:54,691:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:54,772:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,788:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,788:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,827:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,828:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,843:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,859:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,875:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:54,906:INFO:Calculating mean and std
2025-02-20 01:49:54,906:INFO:Creating metrics dataframe
2025-02-20 01:49:54,906:INFO:Uploading results into container
2025-02-20 01:49:54,906:INFO:Uploading model into container now
2025-02-20 01:49:54,906:INFO:_master_model_container: 8
2025-02-20 01:49:54,906:INFO:_display_container: 2
2025-02-20 01:49:54,906:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 01:49:54,906:INFO:create_model() successfully completed......................................
2025-02-20 01:49:55,119:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:55,119:INFO:Creating metrics dataframe
2025-02-20 01:49:55,119:INFO:Initializing Ada Boost Classifier
2025-02-20 01:49:55,134:INFO:Total runtime is 0.23167877197265624 minutes
2025-02-20 01:49:55,134:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:55,134:INFO:Initializing create_model()
2025-02-20 01:49:55,134:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:55,141:INFO:Checking exceptions
2025-02-20 01:49:55,141:INFO:Importing libraries
2025-02-20 01:49:55,141:INFO:Copying training dataset
2025-02-20 01:49:55,145:INFO:Defining folds
2025-02-20 01:49:55,145:INFO:Declaring metric variables
2025-02-20 01:49:55,145:INFO:Importing untrained model
2025-02-20 01:49:55,159:INFO:Ada Boost Classifier Imported successfully
2025-02-20 01:49:55,166:INFO:Starting cross validation
2025-02-20 01:49:55,166:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,275:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,286:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,290:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,302:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 01:49:55,760:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,763:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,772:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,772:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,772:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,772:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,787:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,803:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,819:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,834:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:55,850:INFO:Calculating mean and std
2025-02-20 01:49:55,850:INFO:Creating metrics dataframe
2025-02-20 01:49:55,850:INFO:Uploading results into container
2025-02-20 01:49:55,850:INFO:Uploading model into container now
2025-02-20 01:49:55,850:INFO:_master_model_container: 9
2025-02-20 01:49:55,850:INFO:_display_container: 2
2025-02-20 01:49:55,850:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3937)
2025-02-20 01:49:55,850:INFO:create_model() successfully completed......................................
2025-02-20 01:49:56,092:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:56,092:INFO:Creating metrics dataframe
2025-02-20 01:49:56,103:INFO:Initializing Gradient Boosting Classifier
2025-02-20 01:49:56,103:INFO:Total runtime is 0.24782654841740925 minutes
2025-02-20 01:49:56,103:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:56,103:INFO:Initializing create_model()
2025-02-20 01:49:56,103:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:56,103:INFO:Checking exceptions
2025-02-20 01:49:56,103:INFO:Importing libraries
2025-02-20 01:49:56,103:INFO:Copying training dataset
2025-02-20 01:49:56,119:INFO:Defining folds
2025-02-20 01:49:56,119:INFO:Declaring metric variables
2025-02-20 01:49:56,127:INFO:Importing untrained model
2025-02-20 01:49:56,133:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 01:49:56,144:INFO:Starting cross validation
2025-02-20 01:49:56,146:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,724:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,727:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,737:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:57,777:INFO:Calculating mean and std
2025-02-20 01:49:57,777:INFO:Creating metrics dataframe
2025-02-20 01:49:57,777:INFO:Uploading results into container
2025-02-20 01:49:57,777:INFO:Uploading model into container now
2025-02-20 01:49:57,777:INFO:_master_model_container: 10
2025-02-20 01:49:57,777:INFO:_display_container: 2
2025-02-20 01:49:57,777:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3937, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 01:49:57,777:INFO:create_model() successfully completed......................................
2025-02-20 01:49:57,991:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:57,991:INFO:Creating metrics dataframe
2025-02-20 01:49:58,026:INFO:Initializing Linear Discriminant Analysis
2025-02-20 01:49:58,026:INFO:Total runtime is 0.27986634572347 minutes
2025-02-20 01:49:58,026:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:58,026:INFO:Initializing create_model()
2025-02-20 01:49:58,026:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:58,026:INFO:Checking exceptions
2025-02-20 01:49:58,026:INFO:Importing libraries
2025-02-20 01:49:58,026:INFO:Copying training dataset
2025-02-20 01:49:58,038:INFO:Defining folds
2025-02-20 01:49:58,038:INFO:Declaring metric variables
2025-02-20 01:49:58,042:INFO:Importing untrained model
2025-02-20 01:49:58,048:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:49:58,058:INFO:Starting cross validation
2025-02-20 01:49:58,062:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:58,194:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,194:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,194:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,210:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,225:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,241:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,241:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,241:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,245:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:58,272:INFO:Calculating mean and std
2025-02-20 01:49:58,274:INFO:Creating metrics dataframe
2025-02-20 01:49:58,276:INFO:Uploading results into container
2025-02-20 01:49:58,278:INFO:Uploading model into container now
2025-02-20 01:49:58,278:INFO:_master_model_container: 11
2025-02-20 01:49:58,278:INFO:_display_container: 2
2025-02-20 01:49:58,278:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:49:58,278:INFO:create_model() successfully completed......................................
2025-02-20 01:49:58,494:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:58,494:INFO:Creating metrics dataframe
2025-02-20 01:49:58,509:INFO:Initializing Extra Trees Classifier
2025-02-20 01:49:58,509:INFO:Total runtime is 0.2879289905230204 minutes
2025-02-20 01:49:58,525:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:58,525:INFO:Initializing create_model()
2025-02-20 01:49:58,525:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:58,525:INFO:Checking exceptions
2025-02-20 01:49:58,525:INFO:Importing libraries
2025-02-20 01:49:58,525:INFO:Copying training dataset
2025-02-20 01:49:58,525:INFO:Defining folds
2025-02-20 01:49:58,525:INFO:Declaring metric variables
2025-02-20 01:49:58,538:INFO:Importing untrained model
2025-02-20 01:49:58,543:INFO:Extra Trees Classifier Imported successfully
2025-02-20 01:49:58,555:INFO:Starting cross validation
2025-02-20 01:49:58,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:49:59,342:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,385:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,391:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,424:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,424:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,424:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,459:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,459:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,479:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,479:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,479:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,497:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,499:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,505:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,510:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,513:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,513:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,526:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:49:59,539:INFO:Calculating mean and std
2025-02-20 01:49:59,539:INFO:Creating metrics dataframe
2025-02-20 01:49:59,543:INFO:Uploading results into container
2025-02-20 01:49:59,543:INFO:Uploading model into container now
2025-02-20 01:49:59,543:INFO:_master_model_container: 12
2025-02-20 01:49:59,543:INFO:_display_container: 2
2025-02-20 01:49:59,543:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=3937, verbose=0,
                     warm_start=False)
2025-02-20 01:49:59,543:INFO:create_model() successfully completed......................................
2025-02-20 01:49:59,761:INFO:SubProcess create_model() end ==================================
2025-02-20 01:49:59,761:INFO:Creating metrics dataframe
2025-02-20 01:49:59,777:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 01:49:59,777:INFO:Total runtime is 0.3090523838996887 minutes
2025-02-20 01:49:59,777:INFO:SubProcess create_model() called ==================================
2025-02-20 01:49:59,792:INFO:Initializing create_model()
2025-02-20 01:49:59,792:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:49:59,792:INFO:Checking exceptions
2025-02-20 01:49:59,792:INFO:Importing libraries
2025-02-20 01:49:59,792:INFO:Copying training dataset
2025-02-20 01:49:59,792:INFO:Defining folds
2025-02-20 01:49:59,792:INFO:Declaring metric variables
2025-02-20 01:49:59,808:INFO:Importing untrained model
2025-02-20 01:49:59,809:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 01:49:59,817:INFO:Starting cross validation
2025-02-20 01:49:59,824:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:50:00,723:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,738:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,754:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,770:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,770:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,770:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,842:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,855:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,855:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,861:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,872:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,872:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,888:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,912:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,927:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,943:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:00,974:INFO:Calculating mean and std
2025-02-20 01:50:00,974:INFO:Creating metrics dataframe
2025-02-20 01:50:00,978:INFO:Uploading results into container
2025-02-20 01:50:00,978:INFO:Uploading model into container now
2025-02-20 01:50:00,978:INFO:_master_model_container: 13
2025-02-20 01:50:00,978:INFO:_display_container: 2
2025-02-20 01:50:00,982:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3937, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 01:50:00,982:INFO:create_model() successfully completed......................................
2025-02-20 01:50:01,202:INFO:SubProcess create_model() end ==================================
2025-02-20 01:50:01,202:INFO:Creating metrics dataframe
2025-02-20 01:50:01,212:INFO:Initializing Dummy Classifier
2025-02-20 01:50:01,212:INFO:Total runtime is 0.33297151724497476 minutes
2025-02-20 01:50:01,212:INFO:SubProcess create_model() called ==================================
2025-02-20 01:50:01,212:INFO:Initializing create_model()
2025-02-20 01:50:01,212:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3771870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:50:01,212:INFO:Checking exceptions
2025-02-20 01:50:01,212:INFO:Importing libraries
2025-02-20 01:50:01,212:INFO:Copying training dataset
2025-02-20 01:50:01,233:INFO:Defining folds
2025-02-20 01:50:01,233:INFO:Declaring metric variables
2025-02-20 01:50:01,238:INFO:Importing untrained model
2025-02-20 01:50:01,245:INFO:Dummy Classifier Imported successfully
2025-02-20 01:50:01,250:INFO:Starting cross validation
2025-02-20 01:50:01,250:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 01:50:01,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,403:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,418:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,426:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,426:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,426:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

ier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:01,442:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:01,473:INFO:Calculating mean and std
2025-02-20 01:50:01,474:INFO:Creating metrics dataframe
2025-02-20 01:50:01,476:INFO:Uploading results into container
2025-02-20 01:50:01,478:INFO:Uploading model into container now
2025-02-20 01:50:01,479:INFO:_master_model_container: 14
2025-02-20 01:50:01,479:INFO:_display_container: 2
2025-02-20 01:50:01,479:INFO:DummyClassifier(constant=None, random_state=3937, strategy='prior')
2025-02-20 01:50:01,480:INFO:create_model() successfully completed......................................
2025-02-20 01:50:01,692:INFO:SubProcess create_model() end ==================================
2025-02-20 01:50:01,692:INFO:Creating metrics dataframe
2025-02-20 01:50:01,705:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 01:50:01,705:INFO:Initializing create_model()
2025-02-20 01:50:01,705:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 01:50:01,705:INFO:Checking exceptions
2025-02-20 01:50:01,705:INFO:Importing libraries
2025-02-20 01:50:01,705:INFO:Copying training dataset
2025-02-20 01:50:01,729:INFO:Defining folds
2025-02-20 01:50:01,729:INFO:Declaring metric variables
2025-02-20 01:50:01,730:INFO:Importing untrained model
2025-02-20 01:50:01,730:INFO:Declaring custom model
2025-02-20 01:50:01,730:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 01:50:01,732:INFO:Cross validation set to False
2025-02-20 01:50:01,732:INFO:Fitting Model
2025-02-20 01:50:01,821:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:50:01,821:INFO:create_model() successfully completed......................................
2025-02-20 01:50:02,083:INFO:_master_model_container: 14
2025-02-20 01:50:02,083:INFO:_display_container: 2
2025-02-20 01:50:02,083:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 01:50:02,083:INFO:compare_models() successfully completed......................................
2025-02-20 01:50:02,149:INFO:Initializing predict_model()
2025-02-20 01:50:02,149:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB55DAA70>)
2025-02-20 01:50:02,149:INFO:Checking exceptions
2025-02-20 01:50:02,149:INFO:Preloading libraries
2025-02-20 01:50:02,153:INFO:Set up data.
2025-02-20 01:50:02,163:INFO:Set up index.
2025-02-20 01:50:02,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 01:50:02,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:02,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:02,231:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:02,239:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 01:50:02,242:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:02,529:INFO:Initializing save_model()
2025-02-20 01:50:02,529:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 01:50:02,529:INFO:Adding model into prep_pipe
2025-02-20 01:50:02,537:INFO:GBC.pkl saved in current working directory
2025-02-20 01:50:02,546:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-02-20 01:50:02,546:INFO:save_model() successfully completed......................................
2025-02-20 01:50:02,850:INFO:Initializing load_model()
2025-02-20 01:50:02,850:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:50:02,991:INFO:Initializing predict_model()
2025-02-20 01:50:02,991:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB55D9120>)
2025-02-20 01:50:02,991:INFO:Checking exceptions
2025-02-20 01:50:02,991:INFO:Preloading libraries
2025-02-20 01:50:02,991:INFO:Set up data.
2025-02-20 01:50:02,999:INFO:Set up index.
2025-02-20 01:50:03,369:INFO:Initializing load_model()
2025-02-20 01:50:03,369:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:50:03,404:INFO:Initializing predict_model()
2025-02-20 01:50:03,404:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB55DBE20>)
2025-02-20 01:50:03,404:INFO:Checking exceptions
2025-02-20 01:50:03,404:INFO:Preloading libraries
2025-02-20 01:50:03,408:INFO:Set up data.
2025-02-20 01:50:03,420:INFO:Set up index.
2025-02-20 01:50:03,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:03,610:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:50:03,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 01:51:21,982:INFO:Initializing load_model()
2025-02-20 01:51:21,982:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 01:51:22,014:INFO:Initializing predict_model()
2025-02-20 01:51:22,014:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB39BE8C0>)
2025-02-20 01:51:22,014:INFO:Checking exceptions
2025-02-20 01:51:22,014:INFO:Preloading libraries
2025-02-20 01:51:22,022:INFO:Set up data.
2025-02-20 01:51:22,022:INFO:Set up index.
2025-02-20 12:10:17,793:INFO:Initializing load_model()
2025-02-20 12:10:17,795:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 12:10:17,817:INFO:Initializing predict_model()
2025-02-20 12:10:17,817:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB563AE90>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB56C5BD0>)
2025-02-20 12:10:17,817:INFO:Checking exceptions
2025-02-20 12:10:17,817:INFO:Preloading libraries
2025-02-20 12:10:17,827:INFO:Set up data.
2025-02-20 12:10:17,827:INFO:Set up index.
2025-02-20 12:11:27,285:INFO:PyCaret ClassificationExperiment
2025-02-20 12:11:27,285:INFO:Logging name: clf-default-name
2025-02-20 12:11:27,285:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 12:11:27,293:INFO:version 3.3.2
2025-02-20 12:11:27,293:INFO:Initializing setup()
2025-02-20 12:11:27,293:INFO:self.USI: 2399
2025-02-20 12:11:27,293:INFO:self._variable_keys: {'data', 'exp_name_log', 'fold_generator', 'fold_groups_param', 'seed', 'USI', 'X_test', 'X_train', 'memory', 'logging_param', 'pipeline', 'exp_id', 'gpu_param', 'log_plots_param', 'target_param', 'y', 'y_test', '_available_plots', 'idx', '_ml_usecase', 'y_train', 'html_param', 'X', 'is_multiclass', 'fix_imbalance', 'n_jobs_param', 'gpu_n_jobs_param', 'fold_shuffle_param'}
2025-02-20 12:11:27,293:INFO:Checking environment
2025-02-20 12:11:27,293:INFO:python_version: 3.10.14
2025-02-20 12:11:27,293:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 12:11:27,293:INFO:machine: AMD64
2025-02-20 12:11:27,293:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 12:11:27,312:INFO:Memory: svmem(total=16423702528, available=3755687936, percent=77.1, used=12668014592, free=3755687936)
2025-02-20 12:11:27,313:INFO:Physical Core: 8
2025-02-20 12:11:27,313:INFO:Logical Core: 16
2025-02-20 12:11:27,313:INFO:Checking libraries
2025-02-20 12:11:27,313:INFO:System:
2025-02-20 12:11:27,313:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 12:11:27,313:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 12:11:27,313:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 12:11:27,313:INFO:PyCaret required dependencies:
2025-02-20 12:11:27,313:INFO:                 pip: 25.0
2025-02-20 12:11:27,313:INFO:          setuptools: 75.8.0
2025-02-20 12:11:27,313:INFO:             pycaret: 3.3.2
2025-02-20 12:11:27,313:INFO:             IPython: 8.32.0
2025-02-20 12:11:27,313:INFO:          ipywidgets: 8.1.5
2025-02-20 12:11:27,313:INFO:                tqdm: 4.67.1
2025-02-20 12:11:27,313:INFO:               numpy: 1.26.4
2025-02-20 12:11:27,313:INFO:              pandas: 2.1.4
2025-02-20 12:11:27,313:INFO:              jinja2: 3.1.5
2025-02-20 12:11:27,313:INFO:               scipy: 1.11.4
2025-02-20 12:11:27,313:INFO:              joblib: 1.3.2
2025-02-20 12:11:27,313:INFO:             sklearn: 1.4.2
2025-02-20 12:11:27,313:INFO:                pyod: 2.0.3
2025-02-20 12:11:27,313:INFO:            imblearn: 0.13.0
2025-02-20 12:11:27,313:INFO:   category_encoders: 2.7.0
2025-02-20 12:11:27,313:INFO:            lightgbm: 4.6.0
2025-02-20 12:11:27,313:INFO:               numba: 0.61.0
2025-02-20 12:11:27,313:INFO:            requests: 2.32.3
2025-02-20 12:11:27,313:INFO:          matplotlib: 3.7.5
2025-02-20 12:11:27,313:INFO:          scikitplot: 0.3.7
2025-02-20 12:11:27,313:INFO:         yellowbrick: 1.5
2025-02-20 12:11:27,313:INFO:              plotly: 5.24.1
2025-02-20 12:11:27,313:INFO:    plotly-resampler: Not installed
2025-02-20 12:11:27,313:INFO:             kaleido: 0.2.1
2025-02-20 12:11:27,313:INFO:           schemdraw: 0.15
2025-02-20 12:11:27,313:INFO:         statsmodels: 0.14.4
2025-02-20 12:11:27,313:INFO:              sktime: 0.26.0
2025-02-20 12:11:27,313:INFO:               tbats: 1.1.3
2025-02-20 12:11:27,313:INFO:            pmdarima: 2.0.4
2025-02-20 12:11:27,313:INFO:              psutil: 7.0.0
2025-02-20 12:11:27,313:INFO:          markupsafe: 3.0.2
2025-02-20 12:11:27,313:INFO:             pickle5: Not installed
2025-02-20 12:11:27,313:INFO:         cloudpickle: 3.1.1
2025-02-20 12:11:27,313:INFO:         deprecation: 2.1.0
2025-02-20 12:11:27,313:INFO:              xxhash: 3.5.0
2025-02-20 12:11:27,313:INFO:           wurlitzer: Not installed
2025-02-20 12:11:27,313:INFO:PyCaret optional dependencies:
2025-02-20 12:11:27,313:INFO:                shap: Not installed
2025-02-20 12:11:27,313:INFO:           interpret: Not installed
2025-02-20 12:11:27,313:INFO:                umap: Not installed
2025-02-20 12:11:27,313:INFO:     ydata_profiling: Not installed
2025-02-20 12:11:27,313:INFO:  explainerdashboard: Not installed
2025-02-20 12:11:27,313:INFO:             autoviz: Not installed
2025-02-20 12:11:27,313:INFO:           fairlearn: Not installed
2025-02-20 12:11:27,313:INFO:          deepchecks: Not installed
2025-02-20 12:11:27,313:INFO:             xgboost: Not installed
2025-02-20 12:11:27,313:INFO:            catboost: Not installed
2025-02-20 12:11:27,317:INFO:              kmodes: Not installed
2025-02-20 12:11:27,317:INFO:             mlxtend: Not installed
2025-02-20 12:11:27,317:INFO:       statsforecast: Not installed
2025-02-20 12:11:27,317:INFO:        tune_sklearn: Not installed
2025-02-20 12:11:27,317:INFO:                 ray: Not installed
2025-02-20 12:11:27,317:INFO:            hyperopt: Not installed
2025-02-20 12:11:27,317:INFO:              optuna: Not installed
2025-02-20 12:11:27,317:INFO:               skopt: Not installed
2025-02-20 12:11:27,317:INFO:              mlflow: Not installed
2025-02-20 12:11:27,317:INFO:              gradio: Not installed
2025-02-20 12:11:27,317:INFO:             fastapi: Not installed
2025-02-20 12:11:27,317:INFO:             uvicorn: Not installed
2025-02-20 12:11:27,317:INFO:              m2cgen: Not installed
2025-02-20 12:11:27,317:INFO:           evidently: Not installed
2025-02-20 12:11:27,317:INFO:               fugue: Not installed
2025-02-20 12:11:27,317:INFO:           streamlit: Not installed
2025-02-20 12:11:27,317:INFO:             prophet: Not installed
2025-02-20 12:11:27,317:INFO:None
2025-02-20 12:11:27,317:INFO:Set up data.
2025-02-20 12:11:27,328:INFO:Set up folding strategy.
2025-02-20 12:11:27,328:INFO:Set up train/test split.
2025-02-20 12:11:27,342:INFO:Set up index.
2025-02-20 12:11:27,345:INFO:Assigning column types.
2025-02-20 12:11:27,352:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 12:11:27,409:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,413:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,452:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,452:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,512:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,512:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,562:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,562:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,562:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 12:11:27,628:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,661:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,728:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 12:11:27,776:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,778:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,779:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 12:11:27,880:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,880:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,979:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,979:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:27,979:INFO:Preparing preprocessing pipeline...
2025-02-20 12:11:27,979:INFO:Set up label encoding.
2025-02-20 12:11:27,979:INFO:Set up simple imputation.
2025-02-20 12:11:27,989:INFO:Set up encoding of categorical features.
2025-02-20 12:11:27,989:INFO:Set up column name cleaning.
2025-02-20 12:11:28,146:INFO:Finished creating preprocessing pipeline.
2025-02-20 12:11:28,146:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 12:11:28,146:INFO:Creating final display dataframe.
2025-02-20 12:11:28,578:INFO:Setup _display_container:                     Description             Value
0                    Session id              8705
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 13)
6   Transformed train set shape        (4922, 13)
7    Transformed test set shape        (2110, 13)
8              Numeric features                 8
9          Categorical features                 1
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              2399
2025-02-20 12:11:28,663:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:28,663:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:28,762:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:28,762:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 12:11:28,762:INFO:setup() successfully completed in 1.48s...............
2025-02-20 12:11:28,770:INFO:Initializing compare_models()
2025-02-20 12:11:28,770:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 12:11:28,778:INFO:Checking exceptions
2025-02-20 12:11:28,785:INFO:Preparing display monitor
2025-02-20 12:11:28,819:INFO:Initializing Logistic Regression
2025-02-20 12:11:28,819:INFO:Total runtime is 0.0 minutes
2025-02-20 12:11:28,823:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:28,824:INFO:Initializing create_model()
2025-02-20 12:11:28,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:28,825:INFO:Checking exceptions
2025-02-20 12:11:28,825:INFO:Importing libraries
2025-02-20 12:11:28,825:INFO:Copying training dataset
2025-02-20 12:11:28,836:INFO:Defining folds
2025-02-20 12:11:28,836:INFO:Declaring metric variables
2025-02-20 12:11:28,837:INFO:Importing untrained model
2025-02-20 12:11:28,845:INFO:Logistic Regression Imported successfully
2025-02-20 12:11:28,854:INFO:Starting cross validation
2025-02-20 12:11:28,854:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:34,781:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,797:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,797:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,841:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:34,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,849:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,857:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,865:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,865:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,865:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,865:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,865:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,871:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,873:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,883:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,887:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,901:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,906:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:34,930:INFO:Calculating mean and std
2025-02-20 12:11:34,931:INFO:Creating metrics dataframe
2025-02-20 12:11:34,934:INFO:Uploading results into container
2025-02-20 12:11:34,937:INFO:Uploading model into container now
2025-02-20 12:11:34,937:INFO:_master_model_container: 1
2025-02-20 12:11:34,937:INFO:_display_container: 2
2025-02-20 12:11:34,937:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:11:34,939:INFO:create_model() successfully completed......................................
2025-02-20 12:11:35,187:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:35,187:INFO:Creating metrics dataframe
2025-02-20 12:11:35,195:INFO:Initializing K Neighbors Classifier
2025-02-20 12:11:35,195:INFO:Total runtime is 0.10626580317815144 minutes
2025-02-20 12:11:35,201:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:35,201:INFO:Initializing create_model()
2025-02-20 12:11:35,201:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:35,201:INFO:Checking exceptions
2025-02-20 12:11:35,201:INFO:Importing libraries
2025-02-20 12:11:35,201:INFO:Copying training dataset
2025-02-20 12:11:35,217:INFO:Defining folds
2025-02-20 12:11:35,217:INFO:Declaring metric variables
2025-02-20 12:11:35,221:INFO:Importing untrained model
2025-02-20 12:11:35,231:INFO:K Neighbors Classifier Imported successfully
2025-02-20 12:11:35,239:INFO:Starting cross validation
2025-02-20 12:11:35,247:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:35,550:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,562:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,571:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,579:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,579:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,588:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:35,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,158:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,181:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,182:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,182:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,198:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,213:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,245:INFO:Calculating mean and std
2025-02-20 12:11:39,245:INFO:Creating metrics dataframe
2025-02-20 12:11:39,245:INFO:Uploading results into container
2025-02-20 12:11:39,245:INFO:Uploading model into container now
2025-02-20 12:11:39,245:INFO:_master_model_container: 2
2025-02-20 12:11:39,245:INFO:_display_container: 2
2025-02-20 12:11:39,245:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 12:11:39,245:INFO:create_model() successfully completed......................................
2025-02-20 12:11:39,549:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:39,551:INFO:Creating metrics dataframe
2025-02-20 12:11:39,563:INFO:Initializing Naive Bayes
2025-02-20 12:11:39,563:INFO:Total runtime is 0.1790668527285258 minutes
2025-02-20 12:11:39,570:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:39,570:INFO:Initializing create_model()
2025-02-20 12:11:39,570:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:39,570:INFO:Checking exceptions
2025-02-20 12:11:39,570:INFO:Importing libraries
2025-02-20 12:11:39,570:INFO:Copying training dataset
2025-02-20 12:11:39,582:INFO:Defining folds
2025-02-20 12:11:39,582:INFO:Declaring metric variables
2025-02-20 12:11:39,586:INFO:Importing untrained model
2025-02-20 12:11:39,594:INFO:Naive Bayes Imported successfully
2025-02-20 12:11:39,597:INFO:Starting cross validation
2025-02-20 12:11:39,612:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:39,790:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,790:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,790:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,796:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,798:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,801:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,806:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,814:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,822:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,822:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,822:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,822:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,830:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:39,845:INFO:Calculating mean and std
2025-02-20 12:11:39,847:INFO:Creating metrics dataframe
2025-02-20 12:11:39,847:INFO:Uploading results into container
2025-02-20 12:11:39,847:INFO:Uploading model into container now
2025-02-20 12:11:39,847:INFO:_master_model_container: 3
2025-02-20 12:11:39,847:INFO:_display_container: 2
2025-02-20 12:11:39,847:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 12:11:39,847:INFO:create_model() successfully completed......................................
2025-02-20 12:11:40,075:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:40,075:INFO:Creating metrics dataframe
2025-02-20 12:11:40,087:INFO:Initializing Decision Tree Classifier
2025-02-20 12:11:40,087:INFO:Total runtime is 0.18779132763544717 minutes
2025-02-20 12:11:40,092:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:40,093:INFO:Initializing create_model()
2025-02-20 12:11:40,093:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:40,093:INFO:Checking exceptions
2025-02-20 12:11:40,093:INFO:Importing libraries
2025-02-20 12:11:40,093:INFO:Copying training dataset
2025-02-20 12:11:40,103:INFO:Defining folds
2025-02-20 12:11:40,104:INFO:Declaring metric variables
2025-02-20 12:11:40,111:INFO:Importing untrained model
2025-02-20 12:11:40,118:INFO:Decision Tree Classifier Imported successfully
2025-02-20 12:11:40,136:INFO:Starting cross validation
2025-02-20 12:11:40,136:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:40,362:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,395:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,409:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,433:INFO:Calculating mean and std
2025-02-20 12:11:40,433:INFO:Creating metrics dataframe
2025-02-20 12:11:40,433:INFO:Uploading results into container
2025-02-20 12:11:40,433:INFO:Uploading model into container now
2025-02-20 12:11:40,433:INFO:_master_model_container: 4
2025-02-20 12:11:40,433:INFO:_display_container: 2
2025-02-20 12:11:40,433:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=8705, splitter='best')
2025-02-20 12:11:40,433:INFO:create_model() successfully completed......................................
2025-02-20 12:11:40,680:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:40,680:INFO:Creating metrics dataframe
2025-02-20 12:11:40,690:INFO:Initializing SVM - Linear Kernel
2025-02-20 12:11:40,690:INFO:Total runtime is 0.19784240325291952 minutes
2025-02-20 12:11:40,694:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:40,694:INFO:Initializing create_model()
2025-02-20 12:11:40,695:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:40,695:INFO:Checking exceptions
2025-02-20 12:11:40,695:INFO:Importing libraries
2025-02-20 12:11:40,696:INFO:Copying training dataset
2025-02-20 12:11:40,701:INFO:Defining folds
2025-02-20 12:11:40,701:INFO:Declaring metric variables
2025-02-20 12:11:40,701:INFO:Importing untrained model
2025-02-20 12:11:40,712:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 12:11:40,717:INFO:Starting cross validation
2025-02-20 12:11:40,727:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:40,904:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,916:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,928:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,929:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,945:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,961:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:40,976:INFO:Calculating mean and std
2025-02-20 12:11:40,976:INFO:Creating metrics dataframe
2025-02-20 12:11:40,976:INFO:Uploading results into container
2025-02-20 12:11:40,976:INFO:Uploading model into container now
2025-02-20 12:11:40,976:INFO:_master_model_container: 5
2025-02-20 12:11:40,976:INFO:_display_container: 2
2025-02-20 12:11:40,976:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=8705, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 12:11:40,976:INFO:create_model() successfully completed......................................
2025-02-20 12:11:41,182:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:41,182:INFO:Creating metrics dataframe
2025-02-20 12:11:41,197:INFO:Initializing Ridge Classifier
2025-02-20 12:11:41,197:INFO:Total runtime is 0.20630293289820353 minutes
2025-02-20 12:11:41,197:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:41,197:INFO:Initializing create_model()
2025-02-20 12:11:41,197:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:41,197:INFO:Checking exceptions
2025-02-20 12:11:41,197:INFO:Importing libraries
2025-02-20 12:11:41,197:INFO:Copying training dataset
2025-02-20 12:11:41,213:INFO:Defining folds
2025-02-20 12:11:41,213:INFO:Declaring metric variables
2025-02-20 12:11:41,213:INFO:Importing untrained model
2025-02-20 12:11:41,224:INFO:Ridge Classifier Imported successfully
2025-02-20 12:11:41,236:INFO:Starting cross validation
2025-02-20 12:11:41,240:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,374:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,399:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,413:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:41,444:INFO:Calculating mean and std
2025-02-20 12:11:41,446:INFO:Creating metrics dataframe
2025-02-20 12:11:41,448:INFO:Uploading results into container
2025-02-20 12:11:41,450:INFO:Uploading model into container now
2025-02-20 12:11:41,450:INFO:_master_model_container: 6
2025-02-20 12:11:41,450:INFO:_display_container: 2
2025-02-20 12:11:41,451:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=8705, solver='auto',
                tol=0.0001)
2025-02-20 12:11:41,451:INFO:create_model() successfully completed......................................
2025-02-20 12:11:41,671:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:41,671:INFO:Creating metrics dataframe
2025-02-20 12:11:41,671:INFO:Initializing Random Forest Classifier
2025-02-20 12:11:41,671:INFO:Total runtime is 0.21420344114303588 minutes
2025-02-20 12:11:41,687:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:41,687:INFO:Initializing create_model()
2025-02-20 12:11:41,687:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:41,687:INFO:Checking exceptions
2025-02-20 12:11:41,687:INFO:Importing libraries
2025-02-20 12:11:41,687:INFO:Copying training dataset
2025-02-20 12:11:41,703:INFO:Defining folds
2025-02-20 12:11:41,703:INFO:Declaring metric variables
2025-02-20 12:11:41,706:INFO:Importing untrained model
2025-02-20 12:11:41,714:INFO:Random Forest Classifier Imported successfully
2025-02-20 12:11:41,721:INFO:Starting cross validation
2025-02-20 12:11:41,721:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:42,762:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,777:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,793:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,808:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,824:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,845:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,879:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:42,894:INFO:Calculating mean and std
2025-02-20 12:11:42,894:INFO:Creating metrics dataframe
2025-02-20 12:11:42,894:INFO:Uploading results into container
2025-02-20 12:11:42,894:INFO:Uploading model into container now
2025-02-20 12:11:42,894:INFO:_master_model_container: 7
2025-02-20 12:11:42,894:INFO:_display_container: 2
2025-02-20 12:11:42,894:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=8705, verbose=0,
                       warm_start=False)
2025-02-20 12:11:42,894:INFO:create_model() successfully completed......................................
2025-02-20 12:11:43,110:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:43,110:INFO:Creating metrics dataframe
2025-02-20 12:11:43,117:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 12:11:43,117:INFO:Total runtime is 0.2382915417353312 minutes
2025-02-20 12:11:43,126:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:43,126:INFO:Initializing create_model()
2025-02-20 12:11:43,126:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:43,126:INFO:Checking exceptions
2025-02-20 12:11:43,126:INFO:Importing libraries
2025-02-20 12:11:43,126:INFO:Copying training dataset
2025-02-20 12:11:43,126:INFO:Defining folds
2025-02-20 12:11:43,126:INFO:Declaring metric variables
2025-02-20 12:11:43,141:INFO:Importing untrained model
2025-02-20 12:11:43,145:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 12:11:43,152:INFO:Starting cross validation
2025-02-20 12:11:43,156:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:43,244:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,244:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,260:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,267:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,276:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,288:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,292:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 12:11:43,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,308:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,323:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,339:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:43,370:INFO:Calculating mean and std
2025-02-20 12:11:43,370:INFO:Creating metrics dataframe
2025-02-20 12:11:43,370:INFO:Uploading results into container
2025-02-20 12:11:43,370:INFO:Uploading model into container now
2025-02-20 12:11:43,370:INFO:_master_model_container: 8
2025-02-20 12:11:43,370:INFO:_display_container: 2
2025-02-20 12:11:43,370:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 12:11:43,370:INFO:create_model() successfully completed......................................
2025-02-20 12:11:43,592:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:43,592:INFO:Creating metrics dataframe
2025-02-20 12:11:43,592:INFO:Initializing Ada Boost Classifier
2025-02-20 12:11:43,592:INFO:Total runtime is 0.2462177872657776 minutes
2025-02-20 12:11:43,608:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:43,608:INFO:Initializing create_model()
2025-02-20 12:11:43,608:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:43,608:INFO:Checking exceptions
2025-02-20 12:11:43,608:INFO:Importing libraries
2025-02-20 12:11:43,608:INFO:Copying training dataset
2025-02-20 12:11:43,617:INFO:Defining folds
2025-02-20 12:11:43,617:INFO:Declaring metric variables
2025-02-20 12:11:43,617:INFO:Importing untrained model
2025-02-20 12:11:43,629:INFO:Ada Boost Classifier Imported successfully
2025-02-20 12:11:43,648:INFO:Starting cross validation
2025-02-20 12:11:43,648:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:43,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,742:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,758:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,773:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,773:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,773:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,773:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:43,789:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 12:11:44,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,331:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,363:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,377:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,379:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,381:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,383:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,389:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,394:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:44,426:INFO:Calculating mean and std
2025-02-20 12:11:44,426:INFO:Creating metrics dataframe
2025-02-20 12:11:44,426:INFO:Uploading results into container
2025-02-20 12:11:44,426:INFO:Uploading model into container now
2025-02-20 12:11:44,426:INFO:_master_model_container: 9
2025-02-20 12:11:44,426:INFO:_display_container: 2
2025-02-20 12:11:44,426:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=8705)
2025-02-20 12:11:44,426:INFO:create_model() successfully completed......................................
2025-02-20 12:11:44,679:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:44,679:INFO:Creating metrics dataframe
2025-02-20 12:11:44,694:INFO:Initializing Gradient Boosting Classifier
2025-02-20 12:11:44,694:INFO:Total runtime is 0.2645828684171041 minutes
2025-02-20 12:11:44,707:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:44,709:INFO:Initializing create_model()
2025-02-20 12:11:44,709:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:44,709:INFO:Checking exceptions
2025-02-20 12:11:44,709:INFO:Importing libraries
2025-02-20 12:11:44,709:INFO:Copying training dataset
2025-02-20 12:11:44,718:INFO:Defining folds
2025-02-20 12:11:44,718:INFO:Declaring metric variables
2025-02-20 12:11:44,723:INFO:Importing untrained model
2025-02-20 12:11:44,727:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 12:11:44,738:INFO:Starting cross validation
2025-02-20 12:11:44,741:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:46,356:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,364:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,370:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,378:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,387:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,388:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,396:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,412:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,443:INFO:Calculating mean and std
2025-02-20 12:11:46,443:INFO:Creating metrics dataframe
2025-02-20 12:11:46,446:INFO:Uploading results into container
2025-02-20 12:11:46,446:INFO:Uploading model into container now
2025-02-20 12:11:46,446:INFO:_master_model_container: 10
2025-02-20 12:11:46,446:INFO:_display_container: 2
2025-02-20 12:11:46,446:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=8705, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 12:11:46,446:INFO:create_model() successfully completed......................................
2025-02-20 12:11:46,658:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:46,658:INFO:Creating metrics dataframe
2025-02-20 12:11:46,674:INFO:Initializing Linear Discriminant Analysis
2025-02-20 12:11:46,674:INFO:Total runtime is 0.2975797573725383 minutes
2025-02-20 12:11:46,674:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:46,674:INFO:Initializing create_model()
2025-02-20 12:11:46,674:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:46,674:INFO:Checking exceptions
2025-02-20 12:11:46,674:INFO:Importing libraries
2025-02-20 12:11:46,674:INFO:Copying training dataset
2025-02-20 12:11:46,690:INFO:Defining folds
2025-02-20 12:11:46,690:INFO:Declaring metric variables
2025-02-20 12:11:46,698:INFO:Importing untrained model
2025-02-20 12:11:46,703:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 12:11:46,712:INFO:Starting cross validation
2025-02-20 12:11:46,714:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:46,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,846:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,863:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,878:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,894:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,894:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:46,926:INFO:Calculating mean and std
2025-02-20 12:11:46,929:INFO:Creating metrics dataframe
2025-02-20 12:11:46,929:INFO:Uploading results into container
2025-02-20 12:11:46,933:INFO:Uploading model into container now
2025-02-20 12:11:46,933:INFO:_master_model_container: 11
2025-02-20 12:11:46,933:INFO:_display_container: 2
2025-02-20 12:11:46,933:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 12:11:46,933:INFO:create_model() successfully completed......................................
2025-02-20 12:11:47,155:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:47,155:INFO:Creating metrics dataframe
2025-02-20 12:11:47,163:INFO:Initializing Extra Trees Classifier
2025-02-20 12:11:47,163:INFO:Total runtime is 0.30573291381200157 minutes
2025-02-20 12:11:47,163:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:47,163:INFO:Initializing create_model()
2025-02-20 12:11:47,163:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:47,163:INFO:Checking exceptions
2025-02-20 12:11:47,163:INFO:Importing libraries
2025-02-20 12:11:47,163:INFO:Copying training dataset
2025-02-20 12:11:47,180:INFO:Defining folds
2025-02-20 12:11:47,180:INFO:Declaring metric variables
2025-02-20 12:11:47,180:INFO:Importing untrained model
2025-02-20 12:11:47,193:INFO:Extra Trees Classifier Imported successfully
2025-02-20 12:11:47,203:INFO:Starting cross validation
2025-02-20 12:11:47,212:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:47,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,921:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,930:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,980:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,980:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,996:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:47,999:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,012:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,025:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,029:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:48,041:INFO:Calculating mean and std
2025-02-20 12:11:48,041:INFO:Creating metrics dataframe
2025-02-20 12:11:48,046:INFO:Uploading results into container
2025-02-20 12:11:48,046:INFO:Uploading model into container now
2025-02-20 12:11:48,046:INFO:_master_model_container: 12
2025-02-20 12:11:48,046:INFO:_display_container: 2
2025-02-20 12:11:48,046:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=8705, verbose=0,
                     warm_start=False)
2025-02-20 12:11:48,046:INFO:create_model() successfully completed......................................
2025-02-20 12:11:48,265:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:48,265:INFO:Creating metrics dataframe
2025-02-20 12:11:48,276:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 12:11:48,276:INFO:Total runtime is 0.3242733518282573 minutes
2025-02-20 12:11:48,279:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:48,279:INFO:Initializing create_model()
2025-02-20 12:11:48,279:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:48,279:INFO:Checking exceptions
2025-02-20 12:11:48,279:INFO:Importing libraries
2025-02-20 12:11:48,279:INFO:Copying training dataset
2025-02-20 12:11:48,279:INFO:Defining folds
2025-02-20 12:11:48,291:INFO:Declaring metric variables
2025-02-20 12:11:48,296:INFO:Importing untrained model
2025-02-20 12:11:48,300:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 12:11:48,304:INFO:Starting cross validation
2025-02-20 12:11:48,304:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:49,167:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,174:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,191:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,196:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,246:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,255:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,262:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,263:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,279:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,284:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,296:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,318:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,330:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,346:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,358:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,367:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,420:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,429:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,460:INFO:Calculating mean and std
2025-02-20 12:11:49,462:INFO:Creating metrics dataframe
2025-02-20 12:11:49,463:INFO:Uploading results into container
2025-02-20 12:11:49,463:INFO:Uploading model into container now
2025-02-20 12:11:49,463:INFO:_master_model_container: 13
2025-02-20 12:11:49,463:INFO:_display_container: 2
2025-02-20 12:11:49,463:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=8705, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 12:11:49,463:INFO:create_model() successfully completed......................................
2025-02-20 12:11:49,689:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:49,689:INFO:Creating metrics dataframe
2025-02-20 12:11:49,700:INFO:Initializing Dummy Classifier
2025-02-20 12:11:49,700:INFO:Total runtime is 0.3480102101961772 minutes
2025-02-20 12:11:49,713:INFO:SubProcess create_model() called ==================================
2025-02-20 12:11:49,713:INFO:Initializing create_model()
2025-02-20 12:11:49,713:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x0000023AB3B6A620>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:49,713:INFO:Checking exceptions
2025-02-20 12:11:49,713:INFO:Importing libraries
2025-02-20 12:11:49,713:INFO:Copying training dataset
2025-02-20 12:11:49,721:INFO:Defining folds
2025-02-20 12:11:49,721:INFO:Declaring metric variables
2025-02-20 12:11:49,730:INFO:Importing untrained model
2025-02-20 12:11:49,736:INFO:Dummy Classifier Imported successfully
2025-02-20 12:11:49,746:INFO:Starting cross validation
2025-02-20 12:11:49,746:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 12:11:49,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,880:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,890:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,896:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,898:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,900:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,913:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,920:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:49,920:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:49,944:INFO:Calculating mean and std
2025-02-20 12:11:49,946:INFO:Creating metrics dataframe
2025-02-20 12:11:49,946:INFO:Uploading results into container
2025-02-20 12:11:49,946:INFO:Uploading model into container now
2025-02-20 12:11:49,946:INFO:_master_model_container: 14
2025-02-20 12:11:49,946:INFO:_display_container: 2
2025-02-20 12:11:49,946:INFO:DummyClassifier(constant=None, random_state=8705, strategy='prior')
2025-02-20 12:11:49,946:INFO:create_model() successfully completed......................................
2025-02-20 12:11:50,163:INFO:SubProcess create_model() end ==================================
2025-02-20 12:11:50,163:INFO:Creating metrics dataframe
2025-02-20 12:11:50,180:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 12:11:50,196:INFO:Initializing create_model()
2025-02-20 12:11:50,196:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 12:11:50,196:INFO:Checking exceptions
2025-02-20 12:11:50,203:INFO:Importing libraries
2025-02-20 12:11:50,203:INFO:Copying training dataset
2025-02-20 12:11:50,212:INFO:Defining folds
2025-02-20 12:11:50,212:INFO:Declaring metric variables
2025-02-20 12:11:50,212:INFO:Importing untrained model
2025-02-20 12:11:50,212:INFO:Declaring custom model
2025-02-20 12:11:50,217:INFO:Logistic Regression Imported successfully
2025-02-20 12:11:50,217:INFO:Cross validation set to False
2025-02-20 12:11:50,217:INFO:Fitting Model
2025-02-20 12:11:51,037:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 12:11:51,037:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:11:51,037:INFO:create_model() successfully completed......................................
2025-02-20 12:11:51,312:INFO:_master_model_container: 14
2025-02-20 12:11:51,312:INFO:_display_container: 2
2025-02-20 12:11:51,312:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 12:11:51,312:INFO:compare_models() successfully completed......................................
2025-02-20 12:11:51,386:INFO:Initializing predict_model()
2025-02-20 12:11:51,386:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB2C42320>)
2025-02-20 12:11:51,386:INFO:Checking exceptions
2025-02-20 12:11:51,386:INFO:Preloading libraries
2025-02-20 12:11:51,389:INFO:Set up data.
2025-02-20 12:11:51,396:INFO:Set up index.
2025-02-20 12:11:51,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 12:11:51,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:51,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:51,454:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 12:11:51,463:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 12:11:51,732:INFO:Initializing save_model()
2025-02-20 12:11:51,732:INFO:save_model(model=LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=8705, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 12:11:51,732:INFO:Adding model into prep_pipe
2025-02-20 12:11:51,749:INFO:GBC.pkl saved in current working directory
2025-02-20 12:11:51,759:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=8705,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False)
2025-02-20 12:11:51,760:INFO:save_model() successfully completed......................................
2025-02-20 12:11:52,028:INFO:Initializing load_model()
2025-02-20 12:11:52,028:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 12:11:52,148:INFO:Initializing predict_model()
2025-02-20 12:11:52,148:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x0000023AB55622F0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LogisticRegression(C=1.0, class_weight=None, dual=False,
                                    fit_intercept=True, intercept_scaling=1,
                                    l1_ratio=None, max_iter=1000,
                                    multi_class='auto', n_jobs=None,
                                    penalty='l2', random_state=8705,
                                    solver='lbfgs', tol=0.0001, verbose=0,
                                    warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x0000023AB2C42320>)
2025-02-20 12:11:52,148:INFO:Checking exceptions
2025-02-20 12:11:52,148:INFO:Preloading libraries
2025-02-20 12:11:52,151:INFO:Set up data.
2025-02-20 12:11:52,156:INFO:Set up index.
2025-02-20 13:31:41,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 13:31:41,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 13:31:41,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 13:31:41,421:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2025-02-20 13:31:42,175:INFO:PyCaret ClassificationExperiment
2025-02-20 13:31:42,175:INFO:Logging name: clf-default-name
2025-02-20 13:31:42,175:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2025-02-20 13:31:42,175:INFO:version 3.3.2
2025-02-20 13:31:42,175:INFO:Initializing setup()
2025-02-20 13:31:42,175:INFO:self.USI: 64bc
2025-02-20 13:31:42,175:INFO:self._variable_keys: {'y_test', 'fold_generator', 'fix_imbalance', 'gpu_param', 'y_train', 'seed', 'html_param', 'fold_shuffle_param', 'logging_param', 'log_plots_param', 'exp_name_log', '_available_plots', 'exp_id', 'y', 'X_test', 'idx', 'X_train', '_ml_usecase', 'data', 'pipeline', 'USI', 'target_param', 'gpu_n_jobs_param', 'X', 'fold_groups_param', 'is_multiclass', 'n_jobs_param', 'memory'}
2025-02-20 13:31:42,175:INFO:Checking environment
2025-02-20 13:31:42,175:INFO:python_version: 3.10.14
2025-02-20 13:31:42,175:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2025-02-20 13:31:42,175:INFO:machine: AMD64
2025-02-20 13:31:42,175:INFO:platform: Windows-10-10.0.22631-SP0
2025-02-20 13:31:42,199:INFO:Memory: svmem(total=16423702528, available=4177268736, percent=74.6, used=12246433792, free=4177268736)
2025-02-20 13:31:42,199:INFO:Physical Core: 8
2025-02-20 13:31:42,199:INFO:Logical Core: 16
2025-02-20 13:31:42,199:INFO:Checking libraries
2025-02-20 13:31:42,199:INFO:System:
2025-02-20 13:31:42,199:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2025-02-20 13:31:42,199:INFO:executable: c:\Users\bitla\anaconda3\envs\ids\python.exe
2025-02-20 13:31:42,199:INFO:   machine: Windows-10-10.0.22631-SP0
2025-02-20 13:31:42,199:INFO:PyCaret required dependencies:
2025-02-20 13:31:42,240:INFO:                 pip: 25.0
2025-02-20 13:31:42,240:INFO:          setuptools: 75.8.0
2025-02-20 13:31:42,240:INFO:             pycaret: 3.3.2
2025-02-20 13:31:42,240:INFO:             IPython: 8.32.0
2025-02-20 13:31:42,240:INFO:          ipywidgets: 8.1.5
2025-02-20 13:31:42,240:INFO:                tqdm: 4.67.1
2025-02-20 13:31:42,240:INFO:               numpy: 1.26.4
2025-02-20 13:31:42,240:INFO:              pandas: 2.1.4
2025-02-20 13:31:42,240:INFO:              jinja2: 3.1.5
2025-02-20 13:31:42,240:INFO:               scipy: 1.11.4
2025-02-20 13:31:42,240:INFO:              joblib: 1.3.2
2025-02-20 13:31:42,240:INFO:             sklearn: 1.4.2
2025-02-20 13:31:42,240:INFO:                pyod: 2.0.3
2025-02-20 13:31:42,240:INFO:            imblearn: 0.13.0
2025-02-20 13:31:42,240:INFO:   category_encoders: 2.7.0
2025-02-20 13:31:42,240:INFO:            lightgbm: 4.6.0
2025-02-20 13:31:42,240:INFO:               numba: 0.61.0
2025-02-20 13:31:42,248:INFO:            requests: 2.32.3
2025-02-20 13:31:42,248:INFO:          matplotlib: 3.7.5
2025-02-20 13:31:42,248:INFO:          scikitplot: 0.3.7
2025-02-20 13:31:42,248:INFO:         yellowbrick: 1.5
2025-02-20 13:31:42,248:INFO:              plotly: 5.24.1
2025-02-20 13:31:42,248:INFO:    plotly-resampler: Not installed
2025-02-20 13:31:42,248:INFO:             kaleido: 0.2.1
2025-02-20 13:31:42,248:INFO:           schemdraw: 0.15
2025-02-20 13:31:42,248:INFO:         statsmodels: 0.14.4
2025-02-20 13:31:42,248:INFO:              sktime: 0.26.0
2025-02-20 13:31:42,248:INFO:               tbats: 1.1.3
2025-02-20 13:31:42,248:INFO:            pmdarima: 2.0.4
2025-02-20 13:31:42,248:INFO:              psutil: 7.0.0
2025-02-20 13:31:42,248:INFO:          markupsafe: 3.0.2
2025-02-20 13:31:42,248:INFO:             pickle5: Not installed
2025-02-20 13:31:42,248:INFO:         cloudpickle: 3.1.1
2025-02-20 13:31:42,248:INFO:         deprecation: 2.1.0
2025-02-20 13:31:42,248:INFO:              xxhash: 3.5.0
2025-02-20 13:31:42,248:INFO:           wurlitzer: Not installed
2025-02-20 13:31:42,248:INFO:PyCaret optional dependencies:
2025-02-20 13:31:42,266:INFO:                shap: Not installed
2025-02-20 13:31:42,266:INFO:           interpret: Not installed
2025-02-20 13:31:42,266:INFO:                umap: Not installed
2025-02-20 13:31:42,266:INFO:     ydata_profiling: Not installed
2025-02-20 13:31:42,266:INFO:  explainerdashboard: Not installed
2025-02-20 13:31:42,266:INFO:             autoviz: Not installed
2025-02-20 13:31:42,266:INFO:           fairlearn: Not installed
2025-02-20 13:31:42,266:INFO:          deepchecks: Not installed
2025-02-20 13:31:42,266:INFO:             xgboost: Not installed
2025-02-20 13:31:42,266:INFO:            catboost: Not installed
2025-02-20 13:31:42,266:INFO:              kmodes: Not installed
2025-02-20 13:31:42,266:INFO:             mlxtend: Not installed
2025-02-20 13:31:42,266:INFO:       statsforecast: Not installed
2025-02-20 13:31:42,266:INFO:        tune_sklearn: Not installed
2025-02-20 13:31:42,266:INFO:                 ray: Not installed
2025-02-20 13:31:42,266:INFO:            hyperopt: Not installed
2025-02-20 13:31:42,266:INFO:              optuna: Not installed
2025-02-20 13:31:42,266:INFO:               skopt: Not installed
2025-02-20 13:31:42,266:INFO:              mlflow: Not installed
2025-02-20 13:31:42,266:INFO:              gradio: Not installed
2025-02-20 13:31:42,266:INFO:             fastapi: Not installed
2025-02-20 13:31:42,266:INFO:             uvicorn: Not installed
2025-02-20 13:31:42,266:INFO:              m2cgen: Not installed
2025-02-20 13:31:42,266:INFO:           evidently: Not installed
2025-02-20 13:31:42,266:INFO:               fugue: Not installed
2025-02-20 13:31:42,266:INFO:           streamlit: Not installed
2025-02-20 13:31:42,266:INFO:             prophet: Not installed
2025-02-20 13:31:42,266:INFO:None
2025-02-20 13:31:42,266:INFO:Set up data.
2025-02-20 13:31:42,279:INFO:Set up folding strategy.
2025-02-20 13:31:42,279:INFO:Set up train/test split.
2025-02-20 13:31:42,327:INFO:Set up index.
2025-02-20 13:31:42,327:INFO:Assigning column types.
2025-02-20 13:31:42,327:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2025-02-20 13:31:42,389:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,389:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,447:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,447:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,506:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,506:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,551:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,552:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,707:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2025-02-20 13:31:42,764:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,799:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,799:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,857:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2025-02-20 13:31:42,890:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,890:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,890:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2025-02-20 13:31:42,968:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:42,968:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:43,073:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:43,073:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:43,073:INFO:Preparing preprocessing pipeline...
2025-02-20 13:31:43,080:INFO:Set up label encoding.
2025-02-20 13:31:43,080:INFO:Set up simple imputation.
2025-02-20 13:31:43,082:INFO:Set up encoding of categorical features.
2025-02-20 13:31:43,082:INFO:Set up column name cleaning.
2025-02-20 13:31:43,267:INFO:Finished creating preprocessing pipeline.
2025-02-20 13:31:43,303:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False)
2025-02-20 13:31:43,303:INFO:Creating final display dataframe.
2025-02-20 13:31:43,801:INFO:Setup _display_container:                     Description             Value
0                    Session id              3627
1                        Target             Churn
2                   Target type            Binary
3                Target mapping     No: 0, Yes: 1
4           Original data shape        (7032, 10)
5        Transformed data shape        (7032, 13)
6   Transformed train set shape        (4922, 13)
7    Transformed test set shape        (2110, 13)
8              Numeric features                 8
9          Categorical features                 1
10     Rows with missing values             24.0%
11                   Preprocess              True
12              Imputation type            simple
13           Numeric imputation              mean
14       Categorical imputation              mode
15     Maximum one-hot encoding                25
16              Encoding method              None
17               Fold Generator   StratifiedKFold
18                  Fold Number                10
19                     CPU Jobs                -1
20                      Use GPU             False
21               Log Experiment             False
22              Experiment Name  clf-default-name
23                          USI              64bc
2025-02-20 13:31:43,948:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:43,948:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:44,067:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:44,067:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2025-02-20 13:31:44,067:INFO:setup() successfully completed in 1.91s...............
2025-02-20 13:31:44,101:INFO:Initializing compare_models()
2025-02-20 13:31:44,101:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2025-02-20 13:31:44,101:INFO:Checking exceptions
2025-02-20 13:31:44,113:INFO:Preparing display monitor
2025-02-20 13:31:44,157:INFO:Initializing Logistic Regression
2025-02-20 13:31:44,165:INFO:Total runtime is 0.0001333316167195638 minutes
2025-02-20 13:31:44,173:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:44,173:INFO:Initializing create_model()
2025-02-20 13:31:44,173:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:44,173:INFO:Checking exceptions
2025-02-20 13:31:44,173:INFO:Importing libraries
2025-02-20 13:31:44,173:INFO:Copying training dataset
2025-02-20 13:31:44,189:INFO:Defining folds
2025-02-20 13:31:44,189:INFO:Declaring metric variables
2025-02-20 13:31:44,206:INFO:Importing untrained model
2025-02-20 13:31:44,214:INFO:Logistic Regression Imported successfully
2025-02-20 13:31:44,231:INFO:Starting cross validation
2025-02-20 13:31:44,231:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:49,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,380:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,414:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,430:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,445:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,477:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,483:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,488:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,488:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,488:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,501:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2025-02-20 13:31:49,517:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,517:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,517:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,517:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,517:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,533:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,552:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,565:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,579:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,583:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:49,619:INFO:Calculating mean and std
2025-02-20 13:31:49,621:INFO:Creating metrics dataframe
2025-02-20 13:31:49,625:INFO:Uploading results into container
2025-02-20 13:31:49,628:INFO:Uploading model into container now
2025-02-20 13:31:49,628:INFO:_master_model_container: 1
2025-02-20 13:31:49,628:INFO:_display_container: 2
2025-02-20 13:31:49,628:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=3627, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2025-02-20 13:31:49,628:INFO:create_model() successfully completed......................................
2025-02-20 13:31:49,746:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:49,746:INFO:Creating metrics dataframe
2025-02-20 13:31:49,767:INFO:Initializing K Neighbors Classifier
2025-02-20 13:31:49,767:INFO:Total runtime is 0.09349470138549805 minutes
2025-02-20 13:31:49,768:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:49,768:INFO:Initializing create_model()
2025-02-20 13:31:49,768:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:49,768:INFO:Checking exceptions
2025-02-20 13:31:49,768:INFO:Importing libraries
2025-02-20 13:31:49,768:INFO:Copying training dataset
2025-02-20 13:31:49,776:INFO:Defining folds
2025-02-20 13:31:49,776:INFO:Declaring metric variables
2025-02-20 13:31:49,788:INFO:Importing untrained model
2025-02-20 13:31:49,793:INFO:K Neighbors Classifier Imported successfully
2025-02-20 13:31:49,802:INFO:Starting cross validation
2025-02-20 13:31:49,805:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:50,045:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,061:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,061:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,061:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,061:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,081:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,081:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,082:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:50,093:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,017:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,027:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,033:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,044:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,044:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,044:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,049:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,054:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,054:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,085:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,100:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,116:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,129:INFO:Calculating mean and std
2025-02-20 13:31:53,129:INFO:Creating metrics dataframe
2025-02-20 13:31:53,134:INFO:Uploading results into container
2025-02-20 13:31:53,134:INFO:Uploading model into container now
2025-02-20 13:31:53,134:INFO:_master_model_container: 2
2025-02-20 13:31:53,134:INFO:_display_container: 2
2025-02-20 13:31:53,134:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2025-02-20 13:31:53,134:INFO:create_model() successfully completed......................................
2025-02-20 13:31:53,249:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:53,249:INFO:Creating metrics dataframe
2025-02-20 13:31:53,251:INFO:Initializing Naive Bayes
2025-02-20 13:31:53,251:INFO:Total runtime is 0.1515660762786865 minutes
2025-02-20 13:31:53,260:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:53,260:INFO:Initializing create_model()
2025-02-20 13:31:53,260:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:53,260:INFO:Checking exceptions
2025-02-20 13:31:53,260:INFO:Importing libraries
2025-02-20 13:31:53,260:INFO:Copying training dataset
2025-02-20 13:31:53,271:INFO:Defining folds
2025-02-20 13:31:53,271:INFO:Declaring metric variables
2025-02-20 13:31:53,280:INFO:Importing untrained model
2025-02-20 13:31:53,286:INFO:Naive Bayes Imported successfully
2025-02-20 13:31:53,286:INFO:Starting cross validation
2025-02-20 13:31:53,286:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:53,434:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,446:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,451:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,462:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,462:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,466:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,469:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,470:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,484:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,514:INFO:Calculating mean and std
2025-02-20 13:31:53,516:INFO:Creating metrics dataframe
2025-02-20 13:31:53,519:INFO:Uploading results into container
2025-02-20 13:31:53,519:INFO:Uploading model into container now
2025-02-20 13:31:53,520:INFO:_master_model_container: 3
2025-02-20 13:31:53,521:INFO:_display_container: 2
2025-02-20 13:31:53,521:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2025-02-20 13:31:53,521:INFO:create_model() successfully completed......................................
2025-02-20 13:31:53,649:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:53,649:INFO:Creating metrics dataframe
2025-02-20 13:31:53,652:INFO:Initializing Decision Tree Classifier
2025-02-20 13:31:53,652:INFO:Total runtime is 0.15825896660486857 minutes
2025-02-20 13:31:53,666:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:53,666:INFO:Initializing create_model()
2025-02-20 13:31:53,666:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:53,666:INFO:Checking exceptions
2025-02-20 13:31:53,666:INFO:Importing libraries
2025-02-20 13:31:53,668:INFO:Copying training dataset
2025-02-20 13:31:53,668:INFO:Defining folds
2025-02-20 13:31:53,668:INFO:Declaring metric variables
2025-02-20 13:31:53,684:INFO:Importing untrained model
2025-02-20 13:31:53,688:INFO:Decision Tree Classifier Imported successfully
2025-02-20 13:31:53,699:INFO:Starting cross validation
2025-02-20 13:31:53,702:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:53,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,940:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,952:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,955:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,955:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,955:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,955:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,959:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,960:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,960:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,960:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,966:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,966:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,968:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,969:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,972:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,972:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,976:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,983:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:53,988:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,001:INFO:Calculating mean and std
2025-02-20 13:31:54,001:INFO:Creating metrics dataframe
2025-02-20 13:31:54,006:INFO:Uploading results into container
2025-02-20 13:31:54,007:INFO:Uploading model into container now
2025-02-20 13:31:54,007:INFO:_master_model_container: 4
2025-02-20 13:31:54,007:INFO:_display_container: 2
2025-02-20 13:31:54,007:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=3627, splitter='best')
2025-02-20 13:31:54,007:INFO:create_model() successfully completed......................................
2025-02-20 13:31:54,124:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:54,124:INFO:Creating metrics dataframe
2025-02-20 13:31:54,141:INFO:Initializing SVM - Linear Kernel
2025-02-20 13:31:54,141:INFO:Total runtime is 0.1664017120997111 minutes
2025-02-20 13:31:54,144:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:54,144:INFO:Initializing create_model()
2025-02-20 13:31:54,144:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:54,144:INFO:Checking exceptions
2025-02-20 13:31:54,144:INFO:Importing libraries
2025-02-20 13:31:54,144:INFO:Copying training dataset
2025-02-20 13:31:54,157:INFO:Defining folds
2025-02-20 13:31:54,157:INFO:Declaring metric variables
2025-02-20 13:31:54,166:INFO:Importing untrained model
2025-02-20 13:31:54,174:INFO:SVM - Linear Kernel Imported successfully
2025-02-20 13:31:54,182:INFO:Starting cross validation
2025-02-20 13:31:54,182:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:54,404:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,408:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,419:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,423:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,427:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,435:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,439:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,449:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,457:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,467:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,497:INFO:Calculating mean and std
2025-02-20 13:31:54,499:INFO:Creating metrics dataframe
2025-02-20 13:31:54,499:INFO:Uploading results into container
2025-02-20 13:31:54,499:INFO:Uploading model into container now
2025-02-20 13:31:54,499:INFO:_master_model_container: 5
2025-02-20 13:31:54,499:INFO:_display_container: 2
2025-02-20 13:31:54,499:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=3627, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2025-02-20 13:31:54,499:INFO:create_model() successfully completed......................................
2025-02-20 13:31:54,607:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:54,607:INFO:Creating metrics dataframe
2025-02-20 13:31:54,623:INFO:Initializing Ridge Classifier
2025-02-20 13:31:54,623:INFO:Total runtime is 0.174433962504069 minutes
2025-02-20 13:31:54,623:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:54,632:INFO:Initializing create_model()
2025-02-20 13:31:54,632:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:54,632:INFO:Checking exceptions
2025-02-20 13:31:54,632:INFO:Importing libraries
2025-02-20 13:31:54,632:INFO:Copying training dataset
2025-02-20 13:31:54,632:INFO:Defining folds
2025-02-20 13:31:54,632:INFO:Declaring metric variables
2025-02-20 13:31:54,650:INFO:Importing untrained model
2025-02-20 13:31:54,656:INFO:Ridge Classifier Imported successfully
2025-02-20 13:31:54,670:INFO:Starting cross validation
2025-02-20 13:31:54,674:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,794:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,809:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,825:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,833:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,837:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:54,865:INFO:Calculating mean and std
2025-02-20 13:31:54,865:INFO:Creating metrics dataframe
2025-02-20 13:31:54,865:INFO:Uploading results into container
2025-02-20 13:31:54,865:INFO:Uploading model into container now
2025-02-20 13:31:54,865:INFO:_master_model_container: 6
2025-02-20 13:31:54,865:INFO:_display_container: 2
2025-02-20 13:31:54,865:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=3627, solver='auto',
                tol=0.0001)
2025-02-20 13:31:54,865:INFO:create_model() successfully completed......................................
2025-02-20 13:31:54,984:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:54,984:INFO:Creating metrics dataframe
2025-02-20 13:31:54,999:INFO:Initializing Random Forest Classifier
2025-02-20 13:31:54,999:INFO:Total runtime is 0.18070629437764485 minutes
2025-02-20 13:31:55,001:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:55,001:INFO:Initializing create_model()
2025-02-20 13:31:55,001:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:55,001:INFO:Checking exceptions
2025-02-20 13:31:55,001:INFO:Importing libraries
2025-02-20 13:31:55,001:INFO:Copying training dataset
2025-02-20 13:31:55,014:INFO:Defining folds
2025-02-20 13:31:55,014:INFO:Declaring metric variables
2025-02-20 13:31:55,016:INFO:Importing untrained model
2025-02-20 13:31:55,025:INFO:Random Forest Classifier Imported successfully
2025-02-20 13:31:55,046:INFO:Starting cross validation
2025-02-20 13:31:55,049:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:56,188:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,188:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,188:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,204:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,219:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,235:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,251:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,266:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,270:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,282:INFO:Calculating mean and std
2025-02-20 13:31:56,282:INFO:Creating metrics dataframe
2025-02-20 13:31:56,282:INFO:Uploading results into container
2025-02-20 13:31:56,282:INFO:Uploading model into container now
2025-02-20 13:31:56,282:INFO:_master_model_container: 7
2025-02-20 13:31:56,282:INFO:_display_container: 2
2025-02-20 13:31:56,282:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=3627, verbose=0,
                       warm_start=False)
2025-02-20 13:31:56,282:INFO:create_model() successfully completed......................................
2025-02-20 13:31:56,419:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:56,419:INFO:Creating metrics dataframe
2025-02-20 13:31:56,419:INFO:Initializing Quadratic Discriminant Analysis
2025-02-20 13:31:56,419:INFO:Total runtime is 0.20436864693959553 minutes
2025-02-20 13:31:56,435:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:56,435:INFO:Initializing create_model()
2025-02-20 13:31:56,435:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:56,435:INFO:Checking exceptions
2025-02-20 13:31:56,435:INFO:Importing libraries
2025-02-20 13:31:56,435:INFO:Copying training dataset
2025-02-20 13:31:56,455:INFO:Defining folds
2025-02-20 13:31:56,455:INFO:Declaring metric variables
2025-02-20 13:31:56,463:INFO:Importing untrained model
2025-02-20 13:31:56,471:INFO:Quadratic Discriminant Analysis Imported successfully
2025-02-20 13:31:56,475:INFO:Starting cross validation
2025-02-20 13:31:56,483:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:56,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,609:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,624:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,635:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,650:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,666:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,669:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,670:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,671:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,673:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,673:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,674:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,676:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,677:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,678:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,679:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,679:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,680:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,683:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,686:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,687:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,690:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:56,713:INFO:Calculating mean and std
2025-02-20 13:31:56,713:INFO:Creating metrics dataframe
2025-02-20 13:31:56,713:INFO:Uploading results into container
2025-02-20 13:31:56,713:INFO:Uploading model into container now
2025-02-20 13:31:56,713:INFO:_master_model_container: 8
2025-02-20 13:31:56,713:INFO:_display_container: 2
2025-02-20 13:31:56,713:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2025-02-20 13:31:56,713:INFO:create_model() successfully completed......................................
2025-02-20 13:31:56,844:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:56,844:INFO:Creating metrics dataframe
2025-02-20 13:31:56,868:INFO:Initializing Ada Boost Classifier
2025-02-20 13:31:56,868:INFO:Total runtime is 0.2118526220321655 minutes
2025-02-20 13:31:56,876:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:56,876:INFO:Initializing create_model()
2025-02-20 13:31:56,876:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:56,876:INFO:Checking exceptions
2025-02-20 13:31:56,876:INFO:Importing libraries
2025-02-20 13:31:56,876:INFO:Copying training dataset
2025-02-20 13:31:56,888:INFO:Defining folds
2025-02-20 13:31:56,888:INFO:Declaring metric variables
2025-02-20 13:31:56,888:INFO:Importing untrained model
2025-02-20 13:31:56,905:INFO:Ada Boost Classifier Imported successfully
2025-02-20 13:31:56,916:INFO:Starting cross validation
2025-02-20 13:31:56,916:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,042:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,052:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,052:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,052:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,052:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2025-02-20 13:31:57,492:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,492:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,508:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,518:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,520:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,532:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,548:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,563:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:57,579:INFO:Calculating mean and std
2025-02-20 13:31:57,579:INFO:Creating metrics dataframe
2025-02-20 13:31:57,579:INFO:Uploading results into container
2025-02-20 13:31:57,579:INFO:Uploading model into container now
2025-02-20 13:31:57,579:INFO:_master_model_container: 9
2025-02-20 13:31:57,579:INFO:_display_container: 2
2025-02-20 13:31:57,579:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=3627)
2025-02-20 13:31:57,579:INFO:create_model() successfully completed......................................
2025-02-20 13:31:57,694:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:57,694:INFO:Creating metrics dataframe
2025-02-20 13:31:57,694:INFO:Initializing Gradient Boosting Classifier
2025-02-20 13:31:57,694:INFO:Total runtime is 0.22562521298726398 minutes
2025-02-20 13:31:57,710:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:57,710:INFO:Initializing create_model()
2025-02-20 13:31:57,710:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:57,710:INFO:Checking exceptions
2025-02-20 13:31:57,710:INFO:Importing libraries
2025-02-20 13:31:57,710:INFO:Copying training dataset
2025-02-20 13:31:57,718:INFO:Defining folds
2025-02-20 13:31:57,721:INFO:Declaring metric variables
2025-02-20 13:31:57,723:INFO:Importing untrained model
2025-02-20 13:31:57,731:INFO:Gradient Boosting Classifier Imported successfully
2025-02-20 13:31:57,741:INFO:Starting cross validation
2025-02-20 13:31:57,741:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:59,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,258:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,274:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,289:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,304:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,316:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,347:INFO:Calculating mean and std
2025-02-20 13:31:59,347:INFO:Creating metrics dataframe
2025-02-20 13:31:59,347:INFO:Uploading results into container
2025-02-20 13:31:59,353:INFO:Uploading model into container now
2025-02-20 13:31:59,354:INFO:_master_model_container: 10
2025-02-20 13:31:59,354:INFO:_display_container: 2
2025-02-20 13:31:59,355:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=3627, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2025-02-20 13:31:59,355:INFO:create_model() successfully completed......................................
2025-02-20 13:31:59,448:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:59,448:INFO:Creating metrics dataframe
2025-02-20 13:31:59,463:INFO:Initializing Linear Discriminant Analysis
2025-02-20 13:31:59,463:INFO:Total runtime is 0.25510767300923665 minutes
2025-02-20 13:31:59,463:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:59,463:INFO:Initializing create_model()
2025-02-20 13:31:59,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:59,463:INFO:Checking exceptions
2025-02-20 13:31:59,463:INFO:Importing libraries
2025-02-20 13:31:59,463:INFO:Copying training dataset
2025-02-20 13:31:59,479:INFO:Defining folds
2025-02-20 13:31:59,479:INFO:Declaring metric variables
2025-02-20 13:31:59,492:INFO:Importing untrained model
2025-02-20 13:31:59,492:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 13:31:59,500:INFO:Starting cross validation
2025-02-20 13:31:59,508:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:31:59,626:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,637:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,668:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:31:59,699:INFO:Calculating mean and std
2025-02-20 13:31:59,699:INFO:Creating metrics dataframe
2025-02-20 13:31:59,705:INFO:Uploading results into container
2025-02-20 13:31:59,705:INFO:Uploading model into container now
2025-02-20 13:31:59,706:INFO:_master_model_container: 11
2025-02-20 13:31:59,706:INFO:_display_container: 2
2025-02-20 13:31:59,706:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 13:31:59,706:INFO:create_model() successfully completed......................................
2025-02-20 13:31:59,810:INFO:SubProcess create_model() end ==================================
2025-02-20 13:31:59,810:INFO:Creating metrics dataframe
2025-02-20 13:31:59,826:INFO:Initializing Extra Trees Classifier
2025-02-20 13:31:59,826:INFO:Total runtime is 0.26114856004714965 minutes
2025-02-20 13:31:59,826:INFO:SubProcess create_model() called ==================================
2025-02-20 13:31:59,833:INFO:Initializing create_model()
2025-02-20 13:31:59,833:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:31:59,833:INFO:Checking exceptions
2025-02-20 13:31:59,833:INFO:Importing libraries
2025-02-20 13:31:59,833:INFO:Copying training dataset
2025-02-20 13:31:59,837:INFO:Defining folds
2025-02-20 13:31:59,837:INFO:Declaring metric variables
2025-02-20 13:31:59,837:INFO:Importing untrained model
2025-02-20 13:31:59,851:INFO:Extra Trees Classifier Imported successfully
2025-02-20 13:31:59,851:INFO:Starting cross validation
2025-02-20 13:31:59,851:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:32:00,682:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,698:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,714:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,714:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,714:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,729:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,750:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,771:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,785:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,800:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,816:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,832:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,847:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,864:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,870:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:00,895:INFO:Calculating mean and std
2025-02-20 13:32:00,895:INFO:Creating metrics dataframe
2025-02-20 13:32:00,895:INFO:Uploading results into container
2025-02-20 13:32:00,895:INFO:Uploading model into container now
2025-02-20 13:32:00,895:INFO:_master_model_container: 12
2025-02-20 13:32:00,895:INFO:_display_container: 2
2025-02-20 13:32:00,895:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=3627, verbose=0,
                     warm_start=False)
2025-02-20 13:32:00,895:INFO:create_model() successfully completed......................................
2025-02-20 13:32:01,027:INFO:SubProcess create_model() end ==================================
2025-02-20 13:32:01,027:INFO:Creating metrics dataframe
2025-02-20 13:32:01,040:INFO:Initializing Light Gradient Boosting Machine
2025-02-20 13:32:01,040:INFO:Total runtime is 0.28138179779052735 minutes
2025-02-20 13:32:01,042:INFO:SubProcess create_model() called ==================================
2025-02-20 13:32:01,042:INFO:Initializing create_model()
2025-02-20 13:32:01,042:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:32:01,042:INFO:Checking exceptions
2025-02-20 13:32:01,042:INFO:Importing libraries
2025-02-20 13:32:01,042:INFO:Copying training dataset
2025-02-20 13:32:01,058:INFO:Defining folds
2025-02-20 13:32:01,058:INFO:Declaring metric variables
2025-02-20 13:32:01,063:INFO:Importing untrained model
2025-02-20 13:32:01,073:INFO:Light Gradient Boosting Machine Imported successfully
2025-02-20 13:32:01,083:INFO:Starting cross validation
2025-02-20 13:32:01,091:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:32:01,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:01,984:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,000:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,015:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,016:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,021:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,034:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,044:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,048:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,048:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,078:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,094:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,109:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,136:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,138:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,149:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,227:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,227:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,227:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,237:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,267:INFO:Calculating mean and std
2025-02-20 13:32:02,267:INFO:Creating metrics dataframe
2025-02-20 13:32:02,272:INFO:Uploading results into container
2025-02-20 13:32:02,272:INFO:Uploading model into container now
2025-02-20 13:32:02,274:INFO:_master_model_container: 13
2025-02-20 13:32:02,274:INFO:_display_container: 2
2025-02-20 13:32:02,274:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=3627, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2025-02-20 13:32:02,274:INFO:create_model() successfully completed......................................
2025-02-20 13:32:02,394:INFO:SubProcess create_model() end ==================================
2025-02-20 13:32:02,394:INFO:Creating metrics dataframe
2025-02-20 13:32:02,409:INFO:Initializing Dummy Classifier
2025-02-20 13:32:02,409:INFO:Total runtime is 0.30420913696289065 minutes
2025-02-20 13:32:02,413:INFO:SubProcess create_model() called ==================================
2025-02-20 13:32:02,417:INFO:Initializing create_model()
2025-02-20 13:32:02,417:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000002AF53274AF0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:32:02,417:INFO:Checking exceptions
2025-02-20 13:32:02,417:INFO:Importing libraries
2025-02-20 13:32:02,417:INFO:Copying training dataset
2025-02-20 13:32:02,418:INFO:Defining folds
2025-02-20 13:32:02,426:INFO:Declaring metric variables
2025-02-20 13:32:02,430:INFO:Importing untrained model
2025-02-20 13:32:02,434:INFO:Dummy Classifier Imported successfully
2025-02-20 13:32:02,443:INFO:Starting cross validation
2025-02-20 13:32:02,443:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2025-02-20 13:32:02,587:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,595:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,603:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,611:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,619:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,627:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,627:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,627:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,634:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,639:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:02,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,652:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:02,681:INFO:Calculating mean and std
2025-02-20 13:32:02,683:INFO:Creating metrics dataframe
2025-02-20 13:32:02,685:INFO:Uploading results into container
2025-02-20 13:32:02,685:INFO:Uploading model into container now
2025-02-20 13:32:02,685:INFO:_master_model_container: 14
2025-02-20 13:32:02,685:INFO:_display_container: 2
2025-02-20 13:32:02,685:INFO:DummyClassifier(constant=None, random_state=3627, strategy='prior')
2025-02-20 13:32:02,685:INFO:create_model() successfully completed......................................
2025-02-20 13:32:02,818:INFO:SubProcess create_model() end ==================================
2025-02-20 13:32:02,818:INFO:Creating metrics dataframe
2025-02-20 13:32:02,835:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2025-02-20 13:32:02,852:INFO:Initializing create_model()
2025-02-20 13:32:02,852:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2025-02-20 13:32:02,852:INFO:Checking exceptions
2025-02-20 13:32:02,852:INFO:Importing libraries
2025-02-20 13:32:02,852:INFO:Copying training dataset
2025-02-20 13:32:02,870:INFO:Defining folds
2025-02-20 13:32:02,870:INFO:Declaring metric variables
2025-02-20 13:32:02,870:INFO:Importing untrained model
2025-02-20 13:32:02,870:INFO:Declaring custom model
2025-02-20 13:32:02,870:INFO:Linear Discriminant Analysis Imported successfully
2025-02-20 13:32:02,870:INFO:Cross validation set to False
2025-02-20 13:32:02,870:INFO:Fitting Model
2025-02-20 13:32:02,932:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 13:32:02,933:INFO:create_model() successfully completed......................................
2025-02-20 13:32:03,117:INFO:_master_model_container: 14
2025-02-20 13:32:03,117:INFO:_display_container: 2
2025-02-20 13:32:03,117:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2025-02-20 13:32:03,117:INFO:compare_models() successfully completed......................................
2025-02-20 13:32:03,250:INFO:Initializing predict_model()
2025-02-20 13:32:03,250:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002AF5311C5E0>)
2025-02-20 13:32:03,250:INFO:Checking exceptions
2025-02-20 13:32:03,250:INFO:Preloading libraries
2025-02-20 13:32:03,250:INFO:Set up data.
2025-02-20 13:32:03,250:INFO:Set up index.
2025-02-20 13:32:03,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 640, in roc_auc_score
    return _average_binary_score(
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_base.py", line 75, in _average_binary_score
    return binary_metric(y_true, y_score, sample_weight=sample_weight)
  File "c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_ranking.py", line 382, in _binary_roc_auc_score
    raise ValueError(
ValueError: Only one class present in y_true. ROC AUC score is not defined in that case.

  warnings.warn(traceback.format_exc())

2025-02-20 13:32:03,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:03,347:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Recall is ill-defined and being set to 0.0 in labels with no true samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'Yes') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: F-score is ill-defined and being set to 0.0 in labels with no true nor predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:708: RuntimeWarning: invalid value encountered in scalar divide
  k = np.sum(w_mat * confusion) / np.sum(w_mat * expected)

2025-02-20 13:32:03,355:WARNING:c:\Users\bitla\anaconda3\envs\ids\lib\site-packages\sklearn\metrics\_classification.py:386: UserWarning: A single label was found in 'y_true' and 'y_pred'. For the confusion matrix to have the correct shape, use the 'labels' parameter to pass all known labels.
  warnings.warn(

2025-02-20 13:32:03,504:INFO:Initializing save_model()
2025-02-20 13:32:03,504:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=GBC, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                 TransformerWrapper(exclude=None, include=['PaymentMethod'],
                                    transformer=OneHotEncoder(cols=['PaymentMethod'],
                                                              drop_invariant=False,
                                                              handle_missing='return_nan',
                                                              handle_unknown='value',
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+')))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2025-02-20 13:32:03,504:INFO:Adding model into prep_pipe
2025-02-20 13:32:03,519:INFO:GBC.pkl saved in current working directory
2025-02-20 13:32:03,539:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenure_ratio',
                                             'tenure_ratio'],
                                    transformer=Sim...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2025-02-20 13:32:03,539:INFO:save_model() successfully completed......................................
2025-02-20 13:32:03,718:INFO:Initializing load_model()
2025-02-20 13:32:03,718:INFO:load_model(model_name=GBC, platform=None, authentication=None, verbose=True)
2025-02-20 13:32:03,855:INFO:Initializing predict_model()
2025-02-20 13:32:03,855:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000002AF16BC3AC0>, estimator=Pipeline(memory=FastMemory(location=C:\Users\bitla\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Unnamed: 0', 'tenure',
                                             'PhoneService', 'Contract',
                                             'MonthlyCharges', 'TotalCharges',
                                             'MonthlyCharges_Tenur...
                                                              return_df=True,
                                                              use_cat_names=True,
                                                              verbose=0))),
                ('clean_column_names',
                 TransformerWrapper(exclude=None, include=None,
                                    transformer=CleanColumnNames(match='[\\]\\[\\,\\{\\}\\"\\:]+'))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000002AF73F9B370>)
2025-02-20 13:32:03,855:INFO:Checking exceptions
2025-02-20 13:32:03,855:INFO:Preloading libraries
2025-02-20 13:32:03,858:INFO:Set up data.
2025-02-20 13:32:03,862:INFO:Set up index.
